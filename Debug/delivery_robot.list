
delivery_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e3dc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  0800e4f0  0800e4f0  0001e4f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea78  0800ea78  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800ea78  0800ea78  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ea78  0800ea78  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea78  0800ea78  0001ea78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea7c  0800ea7c  0001ea7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800ea80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  200001f0  0800ec6c  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000554  0800ec6c  00020554  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012fd5  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027d9  00000000  00000000  000331ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f8  00000000  00000000  000359c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001108  00000000  00000000  00036bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003cda  00000000  00000000  00037cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a6d  00000000  00000000  0003b9a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000940ab  00000000  00000000  0005040f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e44ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065ec  00000000  00000000  000e450c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e4d4 	.word	0x0800e4d4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800e4d4 	.word	0x0800e4d4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_d2lz>:
 800115c:	b538      	push	{r3, r4, r5, lr}
 800115e:	4605      	mov	r5, r0
 8001160:	460c      	mov	r4, r1
 8001162:	2200      	movs	r2, #0
 8001164:	2300      	movs	r3, #0
 8001166:	4628      	mov	r0, r5
 8001168:	4621      	mov	r1, r4
 800116a:	f7ff fc27 	bl	80009bc <__aeabi_dcmplt>
 800116e:	b928      	cbnz	r0, 800117c <__aeabi_d2lz+0x20>
 8001170:	4628      	mov	r0, r5
 8001172:	4621      	mov	r1, r4
 8001174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001178:	f000 b80a 	b.w	8001190 <__aeabi_d2ulz>
 800117c:	4628      	mov	r0, r5
 800117e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001182:	f000 f805 	bl	8001190 <__aeabi_d2ulz>
 8001186:	4240      	negs	r0, r0
 8001188:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800118c:	bd38      	pop	{r3, r4, r5, pc}
 800118e:	bf00      	nop

08001190 <__aeabi_d2ulz>:
 8001190:	b5d0      	push	{r4, r6, r7, lr}
 8001192:	2200      	movs	r2, #0
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <__aeabi_d2ulz+0x34>)
 8001196:	4606      	mov	r6, r0
 8001198:	460f      	mov	r7, r1
 800119a:	f7ff f99d 	bl	80004d8 <__aeabi_dmul>
 800119e:	f7ff fc73 	bl	8000a88 <__aeabi_d2uiz>
 80011a2:	4604      	mov	r4, r0
 80011a4:	f7ff f91e 	bl	80003e4 <__aeabi_ui2d>
 80011a8:	2200      	movs	r2, #0
 80011aa:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <__aeabi_d2ulz+0x38>)
 80011ac:	f7ff f994 	bl	80004d8 <__aeabi_dmul>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4630      	mov	r0, r6
 80011b6:	4639      	mov	r1, r7
 80011b8:	f7fe ffd6 	bl	8000168 <__aeabi_dsub>
 80011bc:	f7ff fc64 	bl	8000a88 <__aeabi_d2uiz>
 80011c0:	4621      	mov	r1, r4
 80011c2:	bdd0      	pop	{r4, r6, r7, pc}
 80011c4:	3df00000 	.word	0x3df00000
 80011c8:	41f00000 	.word	0x41f00000

080011cc <MPU6050_init>:



extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly
void MPU6050_init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af04      	add	r7, sp, #16
	uint8_t check,data;
	HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1 , 1000);
 80011d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d6:	9302      	str	r3, [sp, #8]
 80011d8:	2301      	movs	r3, #1
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	1dfb      	adds	r3, r7, #7
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2301      	movs	r3, #1
 80011e2:	2275      	movs	r2, #117	; 0x75
 80011e4:	21d0      	movs	r1, #208	; 0xd0
 80011e6:	4823      	ldr	r0, [pc, #140]	; (8001274 <MPU6050_init+0xa8>)
 80011e8:	f003 ff34 	bl	8005054 <HAL_I2C_Mem_Read>
	if (check == 104)
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	2b68      	cmp	r3, #104	; 0x68
 80011f0:	d13b      	bne.n	800126a <MPU6050_init+0x9e>
	{
		//Power management register write all 0's to wake up sensor
		data = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2,MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, 1000);
 80011f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fa:	9302      	str	r3, [sp, #8]
 80011fc:	2301      	movs	r3, #1
 80011fe:	9301      	str	r3, [sp, #4]
 8001200:	1dbb      	adds	r3, r7, #6
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	2301      	movs	r3, #1
 8001206:	226b      	movs	r2, #107	; 0x6b
 8001208:	21d0      	movs	r1, #208	; 0xd0
 800120a:	481a      	ldr	r0, [pc, #104]	; (8001274 <MPU6050_init+0xa8>)
 800120c:	f003 fe28 	bl	8004e60 <HAL_I2C_Mem_Write>
		//Set data rate of 1KHz by writing SMPRT_DIV register
		data = 0x07;
 8001210:	2307      	movs	r3, #7
 8001212:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 1000);
 8001214:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001218:	9302      	str	r3, [sp, #8]
 800121a:	2301      	movs	r3, #1
 800121c:	9301      	str	r3, [sp, #4]
 800121e:	1dbb      	adds	r3, r7, #6
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	2301      	movs	r3, #1
 8001224:	2219      	movs	r2, #25
 8001226:	21d0      	movs	r1, #208	; 0xd0
 8001228:	4812      	ldr	r0, [pc, #72]	; (8001274 <MPU6050_init+0xa8>)
 800122a:	f003 fe19 	bl	8004e60 <HAL_I2C_Mem_Write>
		//Writing both register with 0 to set full scale range
		data = 0x00;
 800122e:	2300      	movs	r3, #0
 8001230:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, 1000);
 8001232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001236:	9302      	str	r3, [sp, #8]
 8001238:	2301      	movs	r3, #1
 800123a:	9301      	str	r3, [sp, #4]
 800123c:	1dbb      	adds	r3, r7, #6
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2301      	movs	r3, #1
 8001242:	221c      	movs	r2, #28
 8001244:	21d0      	movs	r1, #208	; 0xd0
 8001246:	480b      	ldr	r0, [pc, #44]	; (8001274 <MPU6050_init+0xa8>)
 8001248:	f003 fe0a 	bl	8004e60 <HAL_I2C_Mem_Write>

		data = 0x00;
 800124c:	2300      	movs	r3, #0
 800124e:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, 1000);
 8001250:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001254:	9302      	str	r3, [sp, #8]
 8001256:	2301      	movs	r3, #1
 8001258:	9301      	str	r3, [sp, #4]
 800125a:	1dbb      	adds	r3, r7, #6
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2301      	movs	r3, #1
 8001260:	221b      	movs	r2, #27
 8001262:	21d0      	movs	r1, #208	; 0xd0
 8001264:	4803      	ldr	r0, [pc, #12]	; (8001274 <MPU6050_init+0xa8>)
 8001266:	f003 fdfb 	bl	8004e60 <HAL_I2C_Mem_Write>
//		//Enable data ready interrupts
//		data = 0x01;
//		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, INT_ENABLE, 1, &data, 1, 1000);
	}

}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200002e0 	.word	0x200002e0

08001278 <MPU6050_Read_Accel>:

//Function with multiple return using pointer

void MPU6050_Read_Accel (float* Ax, float* Ay, float* Az)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08a      	sub	sp, #40	; 0x28
 800127c:	af04      	add	r7, sp, #16
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
	uint8_t Rec_Data[6];

	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8001284:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001288:	9302      	str	r3, [sp, #8]
 800128a:	2306      	movs	r3, #6
 800128c:	9301      	str	r3, [sp, #4]
 800128e:	f107 0310 	add.w	r3, r7, #16
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	2301      	movs	r3, #1
 8001296:	223b      	movs	r2, #59	; 0x3b
 8001298:	21d0      	movs	r1, #208	; 0xd0
 800129a:	4835      	ldr	r0, [pc, #212]	; (8001370 <MPU6050_Read_Accel+0xf8>)
 800129c:	f003 feda 	bl	8005054 <HAL_I2C_Mem_Read>
	//Adding 2 BYTES into 16 bit integer
	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80012a0:	7c3b      	ldrb	r3, [r7, #16]
 80012a2:	021b      	lsls	r3, r3, #8
 80012a4:	b21a      	sxth	r2, r3
 80012a6:	7c7b      	ldrb	r3, [r7, #17]
 80012a8:	b21b      	sxth	r3, r3
 80012aa:	4313      	orrs	r3, r2
 80012ac:	b21a      	sxth	r2, r3
 80012ae:	4b31      	ldr	r3, [pc, #196]	; (8001374 <MPU6050_Read_Accel+0xfc>)
 80012b0:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80012b2:	7cbb      	ldrb	r3, [r7, #18]
 80012b4:	021b      	lsls	r3, r3, #8
 80012b6:	b21a      	sxth	r2, r3
 80012b8:	7cfb      	ldrb	r3, [r7, #19]
 80012ba:	b21b      	sxth	r3, r3
 80012bc:	4313      	orrs	r3, r2
 80012be:	b21a      	sxth	r2, r3
 80012c0:	4b2d      	ldr	r3, [pc, #180]	; (8001378 <MPU6050_Read_Accel+0x100>)
 80012c2:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80012c4:	7d3b      	ldrb	r3, [r7, #20]
 80012c6:	021b      	lsls	r3, r3, #8
 80012c8:	b21a      	sxth	r2, r3
 80012ca:	7d7b      	ldrb	r3, [r7, #21]
 80012cc:	b21b      	sxth	r3, r3
 80012ce:	4313      	orrs	r3, r2
 80012d0:	b21a      	sxth	r2, r3
 80012d2:	4b2a      	ldr	r3, [pc, #168]	; (800137c <MPU6050_Read_Accel+0x104>)
 80012d4:	801a      	strh	r2, [r3, #0]

	*Ax = Accel_X_RAW*100/16384.0;
 80012d6:	4b27      	ldr	r3, [pc, #156]	; (8001374 <MPU6050_Read_Accel+0xfc>)
 80012d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012dc:	461a      	mov	r2, r3
 80012de:	2364      	movs	r3, #100	; 0x64
 80012e0:	fb02 f303 	mul.w	r3, r2, r3
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff f88d 	bl	8000404 <__aeabi_i2d>
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	4b24      	ldr	r3, [pc, #144]	; (8001380 <MPU6050_Read_Accel+0x108>)
 80012f0:	f7ff fa1c 	bl	800072c <__aeabi_ddiv>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4610      	mov	r0, r2
 80012fa:	4619      	mov	r1, r3
 80012fc:	f7ff fbe4 	bl	8000ac8 <__aeabi_d2f>
 8001300:	4602      	mov	r2, r0
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	601a      	str	r2, [r3, #0]
	*Ay = Accel_Y_RAW*100/16384.0;
 8001306:	4b1c      	ldr	r3, [pc, #112]	; (8001378 <MPU6050_Read_Accel+0x100>)
 8001308:	f9b3 3000 	ldrsh.w	r3, [r3]
 800130c:	461a      	mov	r2, r3
 800130e:	2364      	movs	r3, #100	; 0x64
 8001310:	fb02 f303 	mul.w	r3, r2, r3
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f875 	bl	8000404 <__aeabi_i2d>
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	4b18      	ldr	r3, [pc, #96]	; (8001380 <MPU6050_Read_Accel+0x108>)
 8001320:	f7ff fa04 	bl	800072c <__aeabi_ddiv>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4610      	mov	r0, r2
 800132a:	4619      	mov	r1, r3
 800132c:	f7ff fbcc 	bl	8000ac8 <__aeabi_d2f>
 8001330:	4602      	mov	r2, r0
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	601a      	str	r2, [r3, #0]
	*Az = Accel_Z_RAW*100/16384.0;
 8001336:	4b11      	ldr	r3, [pc, #68]	; (800137c <MPU6050_Read_Accel+0x104>)
 8001338:	f9b3 3000 	ldrsh.w	r3, [r3]
 800133c:	461a      	mov	r2, r3
 800133e:	2364      	movs	r3, #100	; 0x64
 8001340:	fb02 f303 	mul.w	r3, r2, r3
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f85d 	bl	8000404 <__aeabi_i2d>
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <MPU6050_Read_Accel+0x108>)
 8001350:	f7ff f9ec 	bl	800072c <__aeabi_ddiv>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4610      	mov	r0, r2
 800135a:	4619      	mov	r1, r3
 800135c:	f7ff fbb4 	bl	8000ac8 <__aeabi_d2f>
 8001360:	4602      	mov	r2, r0
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	601a      	str	r2, [r3, #0]
}
 8001366:	bf00      	nop
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	200002e0 	.word	0x200002e0
 8001374:	2000020c 	.word	0x2000020c
 8001378:	2000020e 	.word	0x2000020e
 800137c:	20000210 	.word	0x20000210
 8001380:	40d00000 	.word	0x40d00000
 8001384:	00000000 	.word	0x00000000

08001388 <MPU6050_Read_Gyro>:
void MPU6050_Read_Gyro (float* Gx, float* Gy, float* Gz)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	; 0x28
 800138c:	af04      	add	r7, sp, #16
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
	uint8_t Rec_Data[6];
	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8001394:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001398:	9302      	str	r3, [sp, #8]
 800139a:	2306      	movs	r3, #6
 800139c:	9301      	str	r3, [sp, #4]
 800139e:	f107 0310 	add.w	r3, r7, #16
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	2301      	movs	r3, #1
 80013a6:	2243      	movs	r2, #67	; 0x43
 80013a8:	21d0      	movs	r1, #208	; 0xd0
 80013aa:	4831      	ldr	r0, [pc, #196]	; (8001470 <MPU6050_Read_Gyro+0xe8>)
 80013ac:	f003 fe52 	bl	8005054 <HAL_I2C_Mem_Read>
	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80013b0:	7c3b      	ldrb	r3, [r7, #16]
 80013b2:	021b      	lsls	r3, r3, #8
 80013b4:	b21a      	sxth	r2, r3
 80013b6:	7c7b      	ldrb	r3, [r7, #17]
 80013b8:	b21b      	sxth	r3, r3
 80013ba:	4313      	orrs	r3, r2
 80013bc:	b21a      	sxth	r2, r3
 80013be:	4b2d      	ldr	r3, [pc, #180]	; (8001474 <MPU6050_Read_Gyro+0xec>)
 80013c0:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [1]);
 80013c2:	7cbb      	ldrb	r3, [r7, #18]
 80013c4:	021b      	lsls	r3, r3, #8
 80013c6:	b21a      	sxth	r2, r3
 80013c8:	7c7b      	ldrb	r3, [r7, #17]
 80013ca:	b21b      	sxth	r3, r3
 80013cc:	4313      	orrs	r3, r2
 80013ce:	b21a      	sxth	r2, r3
 80013d0:	4b29      	ldr	r3, [pc, #164]	; (8001478 <MPU6050_Read_Gyro+0xf0>)
 80013d2:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [1]);
 80013d4:	7d3b      	ldrb	r3, [r7, #20]
 80013d6:	021b      	lsls	r3, r3, #8
 80013d8:	b21a      	sxth	r2, r3
 80013da:	7c7b      	ldrb	r3, [r7, #17]
 80013dc:	b21b      	sxth	r3, r3
 80013de:	4313      	orrs	r3, r2
 80013e0:	b21a      	sxth	r2, r3
 80013e2:	4b26      	ldr	r3, [pc, #152]	; (800147c <MPU6050_Read_Gyro+0xf4>)
 80013e4:	801a      	strh	r2, [r3, #0]
	*Gx = Gyro_X_RAW/131.0;
 80013e6:	4b23      	ldr	r3, [pc, #140]	; (8001474 <MPU6050_Read_Gyro+0xec>)
 80013e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff f809 	bl	8000404 <__aeabi_i2d>
 80013f2:	a31d      	add	r3, pc, #116	; (adr r3, 8001468 <MPU6050_Read_Gyro+0xe0>)
 80013f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f8:	f7ff f998 	bl	800072c <__aeabi_ddiv>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	4610      	mov	r0, r2
 8001402:	4619      	mov	r1, r3
 8001404:	f7ff fb60 	bl	8000ac8 <__aeabi_d2f>
 8001408:	4602      	mov	r2, r0
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	601a      	str	r2, [r3, #0]
	*Gy = Gyro_Y_RAW/131.0;
 800140e:	4b1a      	ldr	r3, [pc, #104]	; (8001478 <MPU6050_Read_Gyro+0xf0>)
 8001410:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001414:	4618      	mov	r0, r3
 8001416:	f7fe fff5 	bl	8000404 <__aeabi_i2d>
 800141a:	a313      	add	r3, pc, #76	; (adr r3, 8001468 <MPU6050_Read_Gyro+0xe0>)
 800141c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001420:	f7ff f984 	bl	800072c <__aeabi_ddiv>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4610      	mov	r0, r2
 800142a:	4619      	mov	r1, r3
 800142c:	f7ff fb4c 	bl	8000ac8 <__aeabi_d2f>
 8001430:	4602      	mov	r2, r0
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	601a      	str	r2, [r3, #0]
	*Gz = Gyro_Z_RAW/131.0;
 8001436:	4b11      	ldr	r3, [pc, #68]	; (800147c <MPU6050_Read_Gyro+0xf4>)
 8001438:	f9b3 3000 	ldrsh.w	r3, [r3]
 800143c:	4618      	mov	r0, r3
 800143e:	f7fe ffe1 	bl	8000404 <__aeabi_i2d>
 8001442:	a309      	add	r3, pc, #36	; (adr r3, 8001468 <MPU6050_Read_Gyro+0xe0>)
 8001444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001448:	f7ff f970 	bl	800072c <__aeabi_ddiv>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	4610      	mov	r0, r2
 8001452:	4619      	mov	r1, r3
 8001454:	f7ff fb38 	bl	8000ac8 <__aeabi_d2f>
 8001458:	4602      	mov	r2, r0
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	601a      	str	r2, [r3, #0]
}
 800145e:	bf00      	nop
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	00000000 	.word	0x00000000
 800146c:	40606000 	.word	0x40606000
 8001470:	200002e0 	.word	0x200002e0
 8001474:	20000212 	.word	0x20000212
 8001478:	20000214 	.word	0x20000214
 800147c:	20000216 	.word	0x20000216

08001480 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af02      	add	r7, sp, #8
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	f023 030f 	bic.w	r3, r3, #15
 8001490:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	011b      	lsls	r3, r3, #4
 8001496:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001498:	7bfb      	ldrb	r3, [r7, #15]
 800149a:	f043 030c 	orr.w	r3, r3, #12
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	f043 0308 	orr.w	r3, r3, #8
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80014ac:	7bbb      	ldrb	r3, [r7, #14]
 80014ae:	f043 030c 	orr.w	r3, r3, #12
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80014b6:	7bbb      	ldrb	r3, [r7, #14]
 80014b8:	f043 0308 	orr.w	r3, r3, #8
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80014c0:	f107 0208 	add.w	r2, r7, #8
 80014c4:	2364      	movs	r3, #100	; 0x64
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	2304      	movs	r3, #4
 80014ca:	214e      	movs	r1, #78	; 0x4e
 80014cc:	4803      	ldr	r0, [pc, #12]	; (80014dc <lcd_send_cmd+0x5c>)
 80014ce:	f003 fbc9 	bl	8004c64 <HAL_I2C_Master_Transmit>
}
 80014d2:	bf00      	nop
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	2000028c 	.word	0x2000028c

080014e0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af02      	add	r7, sp, #8
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	f023 030f 	bic.w	r3, r3, #15
 80014f0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	011b      	lsls	r3, r3, #4
 80014f6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	f043 030d 	orr.w	r3, r3, #13
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	f043 0309 	orr.w	r3, r3, #9
 8001508:	b2db      	uxtb	r3, r3
 800150a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800150c:	7bbb      	ldrb	r3, [r7, #14]
 800150e:	f043 030d 	orr.w	r3, r3, #13
 8001512:	b2db      	uxtb	r3, r3
 8001514:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001516:	7bbb      	ldrb	r3, [r7, #14]
 8001518:	f043 0309 	orr.w	r3, r3, #9
 800151c:	b2db      	uxtb	r3, r3
 800151e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001520:	f107 0208 	add.w	r2, r7, #8
 8001524:	2364      	movs	r3, #100	; 0x64
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	2304      	movs	r3, #4
 800152a:	214e      	movs	r1, #78	; 0x4e
 800152c:	4803      	ldr	r0, [pc, #12]	; (800153c <lcd_send_data+0x5c>)
 800152e:	f003 fb99 	bl	8004c64 <HAL_I2C_Master_Transmit>
}
 8001532:	bf00      	nop
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	2000028c 	.word	0x2000028c

08001540 <lcd_init>:

void lcd_init (void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8001544:	2033      	movs	r0, #51	; 0x33
 8001546:	f7ff ff9b 	bl	8001480 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 800154a:	2032      	movs	r0, #50	; 0x32
 800154c:	f7ff ff98 	bl	8001480 <lcd_send_cmd>
	HAL_Delay(50);
 8001550:	2032      	movs	r0, #50	; 0x32
 8001552:	f002 f907 	bl	8003764 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8001556:	2028      	movs	r0, #40	; 0x28
 8001558:	f7ff ff92 	bl	8001480 <lcd_send_cmd>
	HAL_Delay(50);
 800155c:	2032      	movs	r0, #50	; 0x32
 800155e:	f002 f901 	bl	8003764 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8001562:	2001      	movs	r0, #1
 8001564:	f7ff ff8c 	bl	8001480 <lcd_send_cmd>
	HAL_Delay(50);
 8001568:	2032      	movs	r0, #50	; 0x32
 800156a:	f002 f8fb 	bl	8003764 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 800156e:	2006      	movs	r0, #6
 8001570:	f7ff ff86 	bl	8001480 <lcd_send_cmd>
	HAL_Delay(50);
 8001574:	2032      	movs	r0, #50	; 0x32
 8001576:	f002 f8f5 	bl	8003764 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 800157a:	200c      	movs	r0, #12
 800157c:	f7ff ff80 	bl	8001480 <lcd_send_cmd>
	HAL_Delay(50);
 8001580:	2032      	movs	r0, #50	; 0x32
 8001582:	f002 f8ef 	bl	8003764 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8001586:	2002      	movs	r0, #2
 8001588:	f7ff ff7a 	bl	8001480 <lcd_send_cmd>
	HAL_Delay(50);
 800158c:	2032      	movs	r0, #50	; 0x32
 800158e:	f002 f8e9 	bl	8003764 <HAL_Delay>
	lcd_send_cmd (0x80);
 8001592:	2080      	movs	r0, #128	; 0x80
 8001594:	f7ff ff74 	bl	8001480 <lcd_send_cmd>
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}

0800159c <lcd_send_string>:

void lcd_send_string (char *str)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80015a4:	e006      	b.n	80015b4 <lcd_send_string+0x18>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	1c5a      	adds	r2, r3, #1
 80015aa:	607a      	str	r2, [r7, #4]
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff ff96 	bl	80014e0 <lcd_send_data>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1f4      	bne.n	80015a6 <lcd_send_string+0xa>
}
 80015bc:	bf00      	nop
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <lcd_goto_XY>:
{
	lcd_send_cmd (0x01); //clear display
}

void lcd_goto_XY (int row, int col)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b084      	sub	sp, #16
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
 80015ce:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1) 
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d108      	bne.n	80015e8 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	4413      	add	r3, r2
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	337f      	adds	r3, #127	; 0x7f
 80015e4:	73fb      	strb	r3, [r7, #15]
 80015e6:	e008      	b.n	80015fa <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	3340      	adds	r3, #64	; 0x40
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	b25b      	sxtb	r3, r3
 80015f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015f6:	b25b      	sxtb	r3, r3
 80015f8:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff ff3f 	bl	8001480 <lcd_send_cmd>
}
 8001602:	bf00      	nop
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a1b      	ldr	r2, [pc, #108]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d121      	bne.n	8001662 <HAL_TIM_PeriodElapsedCallback+0x56>
		uint32_t detect ;
		 processingADC();
 800161e:	f001 f99d 	bl	800295c <processingADC>
         if(readvalue<=3100){
 8001622:	4b1a      	ldr	r3, [pc, #104]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f640 421c 	movw	r2, #3100	; 0xc1c
 800162a:	4293      	cmp	r3, r2
 800162c:	d802      	bhi.n	8001634 <HAL_TIM_PeriodElapsedCallback+0x28>
        	 detect =0;
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	e001      	b.n	8001638 <HAL_TIM_PeriodElapsedCallback+0x2c>
         }else{
        	 detect =1;
 8001634:	2301      	movs	r3, #1
 8001636:	60fb      	str	r3, [r7, #12]
         }
		snprintf(uartTxBuffer, 2,"%lu", detect );
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4a15      	ldr	r2, [pc, #84]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800163c:	2102      	movs	r1, #2
 800163e:	4815      	ldr	r0, [pc, #84]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001640:	f008 f87a 	bl	8009738 <sniprintf>
	    HAL_UART_Transmit(&huart1, (uint8_t*)uartTxBuffer, strlen(uartTxBuffer), 500);
 8001644:	4813      	ldr	r0, [pc, #76]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001646:	f7fe fd83 	bl	8000150 <strlen>
 800164a:	4603      	mov	r3, r0
 800164c:	b29a      	uxth	r2, r3
 800164e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001652:	4910      	ldr	r1, [pc, #64]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001654:	4810      	ldr	r0, [pc, #64]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001656:	f006 fba3 	bl	8007da0 <HAL_UART_Transmit>
	    DISTANCE_LCD(detect);
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f000 f8fc 	bl	8001858 <DISTANCE_LCD>
	 }
	else if(htim->Instance == TIM2){
		 Dist = HCSR04_Read();
	 }

}
 8001660:	e00d      	b.n	800167e <HAL_TIM_PeriodElapsedCallback+0x72>
	else if(htim->Instance == TIM2){
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800166a:	d108      	bne.n	800167e <HAL_TIM_PeriodElapsedCallback+0x72>
		 Dist = HCSR04_Read();
 800166c:	f000 f8d0 	bl	8001810 <HCSR04_Read>
 8001670:	4603      	mov	r3, r0
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff fb2e 	bl	8000cd4 <__aeabi_ui2f>
 8001678:	4603      	mov	r3, r0
 800167a:	4a08      	ldr	r2, [pc, #32]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x90>)
 800167c:	6013      	str	r3, [r2, #0]
}
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40012c00 	.word	0x40012c00
 800168c:	2000052c 	.word	0x2000052c
 8001690:	0800e4f0 	.word	0x0800e4f0
 8001694:	20000530 	.word	0x20000530
 8001698:	2000040c 	.word	0x2000040c
 800169c:	20000468 	.word	0x20000468

080016a0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	7f1b      	ldrb	r3, [r3, #28]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	f040 8083 	bne.w	80017b8 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 80016b2:	4b45      	ldr	r3, [pc, #276]	; (80017c8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d11a      	bne.n	80016f0 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80016ba:	2100      	movs	r1, #0
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f005 fe9d 	bl	80073fc <HAL_TIM_ReadCapturedValue>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4a41      	ldr	r2, [pc, #260]	; (80017cc <HAL_TIM_IC_CaptureCallback+0x12c>)
 80016c6:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 80016c8:	4b3f      	ldr	r3, [pc, #252]	; (80017c8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6a1a      	ldr	r2, [r3, #32]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 020a 	bic.w	r2, r2, #10
 80016dc:	621a      	str	r2, [r3, #32]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6a1a      	ldr	r2, [r3, #32]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f042 0202 	orr.w	r2, r2, #2
 80016ec:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
		}
	}
}
 80016ee:	e063      	b.n	80017b8 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 80016f0:	4b35      	ldr	r3, [pc, #212]	; (80017c8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d15f      	bne.n	80017b8 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 80016f8:	2100      	movs	r1, #0
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f005 fe7e 	bl	80073fc <HAL_TIM_ReadCapturedValue>
 8001700:	4603      	mov	r3, r0
 8001702:	4a33      	ldr	r2, [pc, #204]	; (80017d0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001704:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2200      	movs	r2, #0
 800170c:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 800170e:	4b30      	ldr	r3, [pc, #192]	; (80017d0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	4b2e      	ldr	r3, [pc, #184]	; (80017cc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	429a      	cmp	r2, r3
 8001718:	d907      	bls.n	800172a <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 800171a:	4b2d      	ldr	r3, [pc, #180]	; (80017d0 <HAL_TIM_IC_CaptureCallback+0x130>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	4b2b      	ldr	r3, [pc, #172]	; (80017cc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	4a2b      	ldr	r2, [pc, #172]	; (80017d4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	e00f      	b.n	800174a <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 800172a:	4b28      	ldr	r3, [pc, #160]	; (80017cc <HAL_TIM_IC_CaptureCallback+0x12c>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	4b28      	ldr	r3, [pc, #160]	; (80017d0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	429a      	cmp	r2, r3
 8001734:	d909      	bls.n	800174a <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8001736:	4b26      	ldr	r3, [pc, #152]	; (80017d0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	4b24      	ldr	r3, [pc, #144]	; (80017cc <HAL_TIM_IC_CaptureCallback+0x12c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001744:	33ff      	adds	r3, #255	; 0xff
 8001746:	4a23      	ldr	r2, [pc, #140]	; (80017d4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001748:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 800174a:	4b22      	ldr	r3, [pc, #136]	; (80017d4 <HAL_TIM_IC_CaptureCallback+0x134>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f7fe fe48 	bl	80003e4 <__aeabi_ui2d>
 8001754:	a31a      	add	r3, pc, #104	; (adr r3, 80017c0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175a:	f7fe febd 	bl	80004d8 <__aeabi_dmul>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4610      	mov	r0, r2
 8001764:	4619      	mov	r1, r3
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800176e:	f7fe ffdd 	bl	800072c <__aeabi_ddiv>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4610      	mov	r0, r2
 8001778:	4619      	mov	r1, r3
 800177a:	f7ff f985 	bl	8000a88 <__aeabi_d2uiz>
 800177e:	4603      	mov	r3, r0
 8001780:	b2da      	uxtb	r2, r3
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001784:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8001786:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001788:	2200      	movs	r2, #0
 800178a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6a1a      	ldr	r2, [r3, #32]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f022 020a 	bic.w	r2, r2, #10
 800179a:	621a      	str	r2, [r3, #32]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6a12      	ldr	r2, [r2, #32]
 80017a6:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <HAL_TIM_IC_CaptureCallback+0x13c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	68da      	ldr	r2, [r3, #12]
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <HAL_TIM_IC_CaptureCallback+0x13c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0202 	bic.w	r2, r2, #2
 80017b6:	60da      	str	r2, [r3, #12]
}
 80017b8:	bf00      	nop
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	b020c49c 	.word	0xb020c49c
 80017c4:	3fa16872 	.word	0x3fa16872
 80017c8:	20000464 	.word	0x20000464
 80017cc:	20000458 	.word	0x20000458
 80017d0:	2000045c 	.word	0x2000045c
 80017d4:	20000460 	.word	0x20000460
 80017d8:	20000465 	.word	0x20000465
 80017dc:	2000037c 	.word	0x2000037c

080017e0 <delay>:

void delay(uint16_t time)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);
 80017ea:	4b08      	ldr	r3, [pc, #32]	; (800180c <delay+0x2c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2200      	movs	r2, #0
 80017f0:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim2)<time);
 80017f2:	bf00      	nop
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <delay+0x2c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017fa:	88fb      	ldrh	r3, [r7, #6]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d3f9      	bcc.n	80017f4 <delay+0x14>
}
 8001800:	bf00      	nop
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	2000037c 	.word	0x2000037c

08001810 <HCSR04_Read>:

uint8_t HCSR04_Read (void){
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001814:	2201      	movs	r2, #1
 8001816:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800181a:	480c      	ldr	r0, [pc, #48]	; (800184c <HCSR04_Read+0x3c>)
 800181c:	f003 f8c6 	bl	80049ac <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8001820:	200a      	movs	r0, #10
 8001822:	f7ff ffdd 	bl	80017e0 <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001826:	2200      	movs	r2, #0
 8001828:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800182c:	4807      	ldr	r0, [pc, #28]	; (800184c <HCSR04_Read+0x3c>)
 800182e:	f003 f8bd 	bl	80049ac <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);
 8001832:	4b07      	ldr	r3, [pc, #28]	; (8001850 <HCSR04_Read+0x40>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68da      	ldr	r2, [r3, #12]
 8001838:	4b05      	ldr	r3, [pc, #20]	; (8001850 <HCSR04_Read+0x40>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f042 0202 	orr.w	r2, r2, #2
 8001840:	60da      	str	r2, [r3, #12]
	return Distance;
 8001842:	4b04      	ldr	r3, [pc, #16]	; (8001854 <HCSR04_Read+0x44>)
 8001844:	781b      	ldrb	r3, [r3, #0]
}
 8001846:	4618      	mov	r0, r3
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40010c00 	.word	0x40010c00
 8001850:	2000037c 	.word	0x2000037c
 8001854:	20000465 	.word	0x20000465

08001858 <DISTANCE_LCD>:

void DISTANCE_LCD(uint32_t status){
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
	lcd_goto_XY(2, 0);
 8001860:	2100      	movs	r1, #0
 8001862:	2002      	movs	r0, #2
 8001864:	f7ff feaf 	bl	80015c6 <lcd_goto_XY>
	// Clear the previous message
	lcd_send_string("                ");
 8001868:	480f      	ldr	r0, [pc, #60]	; (80018a8 <DISTANCE_LCD+0x50>)
 800186a:	f7ff fe97 	bl	800159c <lcd_send_string>
	switch (status) {
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d003      	beq.n	800187c <DISTANCE_LCD+0x24>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d005      	beq.n	8001886 <DISTANCE_LCD+0x2e>
			break;
		case 1:
			sprintf(notiString,"DELIVERY");
			break;
		default:
			break;
 800187a:	e009      	b.n	8001890 <DISTANCE_LCD+0x38>
			sprintf(notiString,"NO_PACKAGE");
 800187c:	490b      	ldr	r1, [pc, #44]	; (80018ac <DISTANCE_LCD+0x54>)
 800187e:	480c      	ldr	r0, [pc, #48]	; (80018b0 <DISTANCE_LCD+0x58>)
 8001880:	f007 ff8e 	bl	80097a0 <siprintf>
			break;
 8001884:	e004      	b.n	8001890 <DISTANCE_LCD+0x38>
			sprintf(notiString,"DELIVERY");
 8001886:	490b      	ldr	r1, [pc, #44]	; (80018b4 <DISTANCE_LCD+0x5c>)
 8001888:	4809      	ldr	r0, [pc, #36]	; (80018b0 <DISTANCE_LCD+0x58>)
 800188a:	f007 ff89 	bl	80097a0 <siprintf>
			break;
 800188e:	bf00      	nop
	}
	lcd_goto_XY(2, 0);
 8001890:	2100      	movs	r1, #0
 8001892:	2002      	movs	r0, #2
 8001894:	f7ff fe97 	bl	80015c6 <lcd_goto_XY>
	lcd_send_string(notiString);
 8001898:	4805      	ldr	r0, [pc, #20]	; (80018b0 <DISTANCE_LCD+0x58>)
 800189a:	f7ff fe7f 	bl	800159c <lcd_send_string>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	0800e4f4 	.word	0x0800e4f4
 80018ac:	0800e508 	.word	0x0800e508
 80018b0:	20000470 	.word	0x20000470
 80018b4:	0800e514 	.word	0x0800e514

080018b8 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	if(huart->Instance ==USART1){
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a11      	ldr	r2, [pc, #68]	; (800190c <HAL_UART_RxCpltCallback+0x54>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d11b      	bne.n	8001902 <HAL_UART_RxCpltCallback+0x4a>
		//START ROBOT FOR DESTINATION A
		if(r_data == 'a'){
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <HAL_UART_RxCpltCallback+0x58>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b61      	cmp	r3, #97	; 0x61
 80018d0:	d103      	bne.n	80018da <HAL_UART_RxCpltCallback+0x22>
			isDriving =true;
 80018d2:	4b10      	ldr	r3, [pc, #64]	; (8001914 <HAL_UART_RxCpltCallback+0x5c>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	701a      	strb	r2, [r3, #0]
 80018d8:	e00e      	b.n	80018f8 <HAL_UART_RxCpltCallback+0x40>
		//START ROBOT FOR DESTINATION B
		}else if(r_data == 'b'){
 80018da:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <HAL_UART_RxCpltCallback+0x58>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b62      	cmp	r3, #98	; 0x62
 80018e0:	d103      	bne.n	80018ea <HAL_UART_RxCpltCallback+0x32>
			isDriving =true;
 80018e2:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <HAL_UART_RxCpltCallback+0x5c>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	701a      	strb	r2, [r3, #0]
 80018e8:	e006      	b.n	80018f8 <HAL_UART_RxCpltCallback+0x40>
		//START ROBOT FOR DESTINATION C
		}else if(r_data == 'c'){
 80018ea:	4b09      	ldr	r3, [pc, #36]	; (8001910 <HAL_UART_RxCpltCallback+0x58>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b63      	cmp	r3, #99	; 0x63
 80018f0:	d102      	bne.n	80018f8 <HAL_UART_RxCpltCallback+0x40>
			isDriving =true;
 80018f2:	4b08      	ldr	r3, [pc, #32]	; (8001914 <HAL_UART_RxCpltCallback+0x5c>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	701a      	strb	r2, [r3, #0]
			//angleTurnLeft();

		}
		HAL_UART_Receive_IT(&huart1, &r_data, 1);
 80018f8:	2201      	movs	r2, #1
 80018fa:	4905      	ldr	r1, [pc, #20]	; (8001910 <HAL_UART_RxCpltCallback+0x58>)
 80018fc:	4806      	ldr	r0, [pc, #24]	; (8001918 <HAL_UART_RxCpltCallback+0x60>)
 80018fe:	f006 fad2 	bl	8007ea6 <HAL_UART_Receive_IT>
	}

}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40013800 	.word	0x40013800
 8001910:	2000046c 	.word	0x2000046c
 8001914:	20000518 	.word	0x20000518
 8001918:	2000040c 	.word	0x2000040c

0800191c <angleTurnLeft>:

void angleTurnLeft(){
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
	targetAngle += 90;
 8001920:	4b16      	ldr	r3, [pc, #88]	; (800197c <angleTurnLeft+0x60>)
 8001922:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	4b15      	ldr	r3, [pc, #84]	; (8001980 <angleTurnLeft+0x64>)
 800192c:	f7fe fc1e 	bl	800016c <__adddf3>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4911      	ldr	r1, [pc, #68]	; (800197c <angleTurnLeft+0x60>)
 8001936:	e9c1 2300 	strd	r2, r3, [r1]
	if (targetAngle > 180){
 800193a:	4b10      	ldr	r3, [pc, #64]	; (800197c <angleTurnLeft+0x60>)
 800193c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001940:	f04f 0200 	mov.w	r2, #0
 8001944:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <angleTurnLeft+0x68>)
 8001946:	f7ff f857 	bl	80009f8 <__aeabi_dcmpgt>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d00c      	beq.n	800196a <angleTurnLeft+0x4e>
	targetAngle -= 360;
 8001950:	4b0a      	ldr	r3, [pc, #40]	; (800197c <angleTurnLeft+0x60>)
 8001952:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <angleTurnLeft+0x6c>)
 800195c:	f7fe fc04 	bl	8000168 <__aeabi_dsub>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4905      	ldr	r1, [pc, #20]	; (800197c <angleTurnLeft+0x60>)
 8001966:	e9c1 2300 	strd	r2, r3, [r1]
	}
    isFinish =true;
 800196a:	4b08      	ldr	r3, [pc, #32]	; (800198c <angleTurnLeft+0x70>)
 800196c:	2201      	movs	r2, #1
 800196e:	701a      	strb	r2, [r3, #0]
	isDriving = false;
 8001970:	4b07      	ldr	r3, [pc, #28]	; (8001990 <angleTurnLeft+0x74>)
 8001972:	2200      	movs	r2, #0
 8001974:	701a      	strb	r2, [r3, #0]
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000508 	.word	0x20000508
 8001980:	40568000 	.word	0x40568000
 8001984:	40668000 	.word	0x40668000
 8001988:	40768000 	.word	0x40768000
 800198c:	2000047f 	.word	0x2000047f
 8001990:	20000518 	.word	0x20000518

08001994 <angleTurnRight>:

void angleTurnRight(){
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
	targetAngle -= 90;
 8001998:	4b16      	ldr	r3, [pc, #88]	; (80019f4 <angleTurnRight+0x60>)
 800199a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <angleTurnRight+0x64>)
 80019a4:	f7fe fbe0 	bl	8000168 <__aeabi_dsub>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4911      	ldr	r1, [pc, #68]	; (80019f4 <angleTurnRight+0x60>)
 80019ae:	e9c1 2300 	strd	r2, r3, [r1]
	if (targetAngle < -180){
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <angleTurnRight+0x60>)
 80019b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019b8:	f04f 0200 	mov.w	r2, #0
 80019bc:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <angleTurnRight+0x68>)
 80019be:	f7fe fffd 	bl	80009bc <__aeabi_dcmplt>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d00c      	beq.n	80019e2 <angleTurnRight+0x4e>
	targetAngle += 360;
 80019c8:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <angleTurnRight+0x60>)
 80019ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <angleTurnRight+0x6c>)
 80019d4:	f7fe fbca 	bl	800016c <__adddf3>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4905      	ldr	r1, [pc, #20]	; (80019f4 <angleTurnRight+0x60>)
 80019de:	e9c1 2300 	strd	r2, r3, [r1]
	}
	isFinish =true;
 80019e2:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <angleTurnRight+0x70>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	701a      	strb	r2, [r3, #0]
	isDriving = false;
 80019e8:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <angleTurnRight+0x74>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	701a      	strb	r2, [r3, #0]
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000508 	.word	0x20000508
 80019f8:	40568000 	.word	0x40568000
 80019fc:	c0668000 	.word	0xc0668000
 8001a00:	40768000 	.word	0x40768000
 8001a04:	2000047f 	.word	0x2000047f
 8001a08:	20000518 	.word	0x20000518

08001a0c <CAR_FORWARD>:

void CAR_FORWARD(){
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);   //Start for first motor clock wise rotation
 8001a10:	2200      	movs	r2, #0
 8001a12:	2102      	movs	r1, #2
 8001a14:	4809      	ldr	r0, [pc, #36]	; (8001a3c <CAR_FORWARD+0x30>)
 8001a16:	f002 ffc9 	bl	80049ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	2104      	movs	r1, #4
 8001a1e:	4807      	ldr	r0, [pc, #28]	; (8001a3c <CAR_FORWARD+0x30>)
 8001a20:	f002 ffc4 	bl	80049ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);   //Start for second motor clock wise rotation
 8001a24:	2200      	movs	r2, #0
 8001a26:	2108      	movs	r1, #8
 8001a28:	4804      	ldr	r0, [pc, #16]	; (8001a3c <CAR_FORWARD+0x30>)
 8001a2a:	f002 ffbf 	bl	80049ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001a2e:	2201      	movs	r2, #1
 8001a30:	2110      	movs	r1, #16
 8001a32:	4802      	ldr	r0, [pc, #8]	; (8001a3c <CAR_FORWARD+0x30>)
 8001a34:	f002 ffba 	bl	80049ac <HAL_GPIO_WritePin>
}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40010800 	.word	0x40010800

08001a40 <CAR_TURN_RIGHT>:



void CAR_TURN_RIGHT(){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);   //Start for FIRST motor clock wise rotation
 8001a44:	2201      	movs	r2, #1
 8001a46:	2102      	movs	r1, #2
 8001a48:	4809      	ldr	r0, [pc, #36]	; (8001a70 <CAR_TURN_RIGHT+0x30>)
 8001a4a:	f002 ffaf 	bl	80049ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2104      	movs	r1, #4
 8001a52:	4807      	ldr	r0, [pc, #28]	; (8001a70 <CAR_TURN_RIGHT+0x30>)
 8001a54:	f002 ffaa 	bl	80049ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);   //Start for SECOND motor clock wise rotation
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2108      	movs	r1, #8
 8001a5c:	4804      	ldr	r0, [pc, #16]	; (8001a70 <CAR_TURN_RIGHT+0x30>)
 8001a5e:	f002 ffa5 	bl	80049ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001a62:	2201      	movs	r2, #1
 8001a64:	2110      	movs	r1, #16
 8001a66:	4802      	ldr	r0, [pc, #8]	; (8001a70 <CAR_TURN_RIGHT+0x30>)
 8001a68:	f002 ffa0 	bl	80049ac <HAL_GPIO_WritePin>
}
 8001a6c:	bf00      	nop
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40010800 	.word	0x40010800

08001a74 <CAR_TURN_LEFT>:
void CAR_TURN_LEFT(){
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);   //Start for FIRST motor clock wise rotation
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2102      	movs	r1, #2
 8001a7c:	4809      	ldr	r0, [pc, #36]	; (8001aa4 <CAR_TURN_LEFT+0x30>)
 8001a7e:	f002 ff95 	bl	80049ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8001a82:	2201      	movs	r2, #1
 8001a84:	2104      	movs	r1, #4
 8001a86:	4807      	ldr	r0, [pc, #28]	; (8001aa4 <CAR_TURN_LEFT+0x30>)
 8001a88:	f002 ff90 	bl	80049ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);   //Start for SECOND motor clock wise rotation
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	2108      	movs	r1, #8
 8001a90:	4804      	ldr	r0, [pc, #16]	; (8001aa4 <CAR_TURN_LEFT+0x30>)
 8001a92:	f002 ff8b 	bl	80049ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2110      	movs	r1, #16
 8001a9a:	4802      	ldr	r0, [pc, #8]	; (8001aa4 <CAR_TURN_LEFT+0x30>)
 8001a9c:	f002 ff86 	bl	80049ac <HAL_GPIO_WritePin>
}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40010800 	.word	0x40010800

08001aa8 <CAR_STOP>:
void CAR_STOP(void){
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001aac:	2200      	movs	r2, #0
 8001aae:	2102      	movs	r1, #2
 8001ab0:	480d      	ldr	r0, [pc, #52]	; (8001ae8 <CAR_STOP+0x40>)
 8001ab2:	f002 ff7b 	bl	80049ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2104      	movs	r1, #4
 8001aba:	480b      	ldr	r0, [pc, #44]	; (8001ae8 <CAR_STOP+0x40>)
 8001abc:	f002 ff76 	bl	80049ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2108      	movs	r1, #8
 8001ac4:	4808      	ldr	r0, [pc, #32]	; (8001ae8 <CAR_STOP+0x40>)
 8001ac6:	f002 ff71 	bl	80049ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2110      	movs	r1, #16
 8001ace:	4806      	ldr	r0, [pc, #24]	; (8001ae8 <CAR_STOP+0x40>)
 8001ad0:	f002 ff6c 	bl	80049ac <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <CAR_STOP+0x44>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,0);
 8001adc:	4b03      	ldr	r3, [pc, #12]	; (8001aec <CAR_STOP+0x44>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40010800 	.word	0x40010800
 8001aec:	200003c4 	.word	0x200003c4

08001af0 <driving>:


void driving(){
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
	i++;
 8001af6:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <driving+0x6c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	3301      	adds	r3, #1
 8001afc:	4a17      	ldr	r2, [pc, #92]	; (8001b5c <driving+0x6c>)
 8001afe:	6013      	str	r3, [r2, #0]
	double deltaAngle = angle - targetAngle ; //rounding is neccessary, since you never get exact values in reality
 8001b00:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <driving+0x70>)
 8001b02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b06:	4b17      	ldr	r3, [pc, #92]	; (8001b64 <driving+0x74>)
 8001b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0c:	f7fe fb2c 	bl	8000168 <__aeabi_dsub>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	e9c7 2300 	strd	r2, r3, [r7]
	CAR_FORWARD();
 8001b18:	f7ff ff78 	bl	8001a0c <CAR_FORWARD>
    if(deltaAngle !=0){
 8001b1c:	f04f 0200 	mov.w	r2, #0
 8001b20:	f04f 0300 	mov.w	r3, #0
 8001b24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b28:	f7fe ff3e 	bl	80009a8 <__aeabi_dcmpeq>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d000      	beq.n	8001b34 <driving+0x44>
    	controlSpeed();
    	rightSpeedVal = equilibriumSpeed;
    	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,leftSpeedVal);
    	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,rightSpeedVal);
    }
}
 8001b32:	e00f      	b.n	8001b54 <driving+0x64>
    	controlSpeed();
 8001b34:	f000 f820 	bl	8001b78 <controlSpeed>
    	rightSpeedVal = equilibriumSpeed;
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <driving+0x78>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a0b      	ldr	r2, [pc, #44]	; (8001b6c <driving+0x7c>)
 8001b3e:	6013      	str	r3, [r2, #0]
    	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,leftSpeedVal);
 8001b40:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <driving+0x80>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <driving+0x84>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	63da      	str	r2, [r3, #60]	; 0x3c
    	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,rightSpeedVal);
 8001b4a:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <driving+0x7c>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <driving+0x84>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001b54:	bf00      	nop
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	200004fc 	.word	0x200004fc
 8001b60:	20000500 	.word	0x20000500
 8001b64:	20000508 	.word	0x20000508
 8001b68:	20000004 	.word	0x20000004
 8001b6c:	20000514 	.word	0x20000514
 8001b70:	20000510 	.word	0x20000510
 8001b74:	200003c4 	.word	0x200003c4

08001b78 <controlSpeed>:

void controlSpeed(){
 8001b78:	b590      	push	{r4, r7, lr}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
  double deltaAngle =  angle - targetAngle;
 8001b7e:	4b2c      	ldr	r3, [pc, #176]	; (8001c30 <controlSpeed+0xb8>)
 8001b80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b84:	4b2b      	ldr	r3, [pc, #172]	; (8001c34 <controlSpeed+0xbc>)
 8001b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8a:	f7fe faed 	bl	8000168 <__aeabi_dsub>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	e9c7 2300 	strd	r2, r3, [r7]
  if(deltaAngle>=2){
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ba2:	f7fe ff1f 	bl	80009e4 <__aeabi_dcmpge>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d014      	beq.n	8001bd6 <controlSpeed+0x5e>
	  leftSpeedVal = changeSpeed(leftSpeedVal, round(deltaAngle));
 8001bac:	4b22      	ldr	r3, [pc, #136]	; (8001c38 <controlSpeed+0xc0>)
 8001bae:	681c      	ldr	r4, [r3, #0]
 8001bb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bb4:	f00b fd42 	bl	800d63c <round>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	f7fe ff3a 	bl	8000a38 <__aeabi_d2iz>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4620      	mov	r0, r4
 8001bca:	f000 f93f 	bl	8001e4c <changeSpeed>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	4a19      	ldr	r2, [pc, #100]	; (8001c38 <controlSpeed+0xc0>)
 8001bd2:	6013      	str	r3, [r2, #0]
  else{
	  leftSpeedVal = equilibriumSpeed;
	  rightSpeedVal = equilibriumSpeed;
  }

}
 8001bd4:	e027      	b.n	8001c26 <controlSpeed+0xae>
  }else if (deltaAngle<=-2){
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001bde:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001be2:	f7fe fef5 	bl	80009d0 <__aeabi_dcmple>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d014      	beq.n	8001c16 <controlSpeed+0x9e>
	  leftSpeedVal = changeSpeed(leftSpeedVal, round(deltaAngle));
 8001bec:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <controlSpeed+0xc0>)
 8001bee:	681c      	ldr	r4, [r3, #0]
 8001bf0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bf4:	f00b fd22 	bl	800d63c <round>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	4619      	mov	r1, r3
 8001c00:	f7fe ff1a 	bl	8000a38 <__aeabi_d2iz>
 8001c04:	4603      	mov	r3, r0
 8001c06:	4619      	mov	r1, r3
 8001c08:	4620      	mov	r0, r4
 8001c0a:	f000 f91f 	bl	8001e4c <changeSpeed>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	4a09      	ldr	r2, [pc, #36]	; (8001c38 <controlSpeed+0xc0>)
 8001c12:	6013      	str	r3, [r2, #0]
}
 8001c14:	e007      	b.n	8001c26 <controlSpeed+0xae>
	  leftSpeedVal = equilibriumSpeed;
 8001c16:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <controlSpeed+0xc4>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a07      	ldr	r2, [pc, #28]	; (8001c38 <controlSpeed+0xc0>)
 8001c1c:	6013      	str	r3, [r2, #0]
	  rightSpeedVal = equilibriumSpeed;
 8001c1e:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <controlSpeed+0xc4>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a07      	ldr	r2, [pc, #28]	; (8001c40 <controlSpeed+0xc8>)
 8001c24:	6013      	str	r3, [r2, #0]
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd90      	pop	{r4, r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000500 	.word	0x20000500
 8001c34:	20000508 	.word	0x20000508
 8001c38:	20000510 	.word	0x20000510
 8001c3c:	20000004 	.word	0x20000004
 8001c40:	20000514 	.word	0x20000514

08001c44 <rotate>:




void rotate() {
 8001c44:	b590      	push	{r4, r7, lr}
 8001c46:	b089      	sub	sp, #36	; 0x24
 8001c48:	af00      	add	r7, sp, #0
    double deltaAngle = angle - targetAngle;
 8001c4a:	4b73      	ldr	r3, [pc, #460]	; (8001e18 <rotate+0x1d4>)
 8001c4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c50:	4b72      	ldr	r3, [pc, #456]	; (8001e1c <rotate+0x1d8>)
 8001c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c56:	f7fe fa87 	bl	8000168 <__aeabi_dsub>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    int targetGyroX;
    if (abs(deltaAngle) <=1.5) {
 8001c62:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c66:	f7fe fee7 	bl	8000a38 <__aeabi_d2iz>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c70:	db31      	blt.n	8001cd6 <rotate+0x92>
 8001c72:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c76:	f7fe fedf 	bl	8000a38 <__aeabi_d2iz>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	dc2a      	bgt.n	8001cd6 <rotate+0x92>
        CAR_STOP();
 8001c80:	f7ff ff12 	bl	8001aa8 <CAR_STOP>
        if (isFinish) {
 8001c84:	4b66      	ldr	r3, [pc, #408]	; (8001e20 <rotate+0x1dc>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d018      	beq.n	8001cbe <rotate+0x7a>
           // HAL_Delay(500);
            isFinish =false;
 8001c8c:	4b64      	ldr	r3, [pc, #400]	; (8001e20 <rotate+0x1dc>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	701a      	strb	r2, [r3, #0]
            if(routePlanning==1){
 8001c92:	4b64      	ldr	r3, [pc, #400]	; (8001e24 <rotate+0x1e0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d105      	bne.n	8001ca6 <rotate+0x62>
                   currentRoute++;
 8001c9a:	4b63      	ldr	r3, [pc, #396]	; (8001e28 <rotate+0x1e4>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	4a61      	ldr	r2, [pc, #388]	; (8001e28 <rotate+0x1e4>)
 8001ca2:	6013      	str	r3, [r2, #0]
 8001ca4:	e008      	b.n	8001cb8 <rotate+0x74>
            }else if(routePlanning ==2){
 8001ca6:	4b5f      	ldr	r3, [pc, #380]	; (8001e24 <rotate+0x1e0>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d104      	bne.n	8001cb8 <rotate+0x74>
                   currentRoute--;
 8001cae:	4b5e      	ldr	r3, [pc, #376]	; (8001e28 <rotate+0x1e4>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	4a5c      	ldr	r2, [pc, #368]	; (8001e28 <rotate+0x1e4>)
 8001cb6:	6013      	str	r3, [r2, #0]
            }
                   isDriving = true;
 8001cb8:	4b5c      	ldr	r3, [pc, #368]	; (8001e2c <rotate+0x1e8>)
 8001cba:	2201      	movs	r2, #1
 8001cbc:	701a      	strb	r2, [r3, #0]
         }
        if(finishRoute){
 8001cbe:	4b5c      	ldr	r3, [pc, #368]	; (8001e30 <rotate+0x1ec>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 80a4 	beq.w	8001e10 <rotate+0x1cc>
        	finishRoute =false;
 8001cc8:	4b59      	ldr	r3, [pc, #356]	; (8001e30 <rotate+0x1ec>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	701a      	strb	r2, [r3, #0]
        	isDriving=true;
 8001cce:	4b57      	ldr	r3, [pc, #348]	; (8001e2c <rotate+0x1e8>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	701a      	strb	r2, [r3, #0]
        if(finishRoute){
 8001cd4:	e09c      	b.n	8001e10 <rotate+0x1cc>
        }

    } else {
    	 if (angle > targetAngle) {
 8001cd6:	4b50      	ldr	r3, [pc, #320]	; (8001e18 <rotate+0x1d4>)
 8001cd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cdc:	4b4f      	ldr	r3, [pc, #316]	; (8001e1c <rotate+0x1d8>)
 8001cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce2:	f7fe fe89 	bl	80009f8 <__aeabi_dcmpgt>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d002      	beq.n	8001cf2 <rotate+0xae>
    	            CAR_TURN_RIGHT();
 8001cec:	f7ff fea8 	bl	8001a40 <CAR_TURN_RIGHT>
 8001cf0:	e00c      	b.n	8001d0c <rotate+0xc8>
    	} else if (angle < targetAngle) {
 8001cf2:	4b49      	ldr	r3, [pc, #292]	; (8001e18 <rotate+0x1d4>)
 8001cf4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cf8:	4b48      	ldr	r3, [pc, #288]	; (8001e1c <rotate+0x1d8>)
 8001cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfe:	f7fe fe5d 	bl	80009bc <__aeabi_dcmplt>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <rotate+0xc8>
    	            CAR_TURN_LEFT();
 8001d08:	f7ff feb4 	bl	8001a74 <CAR_TURN_LEFT>
    	}
        // Adjust target gyroscopic measurement
        if (abs(deltaAngle) < 45) { //10
 8001d0c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d10:	f7fe fe92 	bl	8000a38 <__aeabi_d2iz>
 8001d14:	4603      	mov	r3, r0
 8001d16:	f113 0f2c 	cmn.w	r3, #44	; 0x2c
 8001d1a:	db11      	blt.n	8001d40 <rotate+0xfc>
 8001d1c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d20:	f7fe fe8a 	bl	8000a38 <__aeabi_d2iz>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b2c      	cmp	r3, #44	; 0x2c
 8001d28:	dc0a      	bgt.n	8001d40 <rotate+0xfc>
        	targetGyroX = 2* abs(deltaAngle);
 8001d2a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d2e:	f7fe fe83 	bl	8000a38 <__aeabi_d2iz>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	bfb8      	it	lt
 8001d38:	425b      	neglt	r3, r3
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	61fb      	str	r3, [r7, #28]
 8001d3e:	e001      	b.n	8001d44 <rotate+0x100>

        } else {
        	targetGyroX =20;
 8001d40:	2314      	movs	r3, #20
 8001d42:	61fb      	str	r3, [r7, #28]
        }
        // Proportional control adjustment
        double error = targetGyroX - abs(Gx);
 8001d44:	4b3b      	ldr	r3, [pc, #236]	; (8001e34 <rotate+0x1f0>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff f9e1 	bl	8001110 <__aeabi_f2iz>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	bfb8      	it	lt
 8001d54:	425b      	neglt	r3, r3
 8001d56:	69fa      	ldr	r2, [r7, #28]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe fb52 	bl	8000404 <__aeabi_i2d>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	e9c7 2302 	strd	r2, r3, [r7, #8]
        double adjustment = 0.5 * error;
 8001d68:	f04f 0200 	mov.w	r2, #0
 8001d6c:	4b32      	ldr	r3, [pc, #200]	; (8001e38 <rotate+0x1f4>)
 8001d6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d72:	f7fe fbb1 	bl	80004d8 <__aeabi_dmul>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	e9c7 2300 	strd	r2, r3, [r7]
        if (angle > targetAngle) {
 8001d7e:	4b26      	ldr	r3, [pc, #152]	; (8001e18 <rotate+0x1d4>)
 8001d80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d84:	4b25      	ldr	r3, [pc, #148]	; (8001e1c <rotate+0x1d8>)
 8001d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8a:	f7fe fe35 	bl	80009f8 <__aeabi_dcmpgt>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d017      	beq.n	8001dc4 <rotate+0x180>
              leftSpeedVal = changeSpeed(leftSpeedVal, -1 + adjustment);
 8001d94:	4b29      	ldr	r3, [pc, #164]	; (8001e3c <rotate+0x1f8>)
 8001d96:	681c      	ldr	r4, [r3, #0]
 8001d98:	f04f 0200 	mov.w	r2, #0
 8001d9c:	4b28      	ldr	r3, [pc, #160]	; (8001e40 <rotate+0x1fc>)
 8001d9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001da2:	f7fe f9e1 	bl	8000168 <__aeabi_dsub>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	4610      	mov	r0, r2
 8001dac:	4619      	mov	r1, r3
 8001dae:	f7fe fe43 	bl	8000a38 <__aeabi_d2iz>
 8001db2:	4603      	mov	r3, r0
 8001db4:	4619      	mov	r1, r3
 8001db6:	4620      	mov	r0, r4
 8001db8:	f000 f848 	bl	8001e4c <changeSpeed>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	4a1f      	ldr	r2, [pc, #124]	; (8001e3c <rotate+0x1f8>)
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	e016      	b.n	8001df2 <rotate+0x1ae>

        } else {
              leftSpeedVal = changeSpeed(leftSpeedVal, +1 + adjustment);
 8001dc4:	4b1d      	ldr	r3, [pc, #116]	; (8001e3c <rotate+0x1f8>)
 8001dc6:	681c      	ldr	r4, [r3, #0]
 8001dc8:	f04f 0200 	mov.w	r2, #0
 8001dcc:	4b1c      	ldr	r3, [pc, #112]	; (8001e40 <rotate+0x1fc>)
 8001dce:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001dd2:	f7fe f9cb 	bl	800016c <__adddf3>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	4610      	mov	r0, r2
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f7fe fe2b 	bl	8000a38 <__aeabi_d2iz>
 8001de2:	4603      	mov	r3, r0
 8001de4:	4619      	mov	r1, r3
 8001de6:	4620      	mov	r0, r4
 8001de8:	f000 f830 	bl	8001e4c <changeSpeed>
 8001dec:	4603      	mov	r3, r0
 8001dee:	4a13      	ldr	r2, [pc, #76]	; (8001e3c <rotate+0x1f8>)
 8001df0:	6013      	str	r3, [r2, #0]
                     }
        rightSpeedVal = leftSpeedVal;
 8001df2:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <rotate+0x1f8>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a13      	ldr	r2, [pc, #76]	; (8001e44 <rotate+0x200>)
 8001df8:	6013      	str	r3, [r2, #0]
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, leftSpeedVal);
 8001dfa:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <rotate+0x1f8>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <rotate+0x204>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	63da      	str	r2, [r3, #60]	; 0x3c
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, rightSpeedVal);
 8001e04:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <rotate+0x200>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <rotate+0x204>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

}
 8001e0e:	bf00      	nop
 8001e10:	bf00      	nop
 8001e12:	3724      	adds	r7, #36	; 0x24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd90      	pop	{r4, r7, pc}
 8001e18:	20000500 	.word	0x20000500
 8001e1c:	20000508 	.word	0x20000508
 8001e20:	2000047f 	.word	0x2000047f
 8001e24:	20000000 	.word	0x20000000
 8001e28:	20000454 	.word	0x20000454
 8001e2c:	20000518 	.word	0x20000518
 8001e30:	20000480 	.word	0x20000480
 8001e34:	20000490 	.word	0x20000490
 8001e38:	3fe00000 	.word	0x3fe00000
 8001e3c:	20000510 	.word	0x20000510
 8001e40:	3ff00000 	.word	0x3ff00000
 8001e44:	20000514 	.word	0x20000514
 8001e48:	200003c4 	.word	0x200003c4

08001e4c <changeSpeed>:



int changeSpeed(int motorSpeed, int increment){
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
	motorSpeed +=increment;
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	607b      	str	r3, [r7, #4]
	if(motorSpeed > maxSpeed){
 8001e5e:	2255      	movs	r2, #85	; 0x55
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4293      	cmp	r3, r2
 8001e64:	dd02      	ble.n	8001e6c <changeSpeed+0x20>
			motorSpeed = maxSpeed;
 8001e66:	2355      	movs	r3, #85	; 0x55
 8001e68:	607b      	str	r3, [r7, #4]
 8001e6a:	e005      	b.n	8001e78 <changeSpeed+0x2c>
	}else if(motorSpeed <minSpeed){
 8001e6c:	2241      	movs	r2, #65	; 0x41
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4293      	cmp	r3, r2
 8001e72:	da01      	bge.n	8001e78 <changeSpeed+0x2c>
		motorSpeed = minSpeed ;
 8001e74:	2341      	movs	r3, #65	; 0x41
 8001e76:	607b      	str	r3, [r7, #4]
	}
	return motorSpeed;
 8001e78:	687b      	ldr	r3, [r7, #4]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr
 8001e84:	0000      	movs	r0, r0
	...

08001e88 <calculateError>:

void calculateError(){
 8001e88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e8c:	b08e      	sub	sp, #56	; 0x38
 8001e8e:	af00      	add	r7, sp, #0
	float Q = 0.01;  // Process noise covariance
 8001e90:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <calculateError+0x3c>)
 8001e92:	61fb      	str	r3, [r7, #28]
	float R = 0.1;   // Measurement noise covariance
 8001e94:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <calculateError+0x40>)
 8001e96:	61bb      	str	r3, [r7, #24]

	// Initialize Kalman filter for X-axis accelerometer
	float xAccel = 0.0;  // Estimated state
 8001e98:	f04f 0300 	mov.w	r3, #0
 8001e9c:	637b      	str	r3, [r7, #52]	; 0x34
	float PAccel = 0.0;  // Estimated error covariance
 8001e9e:	f04f 0300 	mov.w	r3, #0
 8001ea2:	633b      	str	r3, [r7, #48]	; 0x30

	// Initialize Kalman filter for Y-axis accelerometer
	float yAccel = 0.0;  // Estimated state
 8001ea4:	f04f 0300 	mov.w	r3, #0
 8001ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
	float YAccel = 0.0;  // Estimated error covariance
 8001eaa:	f04f 0300 	mov.w	r3, #0
 8001eae:	62bb      	str	r3, [r7, #40]	; 0x28
	// Initialize Kalman filter for Z-axis accelerometer
    float zAccel = 0.0;  // Estimated state
 8001eb0:	f04f 0300 	mov.w	r3, #0
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
    float ZAccel = 0.0;  // Estimated error covariance
 8001eb6:	f04f 0300 	mov.w	r3, #0
 8001eba:	623b      	str	r3, [r7, #32]
	c = 0;
 8001ebc:	4b03      	ldr	r3, [pc, #12]	; (8001ecc <calculateError+0x44>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
	  while (c < 200) {
 8001ec2:	e15d      	b.n	8002180 <calculateError+0x2f8>
 8001ec4:	3c23d70a 	.word	0x3c23d70a
 8001ec8:	3dcccccd 	.word	0x3dcccccd
 8001ecc:	200004f8 	.word	0x200004f8
	    MPU6050_Read_Accel(&Ax, &Ay, &Az);
 8001ed0:	4ab5      	ldr	r2, [pc, #724]	; (80021a8 <calculateError+0x320>)
 8001ed2:	49b6      	ldr	r1, [pc, #728]	; (80021ac <calculateError+0x324>)
 8001ed4:	48b6      	ldr	r0, [pc, #728]	; (80021b0 <calculateError+0x328>)
 8001ed6:	f7ff f9cf 	bl	8001278 <MPU6050_Read_Accel>
	    HAL_Delay(1);
 8001eda:	2001      	movs	r0, #1
 8001edc:	f001 fc42 	bl	8003764 <HAL_Delay>
	    // Apply Kalman filter to X-axis accelerometer reading
	            float xAccel_pred = xAccel;
 8001ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ee2:	617b      	str	r3, [r7, #20]
	           // float PAccel_pred = PAccel + Q;
	            float KAccel =PAccel + Q / (PAccel + Q + R);
 8001ee4:	69f9      	ldr	r1, [r7, #28]
 8001ee6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ee8:	f7fe fe44 	bl	8000b74 <__addsf3>
 8001eec:	4603      	mov	r3, r0
 8001eee:	69b9      	ldr	r1, [r7, #24]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7fe fe3f 	bl	8000b74 <__addsf3>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	4619      	mov	r1, r3
 8001efa:	69f8      	ldr	r0, [r7, #28]
 8001efc:	f7fe fff6 	bl	8000eec <__aeabi_fdiv>
 8001f00:	4603      	mov	r3, r0
 8001f02:	4619      	mov	r1, r3
 8001f04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f06:	f7fe fe35 	bl	8000b74 <__addsf3>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	613b      	str	r3, [r7, #16]
	            xAccel = xAccel_pred + KAccel * (Ax - xAccel_pred);
 8001f0e:	4ba8      	ldr	r3, [pc, #672]	; (80021b0 <calculateError+0x328>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6979      	ldr	r1, [r7, #20]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7fe fe2b 	bl	8000b70 <__aeabi_fsub>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	6939      	ldr	r1, [r7, #16]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe ff30 	bl	8000d84 <__aeabi_fmul>
 8001f24:	4603      	mov	r3, r0
 8001f26:	4619      	mov	r1, r3
 8001f28:	6978      	ldr	r0, [r7, #20]
 8001f2a:	f7fe fe23 	bl	8000b74 <__addsf3>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	637b      	str	r3, [r7, #52]	; 0x34
	            PAccel = (1 - KAccel) * PAccel + Q;
 8001f32:	6939      	ldr	r1, [r7, #16]
 8001f34:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001f38:	f7fe fe1a 	bl	8000b70 <__aeabi_fsub>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe ff1f 	bl	8000d84 <__aeabi_fmul>
 8001f46:	4603      	mov	r3, r0
 8001f48:	4619      	mov	r1, r3
 8001f4a:	69f8      	ldr	r0, [r7, #28]
 8001f4c:	f7fe fe12 	bl	8000b74 <__addsf3>
 8001f50:	4603      	mov	r3, r0
 8001f52:	633b      	str	r3, [r7, #48]	; 0x30
	    // Apply Kalman filter to Y-axis accelerometer reading
	            float yAccel_pred = yAccel;
 8001f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f56:	60fb      	str	r3, [r7, #12]
	           // float YAccel_pred = YAccel + Q;
                float KAccelY = YAccel + Q / (YAccel + Q + R);
 8001f58:	69f9      	ldr	r1, [r7, #28]
 8001f5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f5c:	f7fe fe0a 	bl	8000b74 <__addsf3>
 8001f60:	4603      	mov	r3, r0
 8001f62:	69b9      	ldr	r1, [r7, #24]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7fe fe05 	bl	8000b74 <__addsf3>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	69f8      	ldr	r0, [r7, #28]
 8001f70:	f7fe ffbc 	bl	8000eec <__aeabi_fdiv>
 8001f74:	4603      	mov	r3, r0
 8001f76:	4619      	mov	r1, r3
 8001f78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f7a:	f7fe fdfb 	bl	8000b74 <__addsf3>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	60bb      	str	r3, [r7, #8]
	            yAccel = yAccel_pred + KAccelY * (Ay - yAccel_pred);
 8001f82:	4b8a      	ldr	r3, [pc, #552]	; (80021ac <calculateError+0x324>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68f9      	ldr	r1, [r7, #12]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7fe fdf1 	bl	8000b70 <__aeabi_fsub>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	68b9      	ldr	r1, [r7, #8]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe fef6 	bl	8000d84 <__aeabi_fmul>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f7fe fde9 	bl	8000b74 <__addsf3>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
	            YAccel = (1 - KAccelY) * YAccel + Q;
 8001fa6:	68b9      	ldr	r1, [r7, #8]
 8001fa8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001fac:	f7fe fde0 	bl	8000b70 <__aeabi_fsub>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe fee5 	bl	8000d84 <__aeabi_fmul>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	69f8      	ldr	r0, [r7, #28]
 8001fc0:	f7fe fdd8 	bl	8000b74 <__addsf3>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	62bb      	str	r3, [r7, #40]	; 0x28
	   // Apply Kalman filter to Z-axis accelerometer reading
	            float zAccel_pred = zAccel;
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	607b      	str	r3, [r7, #4]
	            //float ZAccel_pred = ZAccel + Q;
	            float KAccelZ =ZAccel + Q / (ZAccel + Q + R);
 8001fcc:	69f9      	ldr	r1, [r7, #28]
 8001fce:	6a38      	ldr	r0, [r7, #32]
 8001fd0:	f7fe fdd0 	bl	8000b74 <__addsf3>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	69b9      	ldr	r1, [r7, #24]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7fe fdcb 	bl	8000b74 <__addsf3>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	69f8      	ldr	r0, [r7, #28]
 8001fe4:	f7fe ff82 	bl	8000eec <__aeabi_fdiv>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	4619      	mov	r1, r3
 8001fec:	6a38      	ldr	r0, [r7, #32]
 8001fee:	f7fe fdc1 	bl	8000b74 <__addsf3>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	603b      	str	r3, [r7, #0]
	            zAccel = yAccel_pred + KAccelY * (Az - zAccel_pred);
 8001ff6:	4b6c      	ldr	r3, [pc, #432]	; (80021a8 <calculateError+0x320>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7fe fdb7 	bl	8000b70 <__aeabi_fsub>
 8002002:	4603      	mov	r3, r0
 8002004:	68b9      	ldr	r1, [r7, #8]
 8002006:	4618      	mov	r0, r3
 8002008:	f7fe febc 	bl	8000d84 <__aeabi_fmul>
 800200c:	4603      	mov	r3, r0
 800200e:	4619      	mov	r1, r3
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f7fe fdaf 	bl	8000b74 <__addsf3>
 8002016:	4603      	mov	r3, r0
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
	            ZAccel = (1 - KAccelZ) * ZAccel + Q;
 800201a:	6839      	ldr	r1, [r7, #0]
 800201c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002020:	f7fe fda6 	bl	8000b70 <__aeabi_fsub>
 8002024:	4603      	mov	r3, r0
 8002026:	6a39      	ldr	r1, [r7, #32]
 8002028:	4618      	mov	r0, r3
 800202a:	f7fe feab 	bl	8000d84 <__aeabi_fmul>
 800202e:	4603      	mov	r3, r0
 8002030:	4619      	mov	r1, r3
 8002032:	69f8      	ldr	r0, [r7, #28]
 8002034:	f7fe fd9e 	bl	8000b74 <__addsf3>
 8002038:	4603      	mov	r3, r0
 800203a:	623b      	str	r3, [r7, #32]
	    // Sum all readings
	    AccErrorX += (atan((yAccel)/sqrt(pow((xAccel),2)+pow((zAccel),2)))*180/M_PI);
 800203c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800203e:	f7fe f9f3 	bl	8000428 <__aeabi_f2d>
 8002042:	4604      	mov	r4, r0
 8002044:	460d      	mov	r5, r1
 8002046:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002048:	f7fe f9ee 	bl	8000428 <__aeabi_f2d>
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002054:	f00b fb3a 	bl	800d6cc <pow>
 8002058:	4680      	mov	r8, r0
 800205a:	4689      	mov	r9, r1
 800205c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800205e:	f7fe f9e3 	bl	8000428 <__aeabi_f2d>
 8002062:	f04f 0200 	mov.w	r2, #0
 8002066:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800206a:	f00b fb2f 	bl	800d6cc <pow>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	4640      	mov	r0, r8
 8002074:	4649      	mov	r1, r9
 8002076:	f7fe f879 	bl	800016c <__adddf3>
 800207a:	4602      	mov	r2, r0
 800207c:	460b      	mov	r3, r1
 800207e:	4610      	mov	r0, r2
 8002080:	4619      	mov	r1, r3
 8002082:	f00b fb8b 	bl	800d79c <sqrt>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	4620      	mov	r0, r4
 800208c:	4629      	mov	r1, r5
 800208e:	f7fe fb4d 	bl	800072c <__aeabi_ddiv>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	4610      	mov	r0, r2
 8002098:	4619      	mov	r1, r3
 800209a:	f00b f941 	bl	800d320 <atan>
 800209e:	f04f 0200 	mov.w	r2, #0
 80020a2:	4b44      	ldr	r3, [pc, #272]	; (80021b4 <calculateError+0x32c>)
 80020a4:	f7fe fa18 	bl	80004d8 <__aeabi_dmul>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	4610      	mov	r0, r2
 80020ae:	4619      	mov	r1, r3
 80020b0:	a33b      	add	r3, pc, #236	; (adr r3, 80021a0 <calculateError+0x318>)
 80020b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b6:	f7fe fb39 	bl	800072c <__aeabi_ddiv>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4610      	mov	r0, r2
 80020c0:	4619      	mov	r1, r3
 80020c2:	4b3d      	ldr	r3, [pc, #244]	; (80021b8 <calculateError+0x330>)
 80020c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c8:	f7fe f850 	bl	800016c <__adddf3>
 80020cc:	4602      	mov	r2, r0
 80020ce:	460b      	mov	r3, r1
 80020d0:	4939      	ldr	r1, [pc, #228]	; (80021b8 <calculateError+0x330>)
 80020d2:	e9c1 2300 	strd	r2, r3, [r1]
	    AccErrorY += (atan(-1*(xAccel)/sqrt(pow((yAccel),2)+pow((zAccel), 2)))*180/M_PI);
 80020d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80020dc:	4618      	mov	r0, r3
 80020de:	f7fe f9a3 	bl	8000428 <__aeabi_f2d>
 80020e2:	4604      	mov	r4, r0
 80020e4:	460d      	mov	r5, r1
 80020e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80020e8:	f7fe f99e 	bl	8000428 <__aeabi_f2d>
 80020ec:	f04f 0200 	mov.w	r2, #0
 80020f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020f4:	f00b faea 	bl	800d6cc <pow>
 80020f8:	4680      	mov	r8, r0
 80020fa:	4689      	mov	r9, r1
 80020fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020fe:	f7fe f993 	bl	8000428 <__aeabi_f2d>
 8002102:	f04f 0200 	mov.w	r2, #0
 8002106:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800210a:	f00b fadf 	bl	800d6cc <pow>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4640      	mov	r0, r8
 8002114:	4649      	mov	r1, r9
 8002116:	f7fe f829 	bl	800016c <__adddf3>
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	4610      	mov	r0, r2
 8002120:	4619      	mov	r1, r3
 8002122:	f00b fb3b 	bl	800d79c <sqrt>
 8002126:	4602      	mov	r2, r0
 8002128:	460b      	mov	r3, r1
 800212a:	4620      	mov	r0, r4
 800212c:	4629      	mov	r1, r5
 800212e:	f7fe fafd 	bl	800072c <__aeabi_ddiv>
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	4610      	mov	r0, r2
 8002138:	4619      	mov	r1, r3
 800213a:	f00b f8f1 	bl	800d320 <atan>
 800213e:	f04f 0200 	mov.w	r2, #0
 8002142:	4b1c      	ldr	r3, [pc, #112]	; (80021b4 <calculateError+0x32c>)
 8002144:	f7fe f9c8 	bl	80004d8 <__aeabi_dmul>
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	4610      	mov	r0, r2
 800214e:	4619      	mov	r1, r3
 8002150:	a313      	add	r3, pc, #76	; (adr r3, 80021a0 <calculateError+0x318>)
 8002152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002156:	f7fe fae9 	bl	800072c <__aeabi_ddiv>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	4610      	mov	r0, r2
 8002160:	4619      	mov	r1, r3
 8002162:	4b16      	ldr	r3, [pc, #88]	; (80021bc <calculateError+0x334>)
 8002164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002168:	f7fe f800 	bl	800016c <__adddf3>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	4912      	ldr	r1, [pc, #72]	; (80021bc <calculateError+0x334>)
 8002172:	e9c1 2300 	strd	r2, r3, [r1]
	    c++;
 8002176:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <calculateError+0x338>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	3301      	adds	r3, #1
 800217c:	4a10      	ldr	r2, [pc, #64]	; (80021c0 <calculateError+0x338>)
 800217e:	6013      	str	r3, [r2, #0]
	  while (c < 200) {
 8002180:	4b0f      	ldr	r3, [pc, #60]	; (80021c0 <calculateError+0x338>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2bc7      	cmp	r3, #199	; 0xc7
 8002186:	f77f aea3 	ble.w	8001ed0 <calculateError+0x48>
	  }
	  //Divide the sum by 200 to get the error value, since expected value of reading is zero
	  AccErrorX = AccErrorX/200.0;
 800218a:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <calculateError+0x330>)
 800218c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <calculateError+0x33c>)
 8002196:	f7fe fac9 	bl	800072c <__aeabi_ddiv>
 800219a:	e015      	b.n	80021c8 <calculateError+0x340>
 800219c:	f3af 8000 	nop.w
 80021a0:	54442d18 	.word	0x54442d18
 80021a4:	400921fb 	.word	0x400921fb
 80021a8:	2000048c 	.word	0x2000048c
 80021ac:	20000488 	.word	0x20000488
 80021b0:	20000484 	.word	0x20000484
 80021b4:	40668000 	.word	0x40668000
 80021b8:	200004d0 	.word	0x200004d0
 80021bc:	200004d8 	.word	0x200004d8
 80021c0:	200004f8 	.word	0x200004f8
 80021c4:	40690000 	.word	0x40690000
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	493e      	ldr	r1, [pc, #248]	; (80022c8 <calculateError+0x440>)
 80021ce:	e9c1 2300 	strd	r2, r3, [r1]
	  AccErrorY = AccErrorY/200.0;
 80021d2:	4b3e      	ldr	r3, [pc, #248]	; (80022cc <calculateError+0x444>)
 80021d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021d8:	f04f 0200 	mov.w	r2, #0
 80021dc:	4b3c      	ldr	r3, [pc, #240]	; (80022d0 <calculateError+0x448>)
 80021de:	f7fe faa5 	bl	800072c <__aeabi_ddiv>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4939      	ldr	r1, [pc, #228]	; (80022cc <calculateError+0x444>)
 80021e8:	e9c1 2300 	strd	r2, r3, [r1]
	  c = 0;
 80021ec:	4b39      	ldr	r3, [pc, #228]	; (80022d4 <calculateError+0x44c>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]

	  // Read gyro values 200 times
	    while (c < 200) {
 80021f2:	e039      	b.n	8002268 <calculateError+0x3e0>
	      MPU6050_Read_Gyro(&Gx, &Gy, &Gz);
 80021f4:	4a38      	ldr	r2, [pc, #224]	; (80022d8 <calculateError+0x450>)
 80021f6:	4939      	ldr	r1, [pc, #228]	; (80022dc <calculateError+0x454>)
 80021f8:	4839      	ldr	r0, [pc, #228]	; (80022e0 <calculateError+0x458>)
 80021fa:	f7ff f8c5 	bl	8001388 <MPU6050_Read_Gyro>
	      HAL_Delay(1);
 80021fe:	2001      	movs	r0, #1
 8002200:	f001 fab0 	bl	8003764 <HAL_Delay>
	      // Sum all readings
	      GyroErrorX += Gx;
 8002204:	4b36      	ldr	r3, [pc, #216]	; (80022e0 <calculateError+0x458>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f7fe f90d 	bl	8000428 <__aeabi_f2d>
 800220e:	4b35      	ldr	r3, [pc, #212]	; (80022e4 <calculateError+0x45c>)
 8002210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002214:	f7fd ffaa 	bl	800016c <__adddf3>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4931      	ldr	r1, [pc, #196]	; (80022e4 <calculateError+0x45c>)
 800221e:	e9c1 2300 	strd	r2, r3, [r1]
	      GyroErrorY += Gy;
 8002222:	4b2e      	ldr	r3, [pc, #184]	; (80022dc <calculateError+0x454>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f7fe f8fe 	bl	8000428 <__aeabi_f2d>
 800222c:	4b2e      	ldr	r3, [pc, #184]	; (80022e8 <calculateError+0x460>)
 800222e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002232:	f7fd ff9b 	bl	800016c <__adddf3>
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	492b      	ldr	r1, [pc, #172]	; (80022e8 <calculateError+0x460>)
 800223c:	e9c1 2300 	strd	r2, r3, [r1]
	      GyroErrorZ += Gz;
 8002240:	4b25      	ldr	r3, [pc, #148]	; (80022d8 <calculateError+0x450>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f7fe f8ef 	bl	8000428 <__aeabi_f2d>
 800224a:	4b28      	ldr	r3, [pc, #160]	; (80022ec <calculateError+0x464>)
 800224c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002250:	f7fd ff8c 	bl	800016c <__adddf3>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	4924      	ldr	r1, [pc, #144]	; (80022ec <calculateError+0x464>)
 800225a:	e9c1 2300 	strd	r2, r3, [r1]
	      c++;
 800225e:	4b1d      	ldr	r3, [pc, #116]	; (80022d4 <calculateError+0x44c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	3301      	adds	r3, #1
 8002264:	4a1b      	ldr	r2, [pc, #108]	; (80022d4 <calculateError+0x44c>)
 8002266:	6013      	str	r3, [r2, #0]
	    while (c < 200) {
 8002268:	4b1a      	ldr	r3, [pc, #104]	; (80022d4 <calculateError+0x44c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2bc7      	cmp	r3, #199	; 0xc7
 800226e:	ddc1      	ble.n	80021f4 <calculateError+0x36c>
	    }
	    //Divide the sum by 200 to get the error value
	    GyroErrorX = GyroErrorX / 200.0;
 8002270:	4b1c      	ldr	r3, [pc, #112]	; (80022e4 <calculateError+0x45c>)
 8002272:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <calculateError+0x448>)
 800227c:	f7fe fa56 	bl	800072c <__aeabi_ddiv>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4917      	ldr	r1, [pc, #92]	; (80022e4 <calculateError+0x45c>)
 8002286:	e9c1 2300 	strd	r2, r3, [r1]
	    GyroErrorY = GyroErrorY / 200.0;
 800228a:	4b17      	ldr	r3, [pc, #92]	; (80022e8 <calculateError+0x460>)
 800228c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002290:	f04f 0200 	mov.w	r2, #0
 8002294:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <calculateError+0x448>)
 8002296:	f7fe fa49 	bl	800072c <__aeabi_ddiv>
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	4912      	ldr	r1, [pc, #72]	; (80022e8 <calculateError+0x460>)
 80022a0:	e9c1 2300 	strd	r2, r3, [r1]
	    GyroErrorZ = GyroErrorZ / 200.0;
 80022a4:	4b11      	ldr	r3, [pc, #68]	; (80022ec <calculateError+0x464>)
 80022a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022aa:	f04f 0200 	mov.w	r2, #0
 80022ae:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <calculateError+0x448>)
 80022b0:	f7fe fa3c 	bl	800072c <__aeabi_ddiv>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	490c      	ldr	r1, [pc, #48]	; (80022ec <calculateError+0x464>)
 80022ba:	e9c1 2300 	strd	r2, r3, [r1]


}
 80022be:	bf00      	nop
 80022c0:	3738      	adds	r7, #56	; 0x38
 80022c2:	46bd      	mov	sp, r7
 80022c4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80022c8:	200004d0 	.word	0x200004d0
 80022cc:	200004d8 	.word	0x200004d8
 80022d0:	40690000 	.word	0x40690000
 80022d4:	200004f8 	.word	0x200004f8
 80022d8:	20000498 	.word	0x20000498
 80022dc:	20000494 	.word	0x20000494
 80022e0:	20000490 	.word	0x20000490
 80022e4:	200004e0 	.word	0x200004e0
 80022e8:	200004e8 	.word	0x200004e8
 80022ec:	200004f0 	.word	0x200004f0

080022f0 <goForwardandLeft>:


void goForwardandLeft(int numberSquare, int time){
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
	//NUMBERSQUARE is the number of bricks robot wants to go
	//i is the time for robot go on 2 bricks and go on
	if(square <=numberSquare){
 80022fa:	4b3f      	ldr	r3, [pc, #252]	; (80023f8 <goForwardandLeft+0x108>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	429a      	cmp	r2, r3
 8002302:	db54      	blt.n	80023ae <goForwardandLeft+0xbe>
	if(Dist >15){
 8002304:	4b3d      	ldr	r3, [pc, #244]	; (80023fc <goForwardandLeft+0x10c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	493d      	ldr	r1, [pc, #244]	; (8002400 <goForwardandLeft+0x110>)
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe fef6 	bl	80010fc <__aeabi_fcmpgt>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d048      	beq.n	80023a8 <goForwardandLeft+0xb8>
		if(i<time){
 8002316:	4b3b      	ldr	r3, [pc, #236]	; (8002404 <goForwardandLeft+0x114>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	429a      	cmp	r2, r3
 800231e:	dd3a      	ble.n	8002396 <goForwardandLeft+0xa6>
			if (abs(angle-targetAngle) <2){  //3
 8002320:	4b39      	ldr	r3, [pc, #228]	; (8002408 <goForwardandLeft+0x118>)
 8002322:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002326:	4b39      	ldr	r3, [pc, #228]	; (800240c <goForwardandLeft+0x11c>)
 8002328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232c:	f7fd ff1c 	bl	8000168 <__aeabi_dsub>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	4610      	mov	r0, r2
 8002336:	4619      	mov	r1, r3
 8002338:	f7fe fb7e 	bl	8000a38 <__aeabi_d2iz>
 800233c:	4603      	mov	r3, r0
 800233e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002342:	db22      	blt.n	800238a <goForwardandLeft+0x9a>
 8002344:	4b30      	ldr	r3, [pc, #192]	; (8002408 <goForwardandLeft+0x118>)
 8002346:	e9d3 0100 	ldrd	r0, r1, [r3]
 800234a:	4b30      	ldr	r3, [pc, #192]	; (800240c <goForwardandLeft+0x11c>)
 800234c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002350:	f7fd ff0a 	bl	8000168 <__aeabi_dsub>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4610      	mov	r0, r2
 800235a:	4619      	mov	r1, r3
 800235c:	f7fe fb6c 	bl	8000a38 <__aeabi_d2iz>
 8002360:	4603      	mov	r3, r0
 8002362:	2b01      	cmp	r3, #1
 8002364:	dc11      	bgt.n	800238a <goForwardandLeft+0x9a>
					          if (countStraight < 20){
 8002366:	4b2a      	ldr	r3, [pc, #168]	; (8002410 <goForwardandLeft+0x120>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2b13      	cmp	r3, #19
 800236c:	dc05      	bgt.n	800237a <goForwardandLeft+0x8a>
					            countStraight ++;
 800236e:	4b28      	ldr	r3, [pc, #160]	; (8002410 <goForwardandLeft+0x120>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	3301      	adds	r3, #1
 8002374:	4a26      	ldr	r2, [pc, #152]	; (8002410 <goForwardandLeft+0x120>)
 8002376:	6013      	str	r3, [r2, #0]
					          if (countStraight < 20){
 8002378:	e00a      	b.n	8002390 <goForwardandLeft+0xa0>
					          } else {
					            countStraight = 0;
 800237a:	4b25      	ldr	r3, [pc, #148]	; (8002410 <goForwardandLeft+0x120>)
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
					            equilibriumSpeed = leftSpeedVal;
 8002380:	4b24      	ldr	r3, [pc, #144]	; (8002414 <goForwardandLeft+0x124>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a24      	ldr	r2, [pc, #144]	; (8002418 <goForwardandLeft+0x128>)
 8002386:	6013      	str	r3, [r2, #0]
					          if (countStraight < 20){
 8002388:	e002      	b.n	8002390 <goForwardandLeft+0xa0>
					          }
		    }else {
				countStraight = 0;
 800238a:	4b21      	ldr	r3, [pc, #132]	; (8002410 <goForwardandLeft+0x120>)
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
			}
			driving();
 8002390:	f7ff fbae 	bl	8001af0 <driving>
			angleTurnRight();
		}


	}
}
 8002394:	e02c      	b.n	80023f0 <goForwardandLeft+0x100>
			square+=4;
 8002396:	4b18      	ldr	r3, [pc, #96]	; (80023f8 <goForwardandLeft+0x108>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	3304      	adds	r3, #4
 800239c:	4a16      	ldr	r2, [pc, #88]	; (80023f8 <goForwardandLeft+0x108>)
 800239e:	6013      	str	r3, [r2, #0]
			i=0;
 80023a0:	4b18      	ldr	r3, [pc, #96]	; (8002404 <goForwardandLeft+0x114>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
}
 80023a6:	e023      	b.n	80023f0 <goForwardandLeft+0x100>
		CAR_STOP();
 80023a8:	f7ff fb7e 	bl	8001aa8 <CAR_STOP>
}
 80023ac:	e020      	b.n	80023f0 <goForwardandLeft+0x100>
		square = 0;
 80023ae:	4b12      	ldr	r3, [pc, #72]	; (80023f8 <goForwardandLeft+0x108>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
		if((routePlanning ==1) && (currentRoute <2)){
 80023b4:	4b19      	ldr	r3, [pc, #100]	; (800241c <goForwardandLeft+0x12c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d105      	bne.n	80023c8 <goForwardandLeft+0xd8>
 80023bc:	4b18      	ldr	r3, [pc, #96]	; (8002420 <goForwardandLeft+0x130>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	dc01      	bgt.n	80023c8 <goForwardandLeft+0xd8>
			angleTurnLeft();
 80023c4:	f7ff faaa 	bl	800191c <angleTurnLeft>
	    if((currentRoute ==2) && (routePlanning ==1)){
 80023c8:	4b15      	ldr	r3, [pc, #84]	; (8002420 <goForwardandLeft+0x130>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d109      	bne.n	80023e4 <goForwardandLeft+0xf4>
 80023d0:	4b12      	ldr	r3, [pc, #72]	; (800241c <goForwardandLeft+0x12c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d105      	bne.n	80023e4 <goForwardandLeft+0xf4>
			isDriving = false;
 80023d8:	4b12      	ldr	r3, [pc, #72]	; (8002424 <goForwardandLeft+0x134>)
 80023da:	2200      	movs	r2, #0
 80023dc:	701a      	strb	r2, [r3, #0]
			finishRoute =true;
 80023de:	4b12      	ldr	r3, [pc, #72]	; (8002428 <goForwardandLeft+0x138>)
 80023e0:	2201      	movs	r2, #1
 80023e2:	701a      	strb	r2, [r3, #0]
		if((routePlanning ==2)){
 80023e4:	4b0d      	ldr	r3, [pc, #52]	; (800241c <goForwardandLeft+0x12c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d101      	bne.n	80023f0 <goForwardandLeft+0x100>
			angleTurnRight();
 80023ec:	f7ff fad2 	bl	8001994 <angleTurnRight>
}
 80023f0:	bf00      	nop
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20000528 	.word	0x20000528
 80023fc:	20000468 	.word	0x20000468
 8002400:	41700000 	.word	0x41700000
 8002404:	200004fc 	.word	0x200004fc
 8002408:	20000500 	.word	0x20000500
 800240c:	20000508 	.word	0x20000508
 8002410:	20000534 	.word	0x20000534
 8002414:	20000510 	.word	0x20000510
 8002418:	20000004 	.word	0x20000004
 800241c:	20000000 	.word	0x20000000
 8002420:	20000454 	.word	0x20000454
 8002424:	20000518 	.word	0x20000518
 8002428:	20000480 	.word	0x20000480

0800242c <processing>:



void processing(){
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
	static int count;
				  if (count <6){
 8002430:	4b3a      	ldr	r3, [pc, #232]	; (800251c <processing+0xf0>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b05      	cmp	r3, #5
 8002436:	dc05      	bgt.n	8002444 <processing+0x18>
				    count ++;
 8002438:	4b38      	ldr	r3, [pc, #224]	; (800251c <processing+0xf0>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	3301      	adds	r3, #1
 800243e:	4a37      	ldr	r2, [pc, #220]	; (800251c <processing+0xf0>)
 8002440:	6013      	str	r3, [r2, #0]
					  }
					prevIsDriving = isDriving;

				  }

}
 8002442:	e068      	b.n	8002516 <processing+0xea>
				    count = 0;
 8002444:	4b35      	ldr	r3, [pc, #212]	; (800251c <processing+0xf0>)
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]
				      if (isDriving != prevIsDriving){
 800244a:	4b35      	ldr	r3, [pc, #212]	; (8002520 <processing+0xf4>)
 800244c:	781a      	ldrb	r2, [r3, #0]
 800244e:	4b35      	ldr	r3, [pc, #212]	; (8002524 <processing+0xf8>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	d006      	beq.n	8002464 <processing+0x38>
				          leftSpeedVal = equilibriumSpeed;
 8002456:	4b34      	ldr	r3, [pc, #208]	; (8002528 <processing+0xfc>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a34      	ldr	r2, [pc, #208]	; (800252c <processing+0x100>)
 800245c:	6013      	str	r3, [r2, #0]
				          countStraight = 0;
 800245e:	4b34      	ldr	r3, [pc, #208]	; (8002530 <processing+0x104>)
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
					  if (isDriving) {
 8002464:	4b2e      	ldr	r3, [pc, #184]	; (8002520 <processing+0xf4>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d02f      	beq.n	80024cc <processing+0xa0>
						  switch (currentRoute) {
 800246c:	4b31      	ldr	r3, [pc, #196]	; (8002534 <processing+0x108>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b02      	cmp	r3, #2
 8002472:	d010      	beq.n	8002496 <processing+0x6a>
 8002474:	2b02      	cmp	r3, #2
 8002476:	dc4a      	bgt.n	800250e <processing+0xe2>
 8002478:	2b00      	cmp	r3, #0
 800247a:	d002      	beq.n	8002482 <processing+0x56>
 800247c:	2b01      	cmp	r3, #1
 800247e:	d005      	beq.n	800248c <processing+0x60>
 8002480:	e045      	b.n	800250e <processing+0xe2>
									goForwardandLeft(16,35); //20
 8002482:	2123      	movs	r1, #35	; 0x23
 8002484:	2010      	movs	r0, #16
 8002486:	f7ff ff33 	bl	80022f0 <goForwardandLeft>
								break;
 800248a:	e040      	b.n	800250e <processing+0xe2>
								goForwardandLeft(8, 20); //10
 800248c:	2114      	movs	r1, #20
 800248e:	2008      	movs	r0, #8
 8002490:	f7ff ff2e 	bl	80022f0 <goForwardandLeft>
				                break;
 8002494:	e03b      	b.n	800250e <processing+0xe2>
								if(r_data =='a'){
 8002496:	4b28      	ldr	r3, [pc, #160]	; (8002538 <processing+0x10c>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b61      	cmp	r3, #97	; 0x61
 800249c:	d104      	bne.n	80024a8 <processing+0x7c>
									goForwardandLeft(16, 33);
 800249e:	2121      	movs	r1, #33	; 0x21
 80024a0:	2010      	movs	r0, #16
 80024a2:	f7ff ff25 	bl	80022f0 <goForwardandLeft>
			                    break;
 80024a6:	e031      	b.n	800250c <processing+0xe0>
								}else if(r_data =='b'){
 80024a8:	4b23      	ldr	r3, [pc, #140]	; (8002538 <processing+0x10c>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b62      	cmp	r3, #98	; 0x62
 80024ae:	d104      	bne.n	80024ba <processing+0x8e>
									goForwardandLeft(12, 20);
 80024b0:	2114      	movs	r1, #20
 80024b2:	200c      	movs	r0, #12
 80024b4:	f7ff ff1c 	bl	80022f0 <goForwardandLeft>
			                    break;
 80024b8:	e028      	b.n	800250c <processing+0xe0>
								}else if(r_data =='c'){
 80024ba:	4b1f      	ldr	r3, [pc, #124]	; (8002538 <processing+0x10c>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b63      	cmp	r3, #99	; 0x63
 80024c0:	d124      	bne.n	800250c <processing+0xe0>
									goForwardandLeft(4, 12); //6
 80024c2:	210c      	movs	r1, #12
 80024c4:	2004      	movs	r0, #4
 80024c6:	f7ff ff13 	bl	80022f0 <goForwardandLeft>
			                    break;
 80024ca:	e01f      	b.n	800250c <processing+0xe0>
					  	if(finishRoute){
 80024cc:	4b1b      	ldr	r3, [pc, #108]	; (800253c <processing+0x110>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d009      	beq.n	80024e8 <processing+0xbc>
					  		targetAngle = 0;
 80024d4:	491a      	ldr	r1, [pc, #104]	; (8002540 <processing+0x114>)
 80024d6:	f04f 0200 	mov.w	r2, #0
 80024da:	f04f 0300 	mov.w	r3, #0
 80024de:	e9c1 2300 	strd	r2, r3, [r1]
					  		routePlanning = 2 ;
 80024e2:	4b18      	ldr	r3, [pc, #96]	; (8002544 <processing+0x118>)
 80024e4:	2202      	movs	r2, #2
 80024e6:	601a      	str	r2, [r3, #0]
					  	if((routePlanning ==2)&& (currentRoute ==0)){
 80024e8:	4b16      	ldr	r3, [pc, #88]	; (8002544 <processing+0x118>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d10a      	bne.n	8002506 <processing+0xda>
 80024f0:	4b10      	ldr	r3, [pc, #64]	; (8002534 <processing+0x108>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d106      	bne.n	8002506 <processing+0xda>
					  			targetAngle =0;
 80024f8:	4911      	ldr	r1, [pc, #68]	; (8002540 <processing+0x114>)
 80024fa:	f04f 0200 	mov.w	r2, #0
 80024fe:	f04f 0300 	mov.w	r3, #0
 8002502:	e9c1 2300 	strd	r2, r3, [r1]
					  	rotate();
 8002506:	f7ff fb9d 	bl	8001c44 <rotate>
 800250a:	e000      	b.n	800250e <processing+0xe2>
			                    break;
 800250c:	bf00      	nop
					prevIsDriving = isDriving;
 800250e:	4b04      	ldr	r3, [pc, #16]	; (8002520 <processing+0xf4>)
 8002510:	781a      	ldrb	r2, [r3, #0]
 8002512:	4b04      	ldr	r3, [pc, #16]	; (8002524 <processing+0xf8>)
 8002514:	701a      	strb	r2, [r3, #0]
}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20000538 	.word	0x20000538
 8002520:	20000518 	.word	0x20000518
 8002524:	20000008 	.word	0x20000008
 8002528:	20000004 	.word	0x20000004
 800252c:	20000510 	.word	0x20000510
 8002530:	20000534 	.word	0x20000534
 8002534:	20000454 	.word	0x20000454
 8002538:	2000046c 	.word	0x2000046c
 800253c:	20000480 	.word	0x20000480
 8002540:	20000508 	.word	0x20000508
 8002544:	20000000 	.word	0x20000000

08002548 <setupMPU6050>:


void setupMPU6050(){
 8002548:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800254c:	af00      	add	r7, sp, #0

	    // === Read accelerator (on the MPU6050) data === //
		MPU6050_Read_Accel(&Ax, &Ay, &Az);
 800254e:	4ab6      	ldr	r2, [pc, #728]	; (8002828 <setupMPU6050+0x2e0>)
 8002550:	49b6      	ldr	r1, [pc, #728]	; (800282c <setupMPU6050+0x2e4>)
 8002552:	48b7      	ldr	r0, [pc, #732]	; (8002830 <setupMPU6050+0x2e8>)
 8002554:	f7fe fe90 	bl	8001278 <MPU6050_Read_Accel>
		HAL_Delay(1);
 8002558:	2001      	movs	r0, #1
 800255a:	f001 f903 	bl	8003764 <HAL_Delay>
		// Calculating Roll and Pitch from the accelerometer data
		accAngleX = (atan((Ay)/sqrt(pow((Ax), 2) + pow((Az), 2)))*180/ M_PI)- AccErrorX; //AccErrorX is calculated in the calculateError() function;
 800255e:	4bb3      	ldr	r3, [pc, #716]	; (800282c <setupMPU6050+0x2e4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7fd ff60 	bl	8000428 <__aeabi_f2d>
 8002568:	4604      	mov	r4, r0
 800256a:	460d      	mov	r5, r1
 800256c:	4bb0      	ldr	r3, [pc, #704]	; (8002830 <setupMPU6050+0x2e8>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f7fd ff59 	bl	8000428 <__aeabi_f2d>
 8002576:	f04f 0200 	mov.w	r2, #0
 800257a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800257e:	f00b f8a5 	bl	800d6cc <pow>
 8002582:	4680      	mov	r8, r0
 8002584:	4689      	mov	r9, r1
 8002586:	4ba8      	ldr	r3, [pc, #672]	; (8002828 <setupMPU6050+0x2e0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f7fd ff4c 	bl	8000428 <__aeabi_f2d>
 8002590:	f04f 0200 	mov.w	r2, #0
 8002594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002598:	f00b f898 	bl	800d6cc <pow>
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	4640      	mov	r0, r8
 80025a2:	4649      	mov	r1, r9
 80025a4:	f7fd fde2 	bl	800016c <__adddf3>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	4610      	mov	r0, r2
 80025ae:	4619      	mov	r1, r3
 80025b0:	f00b f8f4 	bl	800d79c <sqrt>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4620      	mov	r0, r4
 80025ba:	4629      	mov	r1, r5
 80025bc:	f7fe f8b6 	bl	800072c <__aeabi_ddiv>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4610      	mov	r0, r2
 80025c6:	4619      	mov	r1, r3
 80025c8:	f00a feaa 	bl	800d320 <atan>
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	4b98      	ldr	r3, [pc, #608]	; (8002834 <setupMPU6050+0x2ec>)
 80025d2:	f7fd ff81 	bl	80004d8 <__aeabi_dmul>
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	4610      	mov	r0, r2
 80025dc:	4619      	mov	r1, r3
 80025de:	a38e      	add	r3, pc, #568	; (adr r3, 8002818 <setupMPU6050+0x2d0>)
 80025e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e4:	f7fe f8a2 	bl	800072c <__aeabi_ddiv>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	4610      	mov	r0, r2
 80025ee:	4619      	mov	r1, r3
 80025f0:	4b91      	ldr	r3, [pc, #580]	; (8002838 <setupMPU6050+0x2f0>)
 80025f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f6:	f7fd fdb7 	bl	8000168 <__aeabi_dsub>
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	498f      	ldr	r1, [pc, #572]	; (800283c <setupMPU6050+0x2f4>)
 8002600:	e9c1 2300 	strd	r2, r3, [r1]
		accAngleY = (atan(-1*(Ax) /sqrt(pow((Ay), 2) + pow((Az), 2)))*180/ M_PI)- AccErrorY;
 8002604:	4b8a      	ldr	r3, [pc, #552]	; (8002830 <setupMPU6050+0x2e8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800260c:	4618      	mov	r0, r3
 800260e:	f7fd ff0b 	bl	8000428 <__aeabi_f2d>
 8002612:	4604      	mov	r4, r0
 8002614:	460d      	mov	r5, r1
 8002616:	4b85      	ldr	r3, [pc, #532]	; (800282c <setupMPU6050+0x2e4>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7fd ff04 	bl	8000428 <__aeabi_f2d>
 8002620:	f04f 0200 	mov.w	r2, #0
 8002624:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002628:	f00b f850 	bl	800d6cc <pow>
 800262c:	4680      	mov	r8, r0
 800262e:	4689      	mov	r9, r1
 8002630:	4b7d      	ldr	r3, [pc, #500]	; (8002828 <setupMPU6050+0x2e0>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f7fd fef7 	bl	8000428 <__aeabi_f2d>
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002642:	f00b f843 	bl	800d6cc <pow>
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	4640      	mov	r0, r8
 800264c:	4649      	mov	r1, r9
 800264e:	f7fd fd8d 	bl	800016c <__adddf3>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4610      	mov	r0, r2
 8002658:	4619      	mov	r1, r3
 800265a:	f00b f89f 	bl	800d79c <sqrt>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	4620      	mov	r0, r4
 8002664:	4629      	mov	r1, r5
 8002666:	f7fe f861 	bl	800072c <__aeabi_ddiv>
 800266a:	4602      	mov	r2, r0
 800266c:	460b      	mov	r3, r1
 800266e:	4610      	mov	r0, r2
 8002670:	4619      	mov	r1, r3
 8002672:	f00a fe55 	bl	800d320 <atan>
 8002676:	f04f 0200 	mov.w	r2, #0
 800267a:	4b6e      	ldr	r3, [pc, #440]	; (8002834 <setupMPU6050+0x2ec>)
 800267c:	f7fd ff2c 	bl	80004d8 <__aeabi_dmul>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4610      	mov	r0, r2
 8002686:	4619      	mov	r1, r3
 8002688:	a363      	add	r3, pc, #396	; (adr r3, 8002818 <setupMPU6050+0x2d0>)
 800268a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268e:	f7fe f84d 	bl	800072c <__aeabi_ddiv>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4610      	mov	r0, r2
 8002698:	4619      	mov	r1, r3
 800269a:	4b69      	ldr	r3, [pc, #420]	; (8002840 <setupMPU6050+0x2f8>)
 800269c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a0:	f7fd fd62 	bl	8000168 <__aeabi_dsub>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4966      	ldr	r1, [pc, #408]	; (8002844 <setupMPU6050+0x2fc>)
 80026aa:	e9c1 2300 	strd	r2, r3, [r1]
		// === Read gyroscope (on the MPU6050) data === //
		previousTime = currentTime;
 80026ae:	4b66      	ldr	r3, [pc, #408]	; (8002848 <setupMPU6050+0x300>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a66      	ldr	r2, [pc, #408]	; (800284c <setupMPU6050+0x304>)
 80026b4:	6013      	str	r3, [r2, #0]
		currentTime = HAL_GetTick()*1000;
 80026b6:	f001 f84b 	bl	8003750 <HAL_GetTick>
 80026ba:	4603      	mov	r3, r0
 80026bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026c0:	fb02 f303 	mul.w	r3, r2, r3
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7fe fb05 	bl	8000cd4 <__aeabi_ui2f>
 80026ca:	4603      	mov	r3, r0
 80026cc:	4a5e      	ldr	r2, [pc, #376]	; (8002848 <setupMPU6050+0x300>)
 80026ce:	6013      	str	r3, [r2, #0]
		elapsedTime = (currentTime - previousTime)/1000000.0;
 80026d0:	4b5d      	ldr	r3, [pc, #372]	; (8002848 <setupMPU6050+0x300>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a5d      	ldr	r2, [pc, #372]	; (800284c <setupMPU6050+0x304>)
 80026d6:	6812      	ldr	r2, [r2, #0]
 80026d8:	4611      	mov	r1, r2
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fe fa48 	bl	8000b70 <__aeabi_fsub>
 80026e0:	4603      	mov	r3, r0
 80026e2:	495b      	ldr	r1, [pc, #364]	; (8002850 <setupMPU6050+0x308>)
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fe fc01 	bl	8000eec <__aeabi_fdiv>
 80026ea:	4603      	mov	r3, r0
 80026ec:	461a      	mov	r2, r3
 80026ee:	4b59      	ldr	r3, [pc, #356]	; (8002854 <setupMPU6050+0x30c>)
 80026f0:	601a      	str	r2, [r3, #0]

		MPU6050_Read_Gyro(&Gx,&Gy,&Gz);
 80026f2:	4a59      	ldr	r2, [pc, #356]	; (8002858 <setupMPU6050+0x310>)
 80026f4:	4959      	ldr	r1, [pc, #356]	; (800285c <setupMPU6050+0x314>)
 80026f6:	485a      	ldr	r0, [pc, #360]	; (8002860 <setupMPU6050+0x318>)
 80026f8:	f7fe fe46 	bl	8001388 <MPU6050_Read_Gyro>
        HAL_Delay(1);
 80026fc:	2001      	movs	r0, #1
 80026fe:	f001 f831 	bl	8003764 <HAL_Delay>
		// Correct the outputs with the calculated error values
		Gx -= GyroErrorX; //GyroErrorX is calculated in the calculateError() function
 8002702:	4b57      	ldr	r3, [pc, #348]	; (8002860 <setupMPU6050+0x318>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f7fd fe8e 	bl	8000428 <__aeabi_f2d>
 800270c:	4b55      	ldr	r3, [pc, #340]	; (8002864 <setupMPU6050+0x31c>)
 800270e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002712:	f7fd fd29 	bl	8000168 <__aeabi_dsub>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	4610      	mov	r0, r2
 800271c:	4619      	mov	r1, r3
 800271e:	f7fe f9d3 	bl	8000ac8 <__aeabi_d2f>
 8002722:	4603      	mov	r3, r0
 8002724:	4a4e      	ldr	r2, [pc, #312]	; (8002860 <setupMPU6050+0x318>)
 8002726:	6013      	str	r3, [r2, #0]
		Gy -= GyroErrorY;
 8002728:	4b4c      	ldr	r3, [pc, #304]	; (800285c <setupMPU6050+0x314>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f7fd fe7b 	bl	8000428 <__aeabi_f2d>
 8002732:	4b4d      	ldr	r3, [pc, #308]	; (8002868 <setupMPU6050+0x320>)
 8002734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002738:	f7fd fd16 	bl	8000168 <__aeabi_dsub>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	4610      	mov	r0, r2
 8002742:	4619      	mov	r1, r3
 8002744:	f7fe f9c0 	bl	8000ac8 <__aeabi_d2f>
 8002748:	4603      	mov	r3, r0
 800274a:	4a44      	ldr	r2, [pc, #272]	; (800285c <setupMPU6050+0x314>)
 800274c:	6013      	str	r3, [r2, #0]
		Gz -= GyroErrorZ;
 800274e:	4b42      	ldr	r3, [pc, #264]	; (8002858 <setupMPU6050+0x310>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f7fd fe68 	bl	8000428 <__aeabi_f2d>
 8002758:	4b44      	ldr	r3, [pc, #272]	; (800286c <setupMPU6050+0x324>)
 800275a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275e:	f7fd fd03 	bl	8000168 <__aeabi_dsub>
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	4610      	mov	r0, r2
 8002768:	4619      	mov	r1, r3
 800276a:	f7fe f9ad 	bl	8000ac8 <__aeabi_d2f>
 800276e:	4603      	mov	r3, r0
 8002770:	4a39      	ldr	r2, [pc, #228]	; (8002858 <setupMPU6050+0x310>)
 8002772:	6013      	str	r3, [r2, #0]
		// Currently the raw values are in degrees per seconds, deg/s, so we need to multiply by sendonds (s) to get the angle in degrees
		gyroAngleX += Gx * elapsedTime; // deg/s * s = deg
 8002774:	4b3a      	ldr	r3, [pc, #232]	; (8002860 <setupMPU6050+0x318>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a36      	ldr	r2, [pc, #216]	; (8002854 <setupMPU6050+0x30c>)
 800277a:	6812      	ldr	r2, [r2, #0]
 800277c:	4611      	mov	r1, r2
 800277e:	4618      	mov	r0, r3
 8002780:	f7fe fb00 	bl	8000d84 <__aeabi_fmul>
 8002784:	4603      	mov	r3, r0
 8002786:	4618      	mov	r0, r3
 8002788:	f7fd fe4e 	bl	8000428 <__aeabi_f2d>
 800278c:	4b38      	ldr	r3, [pc, #224]	; (8002870 <setupMPU6050+0x328>)
 800278e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002792:	f7fd fceb 	bl	800016c <__adddf3>
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	4935      	ldr	r1, [pc, #212]	; (8002870 <setupMPU6050+0x328>)
 800279c:	e9c1 2300 	strd	r2, r3, [r1]
		gyroAngleY += Gy * elapsedTime;
 80027a0:	4b2e      	ldr	r3, [pc, #184]	; (800285c <setupMPU6050+0x314>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a2b      	ldr	r2, [pc, #172]	; (8002854 <setupMPU6050+0x30c>)
 80027a6:	6812      	ldr	r2, [r2, #0]
 80027a8:	4611      	mov	r1, r2
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fe faea 	bl	8000d84 <__aeabi_fmul>
 80027b0:	4603      	mov	r3, r0
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fd fe38 	bl	8000428 <__aeabi_f2d>
 80027b8:	4b2e      	ldr	r3, [pc, #184]	; (8002874 <setupMPU6050+0x32c>)
 80027ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027be:	f7fd fcd5 	bl	800016c <__adddf3>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	492b      	ldr	r1, [pc, #172]	; (8002874 <setupMPU6050+0x32c>)
 80027c8:	e9c1 2300 	strd	r2, r3, [r1]
		yaw += Gz * elapsedTime;
 80027cc:	4b22      	ldr	r3, [pc, #136]	; (8002858 <setupMPU6050+0x310>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a20      	ldr	r2, [pc, #128]	; (8002854 <setupMPU6050+0x30c>)
 80027d2:	6812      	ldr	r2, [r2, #0]
 80027d4:	4611      	mov	r1, r2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fe fad4 	bl	8000d84 <__aeabi_fmul>
 80027dc:	4603      	mov	r3, r0
 80027de:	461a      	mov	r2, r3
 80027e0:	4b25      	ldr	r3, [pc, #148]	; (8002878 <setupMPU6050+0x330>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4619      	mov	r1, r3
 80027e6:	4610      	mov	r0, r2
 80027e8:	f7fe f9c4 	bl	8000b74 <__addsf3>
 80027ec:	4603      	mov	r3, r0
 80027ee:	461a      	mov	r2, r3
 80027f0:	4b21      	ldr	r3, [pc, #132]	; (8002878 <setupMPU6050+0x330>)
 80027f2:	601a      	str	r2, [r3, #0]

		roll = 0.98 * gyroAngleX + 0.02	* accAngleX;
 80027f4:	4b1e      	ldr	r3, [pc, #120]	; (8002870 <setupMPU6050+0x328>)
 80027f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027fa:	a309      	add	r3, pc, #36	; (adr r3, 8002820 <setupMPU6050+0x2d8>)
 80027fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002800:	f7fd fe6a 	bl	80004d8 <__aeabi_dmul>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4614      	mov	r4, r2
 800280a:	461d      	mov	r5, r3
 800280c:	4b0b      	ldr	r3, [pc, #44]	; (800283c <setupMPU6050+0x2f4>)
 800280e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002812:	e033      	b.n	800287c <setupMPU6050+0x334>
 8002814:	f3af 8000 	nop.w
 8002818:	54442d18 	.word	0x54442d18
 800281c:	400921fb 	.word	0x400921fb
 8002820:	f5c28f5c 	.word	0xf5c28f5c
 8002824:	3fef5c28 	.word	0x3fef5c28
 8002828:	2000048c 	.word	0x2000048c
 800282c:	20000488 	.word	0x20000488
 8002830:	20000484 	.word	0x20000484
 8002834:	40668000 	.word	0x40668000
 8002838:	200004d0 	.word	0x200004d0
 800283c:	200004a0 	.word	0x200004a0
 8002840:	200004d8 	.word	0x200004d8
 8002844:	200004a8 	.word	0x200004a8
 8002848:	20000520 	.word	0x20000520
 800284c:	20000524 	.word	0x20000524
 8002850:	49742400 	.word	0x49742400
 8002854:	2000051c 	.word	0x2000051c
 8002858:	20000498 	.word	0x20000498
 800285c:	20000494 	.word	0x20000494
 8002860:	20000490 	.word	0x20000490
 8002864:	200004e0 	.word	0x200004e0
 8002868:	200004e8 	.word	0x200004e8
 800286c:	200004f0 	.word	0x200004f0
 8002870:	200004b0 	.word	0x200004b0
 8002874:	200004b8 	.word	0x200004b8
 8002878:	200004c8 	.word	0x200004c8
 800287c:	a32a      	add	r3, pc, #168	; (adr r3, 8002928 <setupMPU6050+0x3e0>)
 800287e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002882:	f7fd fe29 	bl	80004d8 <__aeabi_dmul>
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	4620      	mov	r0, r4
 800288c:	4629      	mov	r1, r5
 800288e:	f7fd fc6d 	bl	800016c <__adddf3>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4610      	mov	r0, r2
 8002898:	4619      	mov	r1, r3
 800289a:	f7fe f915 	bl	8000ac8 <__aeabi_d2f>
 800289e:	4603      	mov	r3, r0
 80028a0:	4a27      	ldr	r2, [pc, #156]	; (8002940 <setupMPU6050+0x3f8>)
 80028a2:	6013      	str	r3, [r2, #0]
		pitch = 0.96 * gyroAngleY + 0.04 * accAngleY;
 80028a4:	4b27      	ldr	r3, [pc, #156]	; (8002944 <setupMPU6050+0x3fc>)
 80028a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028aa:	a321      	add	r3, pc, #132	; (adr r3, 8002930 <setupMPU6050+0x3e8>)
 80028ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b0:	f7fd fe12 	bl	80004d8 <__aeabi_dmul>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	4614      	mov	r4, r2
 80028ba:	461d      	mov	r5, r3
 80028bc:	4b22      	ldr	r3, [pc, #136]	; (8002948 <setupMPU6050+0x400>)
 80028be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028c2:	a31d      	add	r3, pc, #116	; (adr r3, 8002938 <setupMPU6050+0x3f0>)
 80028c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c8:	f7fd fe06 	bl	80004d8 <__aeabi_dmul>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	4620      	mov	r0, r4
 80028d2:	4629      	mov	r1, r5
 80028d4:	f7fd fc4a 	bl	800016c <__adddf3>
 80028d8:	4602      	mov	r2, r0
 80028da:	460b      	mov	r3, r1
 80028dc:	4610      	mov	r0, r2
 80028de:	4619      	mov	r1, r3
 80028e0:	f7fe f8f2 	bl	8000ac8 <__aeabi_d2f>
 80028e4:	4603      	mov	r3, r0
 80028e6:	4a19      	ldr	r2, [pc, #100]	; (800294c <setupMPU6050+0x404>)
 80028e8:	6013      	str	r3, [r2, #0]
		angle = round(roll * 100) / 100;
 80028ea:	4b15      	ldr	r3, [pc, #84]	; (8002940 <setupMPU6050+0x3f8>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4918      	ldr	r1, [pc, #96]	; (8002950 <setupMPU6050+0x408>)
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7fe fa47 	bl	8000d84 <__aeabi_fmul>
 80028f6:	4603      	mov	r3, r0
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7fd fd95 	bl	8000428 <__aeabi_f2d>
 80028fe:	4602      	mov	r2, r0
 8002900:	460b      	mov	r3, r1
 8002902:	4610      	mov	r0, r2
 8002904:	4619      	mov	r1, r3
 8002906:	f00a fe99 	bl	800d63c <round>
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	4b11      	ldr	r3, [pc, #68]	; (8002954 <setupMPU6050+0x40c>)
 8002910:	f7fd ff0c 	bl	800072c <__aeabi_ddiv>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	490f      	ldr	r1, [pc, #60]	; (8002958 <setupMPU6050+0x410>)
 800291a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800291e:	bf00      	nop
 8002920:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002924:	f3af 8000 	nop.w
 8002928:	47ae147b 	.word	0x47ae147b
 800292c:	3f947ae1 	.word	0x3f947ae1
 8002930:	eb851eb8 	.word	0xeb851eb8
 8002934:	3feeb851 	.word	0x3feeb851
 8002938:	47ae147b 	.word	0x47ae147b
 800293c:	3fa47ae1 	.word	0x3fa47ae1
 8002940:	200004c0 	.word	0x200004c0
 8002944:	200004b8 	.word	0x200004b8
 8002948:	200004a8 	.word	0x200004a8
 800294c:	200004c4 	.word	0x200004c4
 8002950:	42c80000 	.word	0x42c80000
 8002954:	40590000 	.word	0x40590000
 8002958:	20000500 	.word	0x20000500

0800295c <processingADC>:


void processingADC(){
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, &readvalue, 1);
 8002960:	2201      	movs	r2, #1
 8002962:	4903      	ldr	r1, [pc, #12]	; (8002970 <processingADC+0x14>)
 8002964:	4803      	ldr	r0, [pc, #12]	; (8002974 <processingADC+0x18>)
 8002966:	f000 fff9 	bl	800395c <HAL_ADC_Start_DMA>
}
 800296a:	bf00      	nop
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	2000052c 	.word	0x2000052c
 8002974:	20000218 	.word	0x20000218

08002978 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 800297c:	f000 fe90 	bl	80036a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002980:	f000 f854 	bl	8002a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002984:	f000 faac 	bl	8002ee0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002988:	f000 fa8c 	bl	8002ea4 <MX_DMA_Init>
  MX_I2C1_Init();
 800298c:	f000 f8e2 	bl	8002b54 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002990:	f000 f90e 	bl	8002bb0 <MX_I2C2_Init>
  MX_TIM3_Init();
 8002994:	f000 f9dc 	bl	8002d50 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8002998:	f000 fa5a 	bl	8002e50 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800299c:	f000 f89c 	bl	8002ad8 <MX_ADC1_Init>
  MX_TIM1_Init();
 80029a0:	f000 f934 	bl	8002c0c <MX_TIM1_Init>
  MX_TIM2_Init();
 80029a4:	f000 f982 	bl	8002cac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80029a8:	f7fe fdca 	bl	8001540 <lcd_init>
  lcd_send_string("DELIVERY ROBOT");
 80029ac:	4818      	ldr	r0, [pc, #96]	; (8002a10 <main+0x98>)
 80029ae:	f7fe fdf5 	bl	800159c <lcd_send_string>
  MPU6050_init();
 80029b2:	f7fe fc0b 	bl	80011cc <MPU6050_init>
  calculateError();
 80029b6:	f7ff fa67 	bl	8001e88 <calculateError>
  HAL_Delay(20);
 80029ba:	2014      	movs	r0, #20
 80029bc:	f000 fed2 	bl	8003764 <HAL_Delay>
  HAL_UART_Receive_IT(&huart1,&r_data,1);
 80029c0:	2201      	movs	r2, #1
 80029c2:	4914      	ldr	r1, [pc, #80]	; (8002a14 <main+0x9c>)
 80029c4:	4814      	ldr	r0, [pc, #80]	; (8002a18 <main+0xa0>)
 80029c6:	f005 fa6e 	bl	8007ea6 <HAL_UART_Receive_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80029ca:	2100      	movs	r1, #0
 80029cc:	4813      	ldr	r0, [pc, #76]	; (8002a1c <main+0xa4>)
 80029ce:	f004 f8db 	bl	8006b88 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80029d2:	4812      	ldr	r0, [pc, #72]	; (8002a1c <main+0xa4>)
 80029d4:	f003 ff3c 	bl	8006850 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);                        //Interrupt for Data light sensor
 80029d8:	4811      	ldr	r0, [pc, #68]	; (8002a20 <main+0xa8>)
 80029da:	f003 ff39 	bl	8006850 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim3);							//Initialize stm32 timer 3
 80029de:	4811      	ldr	r0, [pc, #68]	; (8002a24 <main+0xac>)
 80029e0:	f003 feec 	bl	80067bc <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);				//PB0 Start pwm second motor( 3-4) 100% duty cycle
 80029e4:	2108      	movs	r1, #8
 80029e6:	480f      	ldr	r0, [pc, #60]	; (8002a24 <main+0xac>)
 80029e8:	f003 ffdc 	bl	80069a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);				//PB1 Start pwm first motor( 1-2)  100% duty cycle
 80029ec:	210c      	movs	r1, #12
 80029ee:	480d      	ldr	r0, [pc, #52]	; (8002a24 <main+0xac>)
 80029f0:	f003 ffd8 	bl	80069a4 <HAL_TIM_PWM_Start>
  currentTime = HAL_GetTick();
 80029f4:	f000 feac 	bl	8003750 <HAL_GetTick>
 80029f8:	4603      	mov	r3, r0
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fe f96a 	bl	8000cd4 <__aeabi_ui2f>
 8002a00:	4603      	mov	r3, r0
 8002a02:	4a09      	ldr	r2, [pc, #36]	; (8002a28 <main+0xb0>)
 8002a04:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	setupMPU6050();
 8002a06:	f7ff fd9f 	bl	8002548 <setupMPU6050>
	processing();
 8002a0a:	f7ff fd0f 	bl	800242c <processing>
	setupMPU6050();
 8002a0e:	e7fa      	b.n	8002a06 <main+0x8e>
 8002a10:	0800e520 	.word	0x0800e520
 8002a14:	2000046c 	.word	0x2000046c
 8002a18:	2000040c 	.word	0x2000040c
 8002a1c:	2000037c 	.word	0x2000037c
 8002a20:	20000334 	.word	0x20000334
 8002a24:	200003c4 	.word	0x200003c4
 8002a28:	20000520 	.word	0x20000520

08002a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b094      	sub	sp, #80	; 0x50
 8002a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a36:	2228      	movs	r2, #40	; 0x28
 8002a38:	2100      	movs	r1, #0
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f006 f802 	bl	8008a44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a40:	f107 0314 	add.w	r3, r7, #20
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	605a      	str	r2, [r3, #4]
 8002a4a:	609a      	str	r2, [r3, #8]
 8002a4c:	60da      	str	r2, [r3, #12]
 8002a4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a50:	1d3b      	adds	r3, r7, #4
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	605a      	str	r2, [r3, #4]
 8002a58:	609a      	str	r2, [r3, #8]
 8002a5a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a60:	2301      	movs	r3, #1
 8002a62:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a64:	2310      	movs	r3, #16
 8002a66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8002a70:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002a74:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f003 f988 	bl	8005d90 <HAL_RCC_OscConfig>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002a86:	f000 faaf 	bl	8002fe8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a8a:	230f      	movs	r3, #15
 8002a8c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a8e:	2302      	movs	r3, #2
 8002a90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a92:	2300      	movs	r3, #0
 8002a94:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a96:	2300      	movs	r3, #0
 8002a98:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002a9e:	f107 0314 	add.w	r3, r7, #20
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f003 fbf5 	bl	8006294 <HAL_RCC_ClockConfig>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002ab0:	f000 fa9a 	bl	8002fe8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002abc:	1d3b      	adds	r3, r7, #4
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f003 fd76 	bl	80065b0 <HAL_RCCEx_PeriphCLKConfig>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8002aca:	f000 fa8d 	bl	8002fe8 <Error_Handler>
  }
}
 8002ace:	bf00      	nop
 8002ad0:	3750      	adds	r7, #80	; 0x50
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002ade:	1d3b      	adds	r3, r7, #4
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	605a      	str	r2, [r3, #4]
 8002ae6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002ae8:	4b18      	ldr	r3, [pc, #96]	; (8002b4c <MX_ADC1_Init+0x74>)
 8002aea:	4a19      	ldr	r2, [pc, #100]	; (8002b50 <MX_ADC1_Init+0x78>)
 8002aec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002aee:	4b17      	ldr	r3, [pc, #92]	; (8002b4c <MX_ADC1_Init+0x74>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002af4:	4b15      	ldr	r3, [pc, #84]	; (8002b4c <MX_ADC1_Init+0x74>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002afa:	4b14      	ldr	r3, [pc, #80]	; (8002b4c <MX_ADC1_Init+0x74>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b00:	4b12      	ldr	r3, [pc, #72]	; (8002b4c <MX_ADC1_Init+0x74>)
 8002b02:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002b06:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b08:	4b10      	ldr	r3, [pc, #64]	; (8002b4c <MX_ADC1_Init+0x74>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002b0e:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <MX_ADC1_Init+0x74>)
 8002b10:	2201      	movs	r2, #1
 8002b12:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b14:	480d      	ldr	r0, [pc, #52]	; (8002b4c <MX_ADC1_Init+0x74>)
 8002b16:	f000 fe49 	bl	80037ac <HAL_ADC_Init>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002b20:	f000 fa62 	bl	8002fe8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002b24:	2306      	movs	r3, #6
 8002b26:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b30:	1d3b      	adds	r3, r7, #4
 8002b32:	4619      	mov	r1, r3
 8002b34:	4805      	ldr	r0, [pc, #20]	; (8002b4c <MX_ADC1_Init+0x74>)
 8002b36:	f001 f80b 	bl	8003b50 <HAL_ADC_ConfigChannel>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002b40:	f000 fa52 	bl	8002fe8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002b44:	bf00      	nop
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	20000218 	.word	0x20000218
 8002b50:	40012400 	.word	0x40012400

08002b54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b58:	4b12      	ldr	r3, [pc, #72]	; (8002ba4 <MX_I2C1_Init+0x50>)
 8002b5a:	4a13      	ldr	r2, [pc, #76]	; (8002ba8 <MX_I2C1_Init+0x54>)
 8002b5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002b5e:	4b11      	ldr	r3, [pc, #68]	; (8002ba4 <MX_I2C1_Init+0x50>)
 8002b60:	4a12      	ldr	r2, [pc, #72]	; (8002bac <MX_I2C1_Init+0x58>)
 8002b62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b64:	4b0f      	ldr	r3, [pc, #60]	; (8002ba4 <MX_I2C1_Init+0x50>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002b6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ba4 <MX_I2C1_Init+0x50>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b70:	4b0c      	ldr	r3, [pc, #48]	; (8002ba4 <MX_I2C1_Init+0x50>)
 8002b72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b78:	4b0a      	ldr	r3, [pc, #40]	; (8002ba4 <MX_I2C1_Init+0x50>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002b7e:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <MX_I2C1_Init+0x50>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b84:	4b07      	ldr	r3, [pc, #28]	; (8002ba4 <MX_I2C1_Init+0x50>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b8a:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <MX_I2C1_Init+0x50>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b90:	4804      	ldr	r0, [pc, #16]	; (8002ba4 <MX_I2C1_Init+0x50>)
 8002b92:	f001 ff23 	bl	80049dc <HAL_I2C_Init>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002b9c:	f000 fa24 	bl	8002fe8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ba0:	bf00      	nop
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	2000028c 	.word	0x2000028c
 8002ba8:	40005400 	.word	0x40005400
 8002bac:	000186a0 	.word	0x000186a0

08002bb0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002bb4:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <MX_I2C2_Init+0x50>)
 8002bb6:	4a13      	ldr	r2, [pc, #76]	; (8002c04 <MX_I2C2_Init+0x54>)
 8002bb8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002bba:	4b11      	ldr	r3, [pc, #68]	; (8002c00 <MX_I2C2_Init+0x50>)
 8002bbc:	4a12      	ldr	r2, [pc, #72]	; (8002c08 <MX_I2C2_Init+0x58>)
 8002bbe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002bc0:	4b0f      	ldr	r3, [pc, #60]	; (8002c00 <MX_I2C2_Init+0x50>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002bc6:	4b0e      	ldr	r3, [pc, #56]	; (8002c00 <MX_I2C2_Init+0x50>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bcc:	4b0c      	ldr	r3, [pc, #48]	; (8002c00 <MX_I2C2_Init+0x50>)
 8002bce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002bd2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bd4:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <MX_I2C2_Init+0x50>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002bda:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <MX_I2C2_Init+0x50>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002be0:	4b07      	ldr	r3, [pc, #28]	; (8002c00 <MX_I2C2_Init+0x50>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002be6:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <MX_I2C2_Init+0x50>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002bec:	4804      	ldr	r0, [pc, #16]	; (8002c00 <MX_I2C2_Init+0x50>)
 8002bee:	f001 fef5 	bl	80049dc <HAL_I2C_Init>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002bf8:	f000 f9f6 	bl	8002fe8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002bfc:	bf00      	nop
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	200002e0 	.word	0x200002e0
 8002c04:	40005800 	.word	0x40005800
 8002c08:	000186a0 	.word	0x000186a0

08002c0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c12:	f107 0308 	add.w	r3, r7, #8
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	605a      	str	r2, [r3, #4]
 8002c1c:	609a      	str	r2, [r3, #8]
 8002c1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c20:	463b      	mov	r3, r7
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002c28:	4b1e      	ldr	r3, [pc, #120]	; (8002ca4 <MX_TIM1_Init+0x98>)
 8002c2a:	4a1f      	ldr	r2, [pc, #124]	; (8002ca8 <MX_TIM1_Init+0x9c>)
 8002c2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 249;
 8002c2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ca4 <MX_TIM1_Init+0x98>)
 8002c30:	22f9      	movs	r2, #249	; 0xf9
 8002c32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c34:	4b1b      	ldr	r3, [pc, #108]	; (8002ca4 <MX_TIM1_Init+0x98>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 63999;
 8002c3a:	4b1a      	ldr	r3, [pc, #104]	; (8002ca4 <MX_TIM1_Init+0x98>)
 8002c3c:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8002c40:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c42:	4b18      	ldr	r3, [pc, #96]	; (8002ca4 <MX_TIM1_Init+0x98>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002c48:	4b16      	ldr	r3, [pc, #88]	; (8002ca4 <MX_TIM1_Init+0x98>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c4e:	4b15      	ldr	r3, [pc, #84]	; (8002ca4 <MX_TIM1_Init+0x98>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002c54:	4813      	ldr	r0, [pc, #76]	; (8002ca4 <MX_TIM1_Init+0x98>)
 8002c56:	f003 fd61 	bl	800671c <HAL_TIM_Base_Init>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002c60:	f000 f9c2 	bl	8002fe8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002c6a:	f107 0308 	add.w	r3, r7, #8
 8002c6e:	4619      	mov	r1, r3
 8002c70:	480c      	ldr	r0, [pc, #48]	; (8002ca4 <MX_TIM1_Init+0x98>)
 8002c72:	f004 fafb 	bl	800726c <HAL_TIM_ConfigClockSource>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002c7c:	f000 f9b4 	bl	8002fe8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c80:	2300      	movs	r3, #0
 8002c82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c84:	2300      	movs	r3, #0
 8002c86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002c88:	463b      	mov	r3, r7
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4805      	ldr	r0, [pc, #20]	; (8002ca4 <MX_TIM1_Init+0x98>)
 8002c8e:	f004 ffc7 	bl	8007c20 <HAL_TIMEx_MasterConfigSynchronization>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002c98:	f000 f9a6 	bl	8002fe8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002c9c:	bf00      	nop
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	20000334 	.word	0x20000334
 8002ca8:	40012c00 	.word	0x40012c00

08002cac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cb2:	f107 0310 	add.w	r3, r7, #16
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002cbc:	463b      	mov	r3, r7
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	605a      	str	r2, [r3, #4]
 8002cc4:	609a      	str	r2, [r3, #8]
 8002cc6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002cc8:	4b20      	ldr	r3, [pc, #128]	; (8002d4c <MX_TIM2_Init+0xa0>)
 8002cca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002cce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8002cd0:	4b1e      	ldr	r3, [pc, #120]	; (8002d4c <MX_TIM2_Init+0xa0>)
 8002cd2:	220f      	movs	r2, #15
 8002cd4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cd6:	4b1d      	ldr	r3, [pc, #116]	; (8002d4c <MX_TIM2_Init+0xa0>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8002cdc:	4b1b      	ldr	r3, [pc, #108]	; (8002d4c <MX_TIM2_Init+0xa0>)
 8002cde:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002ce2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ce4:	4b19      	ldr	r3, [pc, #100]	; (8002d4c <MX_TIM2_Init+0xa0>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cea:	4b18      	ldr	r3, [pc, #96]	; (8002d4c <MX_TIM2_Init+0xa0>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002cf0:	4816      	ldr	r0, [pc, #88]	; (8002d4c <MX_TIM2_Init+0xa0>)
 8002cf2:	f003 fef9 	bl	8006ae8 <HAL_TIM_IC_Init>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002cfc:	f000 f974 	bl	8002fe8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d00:	2300      	movs	r3, #0
 8002d02:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d04:	2300      	movs	r3, #0
 8002d06:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d08:	f107 0310 	add.w	r3, r7, #16
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	480f      	ldr	r0, [pc, #60]	; (8002d4c <MX_TIM2_Init+0xa0>)
 8002d10:	f004 ff86 	bl	8007c20 <HAL_TIMEx_MasterConfigSynchronization>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002d1a:	f000 f965 	bl	8002fe8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002d22:	2301      	movs	r3, #1
 8002d24:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002d26:	2300      	movs	r3, #0
 8002d28:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002d2e:	463b      	mov	r3, r7
 8002d30:	2200      	movs	r2, #0
 8002d32:	4619      	mov	r1, r3
 8002d34:	4805      	ldr	r0, [pc, #20]	; (8002d4c <MX_TIM2_Init+0xa0>)
 8002d36:	f004 f93b 	bl	8006fb0 <HAL_TIM_IC_ConfigChannel>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8002d40:	f000 f952 	bl	8002fe8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002d44:	bf00      	nop
 8002d46:	3718      	adds	r7, #24
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	2000037c 	.word	0x2000037c

08002d50 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b08e      	sub	sp, #56	; 0x38
 8002d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	605a      	str	r2, [r3, #4]
 8002d60:	609a      	str	r2, [r3, #8]
 8002d62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d64:	f107 0320 	add.w	r3, r7, #32
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d6e:	1d3b      	adds	r3, r7, #4
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	605a      	str	r2, [r3, #4]
 8002d76:	609a      	str	r2, [r3, #8]
 8002d78:	60da      	str	r2, [r3, #12]
 8002d7a:	611a      	str	r2, [r3, #16]
 8002d7c:	615a      	str	r2, [r3, #20]
 8002d7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d80:	4b31      	ldr	r3, [pc, #196]	; (8002e48 <MX_TIM3_Init+0xf8>)
 8002d82:	4a32      	ldr	r2, [pc, #200]	; (8002e4c <MX_TIM3_Init+0xfc>)
 8002d84:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8002d86:	4b30      	ldr	r3, [pc, #192]	; (8002e48 <MX_TIM3_Init+0xf8>)
 8002d88:	2207      	movs	r2, #7
 8002d8a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d8c:	4b2e      	ldr	r3, [pc, #184]	; (8002e48 <MX_TIM3_Init+0xf8>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8002d92:	4b2d      	ldr	r3, [pc, #180]	; (8002e48 <MX_TIM3_Init+0xf8>)
 8002d94:	2263      	movs	r2, #99	; 0x63
 8002d96:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d98:	4b2b      	ldr	r3, [pc, #172]	; (8002e48 <MX_TIM3_Init+0xf8>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d9e:	4b2a      	ldr	r3, [pc, #168]	; (8002e48 <MX_TIM3_Init+0xf8>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002da4:	4828      	ldr	r0, [pc, #160]	; (8002e48 <MX_TIM3_Init+0xf8>)
 8002da6:	f003 fcb9 	bl	800671c <HAL_TIM_Base_Init>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8002db0:	f000 f91a 	bl	8002fe8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002db4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002db8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002dba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4821      	ldr	r0, [pc, #132]	; (8002e48 <MX_TIM3_Init+0xf8>)
 8002dc2:	f004 fa53 	bl	800726c <HAL_TIM_ConfigClockSource>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8002dcc:	f000 f90c 	bl	8002fe8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002dd0:	481d      	ldr	r0, [pc, #116]	; (8002e48 <MX_TIM3_Init+0xf8>)
 8002dd2:	f003 fd8f 	bl	80068f4 <HAL_TIM_PWM_Init>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8002ddc:	f000 f904 	bl	8002fe8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002de0:	2300      	movs	r3, #0
 8002de2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002de4:	2300      	movs	r3, #0
 8002de6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002de8:	f107 0320 	add.w	r3, r7, #32
 8002dec:	4619      	mov	r1, r3
 8002dee:	4816      	ldr	r0, [pc, #88]	; (8002e48 <MX_TIM3_Init+0xf8>)
 8002df0:	f004 ff16 	bl	8007c20 <HAL_TIMEx_MasterConfigSynchronization>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8002dfa:	f000 f8f5 	bl	8002fe8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002dfe:	2360      	movs	r3, #96	; 0x60
 8002e00:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e02:	2300      	movs	r3, #0
 8002e04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e06:	2300      	movs	r3, #0
 8002e08:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e0e:	1d3b      	adds	r3, r7, #4
 8002e10:	2208      	movs	r2, #8
 8002e12:	4619      	mov	r1, r3
 8002e14:	480c      	ldr	r0, [pc, #48]	; (8002e48 <MX_TIM3_Init+0xf8>)
 8002e16:	f004 f967 	bl	80070e8 <HAL_TIM_PWM_ConfigChannel>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8002e20:	f000 f8e2 	bl	8002fe8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002e24:	1d3b      	adds	r3, r7, #4
 8002e26:	220c      	movs	r2, #12
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4807      	ldr	r0, [pc, #28]	; (8002e48 <MX_TIM3_Init+0xf8>)
 8002e2c:	f004 f95c 	bl	80070e8 <HAL_TIM_PWM_ConfigChannel>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8002e36:	f000 f8d7 	bl	8002fe8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002e3a:	4803      	ldr	r0, [pc, #12]	; (8002e48 <MX_TIM3_Init+0xf8>)
 8002e3c:	f000 fa6e 	bl	800331c <HAL_TIM_MspPostInit>

}
 8002e40:	bf00      	nop
 8002e42:	3738      	adds	r7, #56	; 0x38
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	200003c4 	.word	0x200003c4
 8002e4c:	40000400 	.word	0x40000400

08002e50 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e54:	4b11      	ldr	r3, [pc, #68]	; (8002e9c <MX_USART1_UART_Init+0x4c>)
 8002e56:	4a12      	ldr	r2, [pc, #72]	; (8002ea0 <MX_USART1_UART_Init+0x50>)
 8002e58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002e5a:	4b10      	ldr	r3, [pc, #64]	; (8002e9c <MX_USART1_UART_Init+0x4c>)
 8002e5c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002e60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e62:	4b0e      	ldr	r3, [pc, #56]	; (8002e9c <MX_USART1_UART_Init+0x4c>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e68:	4b0c      	ldr	r3, [pc, #48]	; (8002e9c <MX_USART1_UART_Init+0x4c>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e6e:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <MX_USART1_UART_Init+0x4c>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e74:	4b09      	ldr	r3, [pc, #36]	; (8002e9c <MX_USART1_UART_Init+0x4c>)
 8002e76:	220c      	movs	r2, #12
 8002e78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e7a:	4b08      	ldr	r3, [pc, #32]	; (8002e9c <MX_USART1_UART_Init+0x4c>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e80:	4b06      	ldr	r3, [pc, #24]	; (8002e9c <MX_USART1_UART_Init+0x4c>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e86:	4805      	ldr	r0, [pc, #20]	; (8002e9c <MX_USART1_UART_Init+0x4c>)
 8002e88:	f004 ff3a 	bl	8007d00 <HAL_UART_Init>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002e92:	f000 f8a9 	bl	8002fe8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e96:	bf00      	nop
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	2000040c 	.word	0x2000040c
 8002ea0:	40013800 	.word	0x40013800

08002ea4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002eaa:	4b0c      	ldr	r3, [pc, #48]	; (8002edc <MX_DMA_Init+0x38>)
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	4a0b      	ldr	r2, [pc, #44]	; (8002edc <MX_DMA_Init+0x38>)
 8002eb0:	f043 0301 	orr.w	r3, r3, #1
 8002eb4:	6153      	str	r3, [r2, #20]
 8002eb6:	4b09      	ldr	r3, [pc, #36]	; (8002edc <MX_DMA_Init+0x38>)
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	607b      	str	r3, [r7, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	200b      	movs	r0, #11
 8002ec8:	f001 f913 	bl	80040f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002ecc:	200b      	movs	r0, #11
 8002ece:	f001 f92c 	bl	800412a <HAL_NVIC_EnableIRQ>

}
 8002ed2:	bf00      	nop
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40021000 	.word	0x40021000

08002ee0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b088      	sub	sp, #32
 8002ee4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee6:	f107 0310 	add.w	r3, r7, #16
 8002eea:	2200      	movs	r2, #0
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	605a      	str	r2, [r3, #4]
 8002ef0:	609a      	str	r2, [r3, #8]
 8002ef2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ef4:	4b38      	ldr	r3, [pc, #224]	; (8002fd8 <MX_GPIO_Init+0xf8>)
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	4a37      	ldr	r2, [pc, #220]	; (8002fd8 <MX_GPIO_Init+0xf8>)
 8002efa:	f043 0310 	orr.w	r3, r3, #16
 8002efe:	6193      	str	r3, [r2, #24]
 8002f00:	4b35      	ldr	r3, [pc, #212]	; (8002fd8 <MX_GPIO_Init+0xf8>)
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	f003 0310 	and.w	r3, r3, #16
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f0c:	4b32      	ldr	r3, [pc, #200]	; (8002fd8 <MX_GPIO_Init+0xf8>)
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	4a31      	ldr	r2, [pc, #196]	; (8002fd8 <MX_GPIO_Init+0xf8>)
 8002f12:	f043 0320 	orr.w	r3, r3, #32
 8002f16:	6193      	str	r3, [r2, #24]
 8002f18:	4b2f      	ldr	r3, [pc, #188]	; (8002fd8 <MX_GPIO_Init+0xf8>)
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	f003 0320 	and.w	r3, r3, #32
 8002f20:	60bb      	str	r3, [r7, #8]
 8002f22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f24:	4b2c      	ldr	r3, [pc, #176]	; (8002fd8 <MX_GPIO_Init+0xf8>)
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	4a2b      	ldr	r2, [pc, #172]	; (8002fd8 <MX_GPIO_Init+0xf8>)
 8002f2a:	f043 0304 	orr.w	r3, r3, #4
 8002f2e:	6193      	str	r3, [r2, #24]
 8002f30:	4b29      	ldr	r3, [pc, #164]	; (8002fd8 <MX_GPIO_Init+0xf8>)
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	607b      	str	r3, [r7, #4]
 8002f3a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f3c:	4b26      	ldr	r3, [pc, #152]	; (8002fd8 <MX_GPIO_Init+0xf8>)
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	4a25      	ldr	r2, [pc, #148]	; (8002fd8 <MX_GPIO_Init+0xf8>)
 8002f42:	f043 0308 	orr.w	r3, r3, #8
 8002f46:	6193      	str	r3, [r2, #24]
 8002f48:	4b23      	ldr	r3, [pc, #140]	; (8002fd8 <MX_GPIO_Init+0xf8>)
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	f003 0308 	and.w	r3, r3, #8
 8002f50:	603b      	str	r3, [r7, #0]
 8002f52:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002f54:	2200      	movs	r2, #0
 8002f56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f5a:	4820      	ldr	r0, [pc, #128]	; (8002fdc <MX_GPIO_Init+0xfc>)
 8002f5c:	f001 fd26 	bl	80049ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8002f60:	2200      	movs	r2, #0
 8002f62:	211e      	movs	r1, #30
 8002f64:	481e      	ldr	r0, [pc, #120]	; (8002fe0 <MX_GPIO_Init+0x100>)
 8002f66:	f001 fd21 	bl	80049ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f70:	481c      	ldr	r0, [pc, #112]	; (8002fe4 <MX_GPIO_Init+0x104>)
 8002f72:	f001 fd1b 	bl	80049ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002f76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f80:	2300      	movs	r3, #0
 8002f82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f84:	2302      	movs	r3, #2
 8002f86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f88:	f107 0310 	add.w	r3, r7, #16
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4813      	ldr	r0, [pc, #76]	; (8002fdc <MX_GPIO_Init+0xfc>)
 8002f90:	f001 fb88 	bl	80046a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8002f94:	231e      	movs	r3, #30
 8002f96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fa4:	f107 0310 	add.w	r3, r7, #16
 8002fa8:	4619      	mov	r1, r3
 8002faa:	480d      	ldr	r0, [pc, #52]	; (8002fe0 <MX_GPIO_Init+0x100>)
 8002fac:	f001 fb7a 	bl	80046a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002fb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fc2:	f107 0310 	add.w	r3, r7, #16
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4806      	ldr	r0, [pc, #24]	; (8002fe4 <MX_GPIO_Init+0x104>)
 8002fca:	f001 fb6b 	bl	80046a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002fce:	bf00      	nop
 8002fd0:	3720      	adds	r7, #32
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	40011000 	.word	0x40011000
 8002fe0:	40010800 	.word	0x40010800
 8002fe4:	40010c00 	.word	0x40010c00

08002fe8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fec:	b672      	cpsid	i
}
 8002fee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ff0:	e7fe      	b.n	8002ff0 <Error_Handler+0x8>
	...

08002ff4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ffa:	4b15      	ldr	r3, [pc, #84]	; (8003050 <HAL_MspInit+0x5c>)
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	4a14      	ldr	r2, [pc, #80]	; (8003050 <HAL_MspInit+0x5c>)
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	6193      	str	r3, [r2, #24]
 8003006:	4b12      	ldr	r3, [pc, #72]	; (8003050 <HAL_MspInit+0x5c>)
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	60bb      	str	r3, [r7, #8]
 8003010:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003012:	4b0f      	ldr	r3, [pc, #60]	; (8003050 <HAL_MspInit+0x5c>)
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	4a0e      	ldr	r2, [pc, #56]	; (8003050 <HAL_MspInit+0x5c>)
 8003018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800301c:	61d3      	str	r3, [r2, #28]
 800301e:	4b0c      	ldr	r3, [pc, #48]	; (8003050 <HAL_MspInit+0x5c>)
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003026:	607b      	str	r3, [r7, #4]
 8003028:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800302a:	4b0a      	ldr	r3, [pc, #40]	; (8003054 <HAL_MspInit+0x60>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	4a04      	ldr	r2, [pc, #16]	; (8003054 <HAL_MspInit+0x60>)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003046:	bf00      	nop
 8003048:	3714      	adds	r7, #20
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr
 8003050:	40021000 	.word	0x40021000
 8003054:	40010000 	.word	0x40010000

08003058 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b088      	sub	sp, #32
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003060:	f107 0310 	add.w	r3, r7, #16
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	605a      	str	r2, [r3, #4]
 800306a:	609a      	str	r2, [r3, #8]
 800306c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a28      	ldr	r2, [pc, #160]	; (8003114 <HAL_ADC_MspInit+0xbc>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d149      	bne.n	800310c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003078:	4b27      	ldr	r3, [pc, #156]	; (8003118 <HAL_ADC_MspInit+0xc0>)
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	4a26      	ldr	r2, [pc, #152]	; (8003118 <HAL_ADC_MspInit+0xc0>)
 800307e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003082:	6193      	str	r3, [r2, #24]
 8003084:	4b24      	ldr	r3, [pc, #144]	; (8003118 <HAL_ADC_MspInit+0xc0>)
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003090:	4b21      	ldr	r3, [pc, #132]	; (8003118 <HAL_ADC_MspInit+0xc0>)
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	4a20      	ldr	r2, [pc, #128]	; (8003118 <HAL_ADC_MspInit+0xc0>)
 8003096:	f043 0304 	orr.w	r3, r3, #4
 800309a:	6193      	str	r3, [r2, #24]
 800309c:	4b1e      	ldr	r3, [pc, #120]	; (8003118 <HAL_ADC_MspInit+0xc0>)
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	60bb      	str	r3, [r7, #8]
 80030a6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80030a8:	2340      	movs	r3, #64	; 0x40
 80030aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030ac:	2303      	movs	r3, #3
 80030ae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030b0:	f107 0310 	add.w	r3, r7, #16
 80030b4:	4619      	mov	r1, r3
 80030b6:	4819      	ldr	r0, [pc, #100]	; (800311c <HAL_ADC_MspInit+0xc4>)
 80030b8:	f001 faf4 	bl	80046a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80030bc:	4b18      	ldr	r3, [pc, #96]	; (8003120 <HAL_ADC_MspInit+0xc8>)
 80030be:	4a19      	ldr	r2, [pc, #100]	; (8003124 <HAL_ADC_MspInit+0xcc>)
 80030c0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030c2:	4b17      	ldr	r3, [pc, #92]	; (8003120 <HAL_ADC_MspInit+0xc8>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80030c8:	4b15      	ldr	r3, [pc, #84]	; (8003120 <HAL_ADC_MspInit+0xc8>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80030ce:	4b14      	ldr	r3, [pc, #80]	; (8003120 <HAL_ADC_MspInit+0xc8>)
 80030d0:	2280      	movs	r2, #128	; 0x80
 80030d2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80030d4:	4b12      	ldr	r3, [pc, #72]	; (8003120 <HAL_ADC_MspInit+0xc8>)
 80030d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030da:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80030dc:	4b10      	ldr	r3, [pc, #64]	; (8003120 <HAL_ADC_MspInit+0xc8>)
 80030de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030e2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80030e4:	4b0e      	ldr	r3, [pc, #56]	; (8003120 <HAL_ADC_MspInit+0xc8>)
 80030e6:	2220      	movs	r2, #32
 80030e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80030ea:	4b0d      	ldr	r3, [pc, #52]	; (8003120 <HAL_ADC_MspInit+0xc8>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80030f0:	480b      	ldr	r0, [pc, #44]	; (8003120 <HAL_ADC_MspInit+0xc8>)
 80030f2:	f001 f835 	bl	8004160 <HAL_DMA_Init>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80030fc:	f7ff ff74 	bl	8002fe8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a07      	ldr	r2, [pc, #28]	; (8003120 <HAL_ADC_MspInit+0xc8>)
 8003104:	621a      	str	r2, [r3, #32]
 8003106:	4a06      	ldr	r2, [pc, #24]	; (8003120 <HAL_ADC_MspInit+0xc8>)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800310c:	bf00      	nop
 800310e:	3720      	adds	r7, #32
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40012400 	.word	0x40012400
 8003118:	40021000 	.word	0x40021000
 800311c:	40010800 	.word	0x40010800
 8003120:	20000248 	.word	0x20000248
 8003124:	40020008 	.word	0x40020008

08003128 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08c      	sub	sp, #48	; 0x30
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003130:	f107 031c 	add.w	r3, r7, #28
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	605a      	str	r2, [r3, #4]
 800313a:	609a      	str	r2, [r3, #8]
 800313c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a32      	ldr	r2, [pc, #200]	; (800320c <HAL_I2C_MspInit+0xe4>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d133      	bne.n	80031b0 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003148:	4b31      	ldr	r3, [pc, #196]	; (8003210 <HAL_I2C_MspInit+0xe8>)
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	4a30      	ldr	r2, [pc, #192]	; (8003210 <HAL_I2C_MspInit+0xe8>)
 800314e:	f043 0308 	orr.w	r3, r3, #8
 8003152:	6193      	str	r3, [r2, #24]
 8003154:	4b2e      	ldr	r3, [pc, #184]	; (8003210 <HAL_I2C_MspInit+0xe8>)
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	f003 0308 	and.w	r3, r3, #8
 800315c:	61bb      	str	r3, [r7, #24]
 800315e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003160:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003166:	2312      	movs	r3, #18
 8003168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800316a:	2303      	movs	r3, #3
 800316c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800316e:	f107 031c 	add.w	r3, r7, #28
 8003172:	4619      	mov	r1, r3
 8003174:	4827      	ldr	r0, [pc, #156]	; (8003214 <HAL_I2C_MspInit+0xec>)
 8003176:	f001 fa95 	bl	80046a4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800317a:	4b27      	ldr	r3, [pc, #156]	; (8003218 <HAL_I2C_MspInit+0xf0>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003182:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003186:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318a:	f043 0302 	orr.w	r3, r3, #2
 800318e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003190:	4a21      	ldr	r2, [pc, #132]	; (8003218 <HAL_I2C_MspInit+0xf0>)
 8003192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003194:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003196:	4b1e      	ldr	r3, [pc, #120]	; (8003210 <HAL_I2C_MspInit+0xe8>)
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	4a1d      	ldr	r2, [pc, #116]	; (8003210 <HAL_I2C_MspInit+0xe8>)
 800319c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031a0:	61d3      	str	r3, [r2, #28]
 80031a2:	4b1b      	ldr	r3, [pc, #108]	; (8003210 <HAL_I2C_MspInit+0xe8>)
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80031ae:	e029      	b.n	8003204 <HAL_I2C_MspInit+0xdc>
  else if(hi2c->Instance==I2C2)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a19      	ldr	r2, [pc, #100]	; (800321c <HAL_I2C_MspInit+0xf4>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d124      	bne.n	8003204 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ba:	4b15      	ldr	r3, [pc, #84]	; (8003210 <HAL_I2C_MspInit+0xe8>)
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	4a14      	ldr	r2, [pc, #80]	; (8003210 <HAL_I2C_MspInit+0xe8>)
 80031c0:	f043 0308 	orr.w	r3, r3, #8
 80031c4:	6193      	str	r3, [r2, #24]
 80031c6:	4b12      	ldr	r3, [pc, #72]	; (8003210 <HAL_I2C_MspInit+0xe8>)
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	613b      	str	r3, [r7, #16]
 80031d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80031d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80031d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031d8:	2312      	movs	r3, #18
 80031da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031dc:	2303      	movs	r3, #3
 80031de:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031e0:	f107 031c 	add.w	r3, r7, #28
 80031e4:	4619      	mov	r1, r3
 80031e6:	480b      	ldr	r0, [pc, #44]	; (8003214 <HAL_I2C_MspInit+0xec>)
 80031e8:	f001 fa5c 	bl	80046a4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80031ec:	4b08      	ldr	r3, [pc, #32]	; (8003210 <HAL_I2C_MspInit+0xe8>)
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	4a07      	ldr	r2, [pc, #28]	; (8003210 <HAL_I2C_MspInit+0xe8>)
 80031f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031f6:	61d3      	str	r3, [r2, #28]
 80031f8:	4b05      	ldr	r3, [pc, #20]	; (8003210 <HAL_I2C_MspInit+0xe8>)
 80031fa:	69db      	ldr	r3, [r3, #28]
 80031fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	68fb      	ldr	r3, [r7, #12]
}
 8003204:	bf00      	nop
 8003206:	3730      	adds	r7, #48	; 0x30
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40005400 	.word	0x40005400
 8003210:	40021000 	.word	0x40021000
 8003214:	40010c00 	.word	0x40010c00
 8003218:	40010000 	.word	0x40010000
 800321c:	40005800 	.word	0x40005800

08003220 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a16      	ldr	r2, [pc, #88]	; (8003288 <HAL_TIM_Base_MspInit+0x68>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d114      	bne.n	800325c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003232:	4b16      	ldr	r3, [pc, #88]	; (800328c <HAL_TIM_Base_MspInit+0x6c>)
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	4a15      	ldr	r2, [pc, #84]	; (800328c <HAL_TIM_Base_MspInit+0x6c>)
 8003238:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800323c:	6193      	str	r3, [r2, #24]
 800323e:	4b13      	ldr	r3, [pc, #76]	; (800328c <HAL_TIM_Base_MspInit+0x6c>)
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800324a:	2200      	movs	r2, #0
 800324c:	2100      	movs	r1, #0
 800324e:	2019      	movs	r0, #25
 8003250:	f000 ff4f 	bl	80040f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003254:	2019      	movs	r0, #25
 8003256:	f000 ff68 	bl	800412a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800325a:	e010      	b.n	800327e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a0b      	ldr	r2, [pc, #44]	; (8003290 <HAL_TIM_Base_MspInit+0x70>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d10b      	bne.n	800327e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003266:	4b09      	ldr	r3, [pc, #36]	; (800328c <HAL_TIM_Base_MspInit+0x6c>)
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	4a08      	ldr	r2, [pc, #32]	; (800328c <HAL_TIM_Base_MspInit+0x6c>)
 800326c:	f043 0302 	orr.w	r3, r3, #2
 8003270:	61d3      	str	r3, [r2, #28]
 8003272:	4b06      	ldr	r3, [pc, #24]	; (800328c <HAL_TIM_Base_MspInit+0x6c>)
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	60bb      	str	r3, [r7, #8]
 800327c:	68bb      	ldr	r3, [r7, #8]
}
 800327e:	bf00      	nop
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	40012c00 	.word	0x40012c00
 800328c:	40021000 	.word	0x40021000
 8003290:	40000400 	.word	0x40000400

08003294 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b088      	sub	sp, #32
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800329c:	f107 0310 	add.w	r3, r7, #16
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	605a      	str	r2, [r3, #4]
 80032a6:	609a      	str	r2, [r3, #8]
 80032a8:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM2)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b2:	d12b      	bne.n	800330c <HAL_TIM_IC_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032b4:	4b17      	ldr	r3, [pc, #92]	; (8003314 <HAL_TIM_IC_MspInit+0x80>)
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	4a16      	ldr	r2, [pc, #88]	; (8003314 <HAL_TIM_IC_MspInit+0x80>)
 80032ba:	f043 0301 	orr.w	r3, r3, #1
 80032be:	61d3      	str	r3, [r2, #28]
 80032c0:	4b14      	ldr	r3, [pc, #80]	; (8003314 <HAL_TIM_IC_MspInit+0x80>)
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	60fb      	str	r3, [r7, #12]
 80032ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032cc:	4b11      	ldr	r3, [pc, #68]	; (8003314 <HAL_TIM_IC_MspInit+0x80>)
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	4a10      	ldr	r2, [pc, #64]	; (8003314 <HAL_TIM_IC_MspInit+0x80>)
 80032d2:	f043 0304 	orr.w	r3, r3, #4
 80032d6:	6193      	str	r3, [r2, #24]
 80032d8:	4b0e      	ldr	r3, [pc, #56]	; (8003314 <HAL_TIM_IC_MspInit+0x80>)
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	f003 0304 	and.w	r3, r3, #4
 80032e0:	60bb      	str	r3, [r7, #8]
 80032e2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80032e4:	2301      	movs	r3, #1
 80032e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032e8:	2300      	movs	r3, #0
 80032ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ec:	2300      	movs	r3, #0
 80032ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032f0:	f107 0310 	add.w	r3, r7, #16
 80032f4:	4619      	mov	r1, r3
 80032f6:	4808      	ldr	r0, [pc, #32]	; (8003318 <HAL_TIM_IC_MspInit+0x84>)
 80032f8:	f001 f9d4 	bl	80046a4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80032fc:	2200      	movs	r2, #0
 80032fe:	2101      	movs	r1, #1
 8003300:	201c      	movs	r0, #28
 8003302:	f000 fef6 	bl	80040f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003306:	201c      	movs	r0, #28
 8003308:	f000 ff0f 	bl	800412a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800330c:	bf00      	nop
 800330e:	3720      	adds	r7, #32
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40021000 	.word	0x40021000
 8003318:	40010800 	.word	0x40010800

0800331c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b088      	sub	sp, #32
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003324:	f107 0310 	add.w	r3, r7, #16
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	605a      	str	r2, [r3, #4]
 800332e:	609a      	str	r2, [r3, #8]
 8003330:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a0f      	ldr	r2, [pc, #60]	; (8003374 <HAL_TIM_MspPostInit+0x58>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d117      	bne.n	800336c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800333c:	4b0e      	ldr	r3, [pc, #56]	; (8003378 <HAL_TIM_MspPostInit+0x5c>)
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	4a0d      	ldr	r2, [pc, #52]	; (8003378 <HAL_TIM_MspPostInit+0x5c>)
 8003342:	f043 0308 	orr.w	r3, r3, #8
 8003346:	6193      	str	r3, [r2, #24]
 8003348:	4b0b      	ldr	r3, [pc, #44]	; (8003378 <HAL_TIM_MspPostInit+0x5c>)
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	f003 0308 	and.w	r3, r3, #8
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003354:	2303      	movs	r3, #3
 8003356:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003358:	2302      	movs	r3, #2
 800335a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800335c:	2302      	movs	r3, #2
 800335e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003360:	f107 0310 	add.w	r3, r7, #16
 8003364:	4619      	mov	r1, r3
 8003366:	4805      	ldr	r0, [pc, #20]	; (800337c <HAL_TIM_MspPostInit+0x60>)
 8003368:	f001 f99c 	bl	80046a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800336c:	bf00      	nop
 800336e:	3720      	adds	r7, #32
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40000400 	.word	0x40000400
 8003378:	40021000 	.word	0x40021000
 800337c:	40010c00 	.word	0x40010c00

08003380 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b088      	sub	sp, #32
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003388:	f107 0310 	add.w	r3, r7, #16
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	605a      	str	r2, [r3, #4]
 8003392:	609a      	str	r2, [r3, #8]
 8003394:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a20      	ldr	r2, [pc, #128]	; (800341c <HAL_UART_MspInit+0x9c>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d139      	bne.n	8003414 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80033a0:	4b1f      	ldr	r3, [pc, #124]	; (8003420 <HAL_UART_MspInit+0xa0>)
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	4a1e      	ldr	r2, [pc, #120]	; (8003420 <HAL_UART_MspInit+0xa0>)
 80033a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033aa:	6193      	str	r3, [r2, #24]
 80033ac:	4b1c      	ldr	r3, [pc, #112]	; (8003420 <HAL_UART_MspInit+0xa0>)
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033b8:	4b19      	ldr	r3, [pc, #100]	; (8003420 <HAL_UART_MspInit+0xa0>)
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	4a18      	ldr	r2, [pc, #96]	; (8003420 <HAL_UART_MspInit+0xa0>)
 80033be:	f043 0304 	orr.w	r3, r3, #4
 80033c2:	6193      	str	r3, [r2, #24]
 80033c4:	4b16      	ldr	r3, [pc, #88]	; (8003420 <HAL_UART_MspInit+0xa0>)
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	60bb      	str	r3, [r7, #8]
 80033ce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80033d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d6:	2302      	movs	r3, #2
 80033d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033da:	2303      	movs	r3, #3
 80033dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033de:	f107 0310 	add.w	r3, r7, #16
 80033e2:	4619      	mov	r1, r3
 80033e4:	480f      	ldr	r0, [pc, #60]	; (8003424 <HAL_UART_MspInit+0xa4>)
 80033e6:	f001 f95d 	bl	80046a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80033ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f4:	2300      	movs	r3, #0
 80033f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033f8:	f107 0310 	add.w	r3, r7, #16
 80033fc:	4619      	mov	r1, r3
 80033fe:	4809      	ldr	r0, [pc, #36]	; (8003424 <HAL_UART_MspInit+0xa4>)
 8003400:	f001 f950 	bl	80046a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8003404:	2200      	movs	r2, #0
 8003406:	2103      	movs	r1, #3
 8003408:	2025      	movs	r0, #37	; 0x25
 800340a:	f000 fe72 	bl	80040f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800340e:	2025      	movs	r0, #37	; 0x25
 8003410:	f000 fe8b 	bl	800412a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003414:	bf00      	nop
 8003416:	3720      	adds	r7, #32
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40013800 	.word	0x40013800
 8003420:	40021000 	.word	0x40021000
 8003424:	40010800 	.word	0x40010800

08003428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800342c:	e7fe      	b.n	800342c <NMI_Handler+0x4>

0800342e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800342e:	b480      	push	{r7}
 8003430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003432:	e7fe      	b.n	8003432 <HardFault_Handler+0x4>

08003434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003438:	e7fe      	b.n	8003438 <MemManage_Handler+0x4>

0800343a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800343a:	b480      	push	{r7}
 800343c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800343e:	e7fe      	b.n	800343e <BusFault_Handler+0x4>

08003440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003444:	e7fe      	b.n	8003444 <UsageFault_Handler+0x4>

08003446 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003446:	b480      	push	{r7}
 8003448:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800344a:	bf00      	nop
 800344c:	46bd      	mov	sp, r7
 800344e:	bc80      	pop	{r7}
 8003450:	4770      	bx	lr

08003452 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003452:	b480      	push	{r7}
 8003454:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003456:	bf00      	nop
 8003458:	46bd      	mov	sp, r7
 800345a:	bc80      	pop	{r7}
 800345c:	4770      	bx	lr

0800345e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800345e:	b480      	push	{r7}
 8003460:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003462:	bf00      	nop
 8003464:	46bd      	mov	sp, r7
 8003466:	bc80      	pop	{r7}
 8003468:	4770      	bx	lr

0800346a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800346e:	f000 f95d 	bl	800372c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003472:	bf00      	nop
 8003474:	bd80      	pop	{r7, pc}
	...

08003478 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800347c:	4802      	ldr	r0, [pc, #8]	; (8003488 <DMA1_Channel1_IRQHandler+0x10>)
 800347e:	f000 ffdd 	bl	800443c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003482:	bf00      	nop
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	20000248 	.word	0x20000248

0800348c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003490:	4802      	ldr	r0, [pc, #8]	; (800349c <TIM1_UP_IRQHandler+0x10>)
 8003492:	f003 fc85 	bl	8006da0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003496:	bf00      	nop
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	20000334 	.word	0x20000334

080034a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80034a4:	4802      	ldr	r0, [pc, #8]	; (80034b0 <TIM2_IRQHandler+0x10>)
 80034a6:	f003 fc7b 	bl	8006da0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80034aa:	bf00      	nop
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	2000037c 	.word	0x2000037c

080034b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80034b8:	4802      	ldr	r0, [pc, #8]	; (80034c4 <USART1_IRQHandler+0x10>)
 80034ba:	f004 fd19 	bl	8007ef0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80034be:	bf00      	nop
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	2000040c 	.word	0x2000040c

080034c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  return 1;
 80034cc:	2301      	movs	r3, #1
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bc80      	pop	{r7}
 80034d4:	4770      	bx	lr

080034d6 <_kill>:

int _kill(int pid, int sig)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b082      	sub	sp, #8
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
 80034de:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80034e0:	f005 fa86 	bl	80089f0 <__errno>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2216      	movs	r2, #22
 80034e8:	601a      	str	r2, [r3, #0]
  return -1;
 80034ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <_exit>:

void _exit (int status)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b082      	sub	sp, #8
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80034fe:	f04f 31ff 	mov.w	r1, #4294967295
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7ff ffe7 	bl	80034d6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003508:	e7fe      	b.n	8003508 <_exit+0x12>

0800350a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b086      	sub	sp, #24
 800350e:	af00      	add	r7, sp, #0
 8003510:	60f8      	str	r0, [r7, #12]
 8003512:	60b9      	str	r1, [r7, #8]
 8003514:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003516:	2300      	movs	r3, #0
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	e00a      	b.n	8003532 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800351c:	f3af 8000 	nop.w
 8003520:	4601      	mov	r1, r0
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	1c5a      	adds	r2, r3, #1
 8003526:	60ba      	str	r2, [r7, #8]
 8003528:	b2ca      	uxtb	r2, r1
 800352a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	3301      	adds	r3, #1
 8003530:	617b      	str	r3, [r7, #20]
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	429a      	cmp	r2, r3
 8003538:	dbf0      	blt.n	800351c <_read+0x12>
  }

  return len;
 800353a:	687b      	ldr	r3, [r7, #4]
}
 800353c:	4618      	mov	r0, r3
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	e009      	b.n	800356a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	1c5a      	adds	r2, r3, #1
 800355a:	60ba      	str	r2, [r7, #8]
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	3301      	adds	r3, #1
 8003568:	617b      	str	r3, [r7, #20]
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	429a      	cmp	r2, r3
 8003570:	dbf1      	blt.n	8003556 <_write+0x12>
  }
  return len;
 8003572:	687b      	ldr	r3, [r7, #4]
}
 8003574:	4618      	mov	r0, r3
 8003576:	3718      	adds	r7, #24
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <_close>:

int _close(int file)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003584:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003588:	4618      	mov	r0, r3
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	bc80      	pop	{r7}
 8003590:	4770      	bx	lr

08003592 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003592:	b480      	push	{r7}
 8003594:	b083      	sub	sp, #12
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
 800359a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80035a2:	605a      	str	r2, [r3, #4]
  return 0;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bc80      	pop	{r7}
 80035ae:	4770      	bx	lr

080035b0 <_isatty>:

int _isatty(int file)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80035b8:	2301      	movs	r3, #1
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	bc80      	pop	{r7}
 80035c2:	4770      	bx	lr

080035c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bc80      	pop	{r7}
 80035da:	4770      	bx	lr

080035dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035e4:	4a14      	ldr	r2, [pc, #80]	; (8003638 <_sbrk+0x5c>)
 80035e6:	4b15      	ldr	r3, [pc, #84]	; (800363c <_sbrk+0x60>)
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035f0:	4b13      	ldr	r3, [pc, #76]	; (8003640 <_sbrk+0x64>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d102      	bne.n	80035fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035f8:	4b11      	ldr	r3, [pc, #68]	; (8003640 <_sbrk+0x64>)
 80035fa:	4a12      	ldr	r2, [pc, #72]	; (8003644 <_sbrk+0x68>)
 80035fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035fe:	4b10      	ldr	r3, [pc, #64]	; (8003640 <_sbrk+0x64>)
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4413      	add	r3, r2
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	429a      	cmp	r2, r3
 800360a:	d207      	bcs.n	800361c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800360c:	f005 f9f0 	bl	80089f0 <__errno>
 8003610:	4603      	mov	r3, r0
 8003612:	220c      	movs	r2, #12
 8003614:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003616:	f04f 33ff 	mov.w	r3, #4294967295
 800361a:	e009      	b.n	8003630 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800361c:	4b08      	ldr	r3, [pc, #32]	; (8003640 <_sbrk+0x64>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003622:	4b07      	ldr	r3, [pc, #28]	; (8003640 <_sbrk+0x64>)
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4413      	add	r3, r2
 800362a:	4a05      	ldr	r2, [pc, #20]	; (8003640 <_sbrk+0x64>)
 800362c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800362e:	68fb      	ldr	r3, [r7, #12]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3718      	adds	r7, #24
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	20005000 	.word	0x20005000
 800363c:	00000400 	.word	0x00000400
 8003640:	2000053c 	.word	0x2000053c
 8003644:	20000558 	.word	0x20000558

08003648 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800364c:	bf00      	nop
 800364e:	46bd      	mov	sp, r7
 8003650:	bc80      	pop	{r7}
 8003652:	4770      	bx	lr

08003654 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003654:	f7ff fff8 	bl	8003648 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003658:	480b      	ldr	r0, [pc, #44]	; (8003688 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800365a:	490c      	ldr	r1, [pc, #48]	; (800368c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800365c:	4a0c      	ldr	r2, [pc, #48]	; (8003690 <LoopFillZerobss+0x16>)
  movs r3, #0
 800365e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003660:	e002      	b.n	8003668 <LoopCopyDataInit>

08003662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003666:	3304      	adds	r3, #4

08003668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800366a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800366c:	d3f9      	bcc.n	8003662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800366e:	4a09      	ldr	r2, [pc, #36]	; (8003694 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003670:	4c09      	ldr	r4, [pc, #36]	; (8003698 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003674:	e001      	b.n	800367a <LoopFillZerobss>

08003676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003678:	3204      	adds	r2, #4

0800367a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800367a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800367c:	d3fb      	bcc.n	8003676 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800367e:	f005 f9bd 	bl	80089fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003682:	f7ff f979 	bl	8002978 <main>
  bx lr
 8003686:	4770      	bx	lr
  ldr r0, =_sdata
 8003688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800368c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8003690:	0800ea80 	.word	0x0800ea80
  ldr r2, =_sbss
 8003694:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003698:	20000554 	.word	0x20000554

0800369c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800369c:	e7fe      	b.n	800369c <ADC1_2_IRQHandler>
	...

080036a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036a4:	4b08      	ldr	r3, [pc, #32]	; (80036c8 <HAL_Init+0x28>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a07      	ldr	r2, [pc, #28]	; (80036c8 <HAL_Init+0x28>)
 80036aa:	f043 0310 	orr.w	r3, r3, #16
 80036ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036b0:	2003      	movs	r0, #3
 80036b2:	f000 fd13 	bl	80040dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036b6:	200f      	movs	r0, #15
 80036b8:	f000 f808 	bl	80036cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036bc:	f7ff fc9a 	bl	8002ff4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40022000 	.word	0x40022000

080036cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036d4:	4b12      	ldr	r3, [pc, #72]	; (8003720 <HAL_InitTick+0x54>)
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	4b12      	ldr	r3, [pc, #72]	; (8003724 <HAL_InitTick+0x58>)
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	4619      	mov	r1, r3
 80036de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80036e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 fd2b 	bl	8004146 <HAL_SYSTICK_Config>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e00e      	b.n	8003718 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2b0f      	cmp	r3, #15
 80036fe:	d80a      	bhi.n	8003716 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003700:	2200      	movs	r2, #0
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	f04f 30ff 	mov.w	r0, #4294967295
 8003708:	f000 fcf3 	bl	80040f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800370c:	4a06      	ldr	r2, [pc, #24]	; (8003728 <HAL_InitTick+0x5c>)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003712:	2300      	movs	r3, #0
 8003714:	e000      	b.n	8003718 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
}
 8003718:	4618      	mov	r0, r3
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	2000000c 	.word	0x2000000c
 8003724:	20000014 	.word	0x20000014
 8003728:	20000010 	.word	0x20000010

0800372c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003730:	4b05      	ldr	r3, [pc, #20]	; (8003748 <HAL_IncTick+0x1c>)
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	461a      	mov	r2, r3
 8003736:	4b05      	ldr	r3, [pc, #20]	; (800374c <HAL_IncTick+0x20>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4413      	add	r3, r2
 800373c:	4a03      	ldr	r2, [pc, #12]	; (800374c <HAL_IncTick+0x20>)
 800373e:	6013      	str	r3, [r2, #0]
}
 8003740:	bf00      	nop
 8003742:	46bd      	mov	sp, r7
 8003744:	bc80      	pop	{r7}
 8003746:	4770      	bx	lr
 8003748:	20000014 	.word	0x20000014
 800374c:	20000540 	.word	0x20000540

08003750 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  return uwTick;
 8003754:	4b02      	ldr	r3, [pc, #8]	; (8003760 <HAL_GetTick+0x10>)
 8003756:	681b      	ldr	r3, [r3, #0]
}
 8003758:	4618      	mov	r0, r3
 800375a:	46bd      	mov	sp, r7
 800375c:	bc80      	pop	{r7}
 800375e:	4770      	bx	lr
 8003760:	20000540 	.word	0x20000540

08003764 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800376c:	f7ff fff0 	bl	8003750 <HAL_GetTick>
 8003770:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377c:	d005      	beq.n	800378a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800377e:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <HAL_Delay+0x44>)
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	461a      	mov	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4413      	add	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800378a:	bf00      	nop
 800378c:	f7ff ffe0 	bl	8003750 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	429a      	cmp	r2, r3
 800379a:	d8f7      	bhi.n	800378c <HAL_Delay+0x28>
  {
  }
}
 800379c:	bf00      	nop
 800379e:	bf00      	nop
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20000014 	.word	0x20000014

080037ac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037b4:	2300      	movs	r3, #0
 80037b6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80037b8:	2300      	movs	r3, #0
 80037ba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80037bc:	2300      	movs	r3, #0
 80037be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e0be      	b.n	800394c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d109      	bne.n	80037f0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7ff fc34 	bl	8003058 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 faff 	bl	8003df4 <ADC_ConversionStop_Disable>
 80037f6:	4603      	mov	r3, r0
 80037f8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fe:	f003 0310 	and.w	r3, r3, #16
 8003802:	2b00      	cmp	r3, #0
 8003804:	f040 8099 	bne.w	800393a <HAL_ADC_Init+0x18e>
 8003808:	7dfb      	ldrb	r3, [r7, #23]
 800380a:	2b00      	cmp	r3, #0
 800380c:	f040 8095 	bne.w	800393a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003814:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003818:	f023 0302 	bic.w	r3, r3, #2
 800381c:	f043 0202 	orr.w	r2, r3, #2
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800382c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	7b1b      	ldrb	r3, [r3, #12]
 8003832:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003834:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	4313      	orrs	r3, r2
 800383a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003844:	d003      	beq.n	800384e <HAL_ADC_Init+0xa2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d102      	bne.n	8003854 <HAL_ADC_Init+0xa8>
 800384e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003852:	e000      	b.n	8003856 <HAL_ADC_Init+0xaa>
 8003854:	2300      	movs	r3, #0
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4313      	orrs	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	7d1b      	ldrb	r3, [r3, #20]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d119      	bne.n	8003898 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	7b1b      	ldrb	r3, [r3, #12]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d109      	bne.n	8003880 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	3b01      	subs	r3, #1
 8003872:	035a      	lsls	r2, r3, #13
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	4313      	orrs	r3, r2
 8003878:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800387c:	613b      	str	r3, [r7, #16]
 800387e:	e00b      	b.n	8003898 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003884:	f043 0220 	orr.w	r2, r3, #32
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003890:	f043 0201 	orr.w	r2, r3, #1
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689a      	ldr	r2, [r3, #8]
 80038b2:	4b28      	ldr	r3, [pc, #160]	; (8003954 <HAL_ADC_Init+0x1a8>)
 80038b4:	4013      	ands	r3, r2
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6812      	ldr	r2, [r2, #0]
 80038ba:	68b9      	ldr	r1, [r7, #8]
 80038bc:	430b      	orrs	r3, r1
 80038be:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038c8:	d003      	beq.n	80038d2 <HAL_ADC_Init+0x126>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d104      	bne.n	80038dc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	3b01      	subs	r3, #1
 80038d8:	051b      	lsls	r3, r3, #20
 80038da:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689a      	ldr	r2, [r3, #8]
 80038f6:	4b18      	ldr	r3, [pc, #96]	; (8003958 <HAL_ADC_Init+0x1ac>)
 80038f8:	4013      	ands	r3, r2
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d10b      	bne.n	8003918 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	f023 0303 	bic.w	r3, r3, #3
 800390e:	f043 0201 	orr.w	r2, r3, #1
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003916:	e018      	b.n	800394a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391c:	f023 0312 	bic.w	r3, r3, #18
 8003920:	f043 0210 	orr.w	r2, r3, #16
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392c:	f043 0201 	orr.w	r2, r3, #1
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003938:	e007      	b.n	800394a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393e:	f043 0210 	orr.w	r2, r3, #16
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800394a:	7dfb      	ldrb	r3, [r7, #23]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	ffe1f7fd 	.word	0xffe1f7fd
 8003958:	ff1f0efe 	.word	0xff1f0efe

0800395c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003968:	2300      	movs	r3, #0
 800396a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a64      	ldr	r2, [pc, #400]	; (8003b04 <HAL_ADC_Start_DMA+0x1a8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d004      	beq.n	8003980 <HAL_ADC_Start_DMA+0x24>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a63      	ldr	r2, [pc, #396]	; (8003b08 <HAL_ADC_Start_DMA+0x1ac>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d106      	bne.n	800398e <HAL_ADC_Start_DMA+0x32>
 8003980:	4b60      	ldr	r3, [pc, #384]	; (8003b04 <HAL_ADC_Start_DMA+0x1a8>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003988:	2b00      	cmp	r3, #0
 800398a:	f040 80b3 	bne.w	8003af4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003994:	2b01      	cmp	r3, #1
 8003996:	d101      	bne.n	800399c <HAL_ADC_Start_DMA+0x40>
 8003998:	2302      	movs	r3, #2
 800399a:	e0ae      	b.n	8003afa <HAL_ADC_Start_DMA+0x19e>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f000 f9cb 	bl	8003d40 <ADC_Enable>
 80039aa:	4603      	mov	r3, r0
 80039ac:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80039ae:	7dfb      	ldrb	r3, [r7, #23]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f040 809a 	bne.w	8003aea <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039be:	f023 0301 	bic.w	r3, r3, #1
 80039c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a4e      	ldr	r2, [pc, #312]	; (8003b08 <HAL_ADC_Start_DMA+0x1ac>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d105      	bne.n	80039e0 <HAL_ADC_Start_DMA+0x84>
 80039d4:	4b4b      	ldr	r3, [pc, #300]	; (8003b04 <HAL_ADC_Start_DMA+0x1a8>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d115      	bne.n	8003a0c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d026      	beq.n	8003a48 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003a02:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003a0a:	e01d      	b.n	8003a48 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a10:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a39      	ldr	r2, [pc, #228]	; (8003b04 <HAL_ADC_Start_DMA+0x1a8>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d004      	beq.n	8003a2c <HAL_ADC_Start_DMA+0xd0>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a38      	ldr	r2, [pc, #224]	; (8003b08 <HAL_ADC_Start_DMA+0x1ac>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d10d      	bne.n	8003a48 <HAL_ADC_Start_DMA+0xec>
 8003a2c:	4b35      	ldr	r3, [pc, #212]	; (8003b04 <HAL_ADC_Start_DMA+0x1a8>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d007      	beq.n	8003a48 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003a40:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d006      	beq.n	8003a62 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a58:	f023 0206 	bic.w	r2, r3, #6
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a60:	e002      	b.n	8003a68 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	4a25      	ldr	r2, [pc, #148]	; (8003b0c <HAL_ADC_Start_DMA+0x1b0>)
 8003a76:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	4a24      	ldr	r2, [pc, #144]	; (8003b10 <HAL_ADC_Start_DMA+0x1b4>)
 8003a7e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	4a23      	ldr	r2, [pc, #140]	; (8003b14 <HAL_ADC_Start_DMA+0x1b8>)
 8003a86:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f06f 0202 	mvn.w	r2, #2
 8003a90:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003aa0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6a18      	ldr	r0, [r3, #32]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	334c      	adds	r3, #76	; 0x4c
 8003aac:	4619      	mov	r1, r3
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f000 fbaf 	bl	8004214 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003ac0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003ac4:	d108      	bne.n	8003ad8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003ad4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003ad6:	e00f      	b.n	8003af8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689a      	ldr	r2, [r3, #8]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003ae6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003ae8:	e006      	b.n	8003af8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8003af2:	e001      	b.n	8003af8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3718      	adds	r7, #24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	40012400 	.word	0x40012400
 8003b08:	40012800 	.word	0x40012800
 8003b0c:	08003e77 	.word	0x08003e77
 8003b10:	08003ef3 	.word	0x08003ef3
 8003b14:	08003f0f 	.word	0x08003f0f

08003b18 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc80      	pop	{r7}
 8003b28:	4770      	bx	lr

08003b2a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr

08003b3c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bc80      	pop	{r7}
 8003b4c:	4770      	bx	lr
	...

08003b50 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d101      	bne.n	8003b70 <HAL_ADC_ConfigChannel+0x20>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	e0dc      	b.n	8003d2a <HAL_ADC_ConfigChannel+0x1da>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	2b06      	cmp	r3, #6
 8003b7e:	d81c      	bhi.n	8003bba <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4413      	add	r3, r2
 8003b90:	3b05      	subs	r3, #5
 8003b92:	221f      	movs	r2, #31
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	4019      	ands	r1, r3
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	6818      	ldr	r0, [r3, #0]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4413      	add	r3, r2
 8003baa:	3b05      	subs	r3, #5
 8003bac:	fa00 f203 	lsl.w	r2, r0, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	635a      	str	r2, [r3, #52]	; 0x34
 8003bb8:	e03c      	b.n	8003c34 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	2b0c      	cmp	r3, #12
 8003bc0:	d81c      	bhi.n	8003bfc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	3b23      	subs	r3, #35	; 0x23
 8003bd4:	221f      	movs	r2, #31
 8003bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bda:	43db      	mvns	r3, r3
 8003bdc:	4019      	ands	r1, r3
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	6818      	ldr	r0, [r3, #0]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	4613      	mov	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	3b23      	subs	r3, #35	; 0x23
 8003bee:	fa00 f203 	lsl.w	r2, r0, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	631a      	str	r2, [r3, #48]	; 0x30
 8003bfa:	e01b      	b.n	8003c34 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	4613      	mov	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4413      	add	r3, r2
 8003c0c:	3b41      	subs	r3, #65	; 0x41
 8003c0e:	221f      	movs	r2, #31
 8003c10:	fa02 f303 	lsl.w	r3, r2, r3
 8003c14:	43db      	mvns	r3, r3
 8003c16:	4019      	ands	r1, r3
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	6818      	ldr	r0, [r3, #0]
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	4613      	mov	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	3b41      	subs	r3, #65	; 0x41
 8003c28:	fa00 f203 	lsl.w	r2, r0, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	430a      	orrs	r2, r1
 8003c32:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b09      	cmp	r3, #9
 8003c3a:	d91c      	bls.n	8003c76 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68d9      	ldr	r1, [r3, #12]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	4613      	mov	r3, r2
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	4413      	add	r3, r2
 8003c4c:	3b1e      	subs	r3, #30
 8003c4e:	2207      	movs	r2, #7
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	43db      	mvns	r3, r3
 8003c56:	4019      	ands	r1, r3
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	6898      	ldr	r0, [r3, #8]
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	4613      	mov	r3, r2
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	4413      	add	r3, r2
 8003c66:	3b1e      	subs	r3, #30
 8003c68:	fa00 f203 	lsl.w	r2, r0, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	60da      	str	r2, [r3, #12]
 8003c74:	e019      	b.n	8003caa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	6919      	ldr	r1, [r3, #16]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	4613      	mov	r3, r2
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	4413      	add	r3, r2
 8003c86:	2207      	movs	r2, #7
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	4019      	ands	r1, r3
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	6898      	ldr	r0, [r3, #8]
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	4413      	add	r3, r2
 8003c9e:	fa00 f203 	lsl.w	r2, r0, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b10      	cmp	r3, #16
 8003cb0:	d003      	beq.n	8003cba <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003cb6:	2b11      	cmp	r3, #17
 8003cb8:	d132      	bne.n	8003d20 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a1d      	ldr	r2, [pc, #116]	; (8003d34 <HAL_ADC_ConfigChannel+0x1e4>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d125      	bne.n	8003d10 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d126      	bne.n	8003d20 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003ce0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2b10      	cmp	r3, #16
 8003ce8:	d11a      	bne.n	8003d20 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003cea:	4b13      	ldr	r3, [pc, #76]	; (8003d38 <HAL_ADC_ConfigChannel+0x1e8>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a13      	ldr	r2, [pc, #76]	; (8003d3c <HAL_ADC_ConfigChannel+0x1ec>)
 8003cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf4:	0c9a      	lsrs	r2, r3, #18
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	4413      	add	r3, r2
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003d00:	e002      	b.n	8003d08 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	3b01      	subs	r3, #1
 8003d06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1f9      	bne.n	8003d02 <HAL_ADC_ConfigChannel+0x1b2>
 8003d0e:	e007      	b.n	8003d20 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d14:	f043 0220 	orr.w	r2, r3, #32
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr
 8003d34:	40012400 	.word	0x40012400
 8003d38:	2000000c 	.word	0x2000000c
 8003d3c:	431bde83 	.word	0x431bde83

08003d40 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d040      	beq.n	8003de0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689a      	ldr	r2, [r3, #8]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f042 0201 	orr.w	r2, r2, #1
 8003d6c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003d6e:	4b1f      	ldr	r3, [pc, #124]	; (8003dec <ADC_Enable+0xac>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a1f      	ldr	r2, [pc, #124]	; (8003df0 <ADC_Enable+0xb0>)
 8003d74:	fba2 2303 	umull	r2, r3, r2, r3
 8003d78:	0c9b      	lsrs	r3, r3, #18
 8003d7a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003d7c:	e002      	b.n	8003d84 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	3b01      	subs	r3, #1
 8003d82:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1f9      	bne.n	8003d7e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d8a:	f7ff fce1 	bl	8003750 <HAL_GetTick>
 8003d8e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003d90:	e01f      	b.n	8003dd2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d92:	f7ff fcdd 	bl	8003750 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d918      	bls.n	8003dd2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d011      	beq.n	8003dd2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db2:	f043 0210 	orr.w	r2, r3, #16
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbe:	f043 0201 	orr.w	r2, r3, #1
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e007      	b.n	8003de2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d1d8      	bne.n	8003d92 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	2000000c 	.word	0x2000000c
 8003df0:	431bde83 	.word	0x431bde83

08003df4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d12e      	bne.n	8003e6c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 0201 	bic.w	r2, r2, #1
 8003e1c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e1e:	f7ff fc97 	bl	8003750 <HAL_GetTick>
 8003e22:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003e24:	e01b      	b.n	8003e5e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e26:	f7ff fc93 	bl	8003750 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d914      	bls.n	8003e5e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d10d      	bne.n	8003e5e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e46:	f043 0210 	orr.w	r2, r3, #16
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e52:	f043 0201 	orr.w	r2, r3, #1
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e007      	b.n	8003e6e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d0dc      	beq.n	8003e26 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b084      	sub	sp, #16
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e88:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d127      	bne.n	8003ee0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e94:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003ea6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003eaa:	d115      	bne.n	8003ed8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d111      	bne.n	8003ed8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d105      	bne.n	8003ed8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed0:	f043 0201 	orr.w	r2, r3, #1
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f7ff fe1d 	bl	8003b18 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003ede:	e004      	b.n	8003eea <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	4798      	blx	r3
}
 8003eea:	bf00      	nop
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b084      	sub	sp, #16
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f7ff fe12 	bl	8003b2a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f06:	bf00      	nop
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b084      	sub	sp, #16
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f20:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2c:	f043 0204 	orr.w	r2, r3, #4
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f7ff fe01 	bl	8003b3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f3a:	bf00      	nop
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
	...

08003f44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f54:	4b0c      	ldr	r3, [pc, #48]	; (8003f88 <__NVIC_SetPriorityGrouping+0x44>)
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f60:	4013      	ands	r3, r2
 8003f62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f76:	4a04      	ldr	r2, [pc, #16]	; (8003f88 <__NVIC_SetPriorityGrouping+0x44>)
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	60d3      	str	r3, [r2, #12]
}
 8003f7c:	bf00      	nop
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bc80      	pop	{r7}
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	e000ed00 	.word	0xe000ed00

08003f8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f90:	4b04      	ldr	r3, [pc, #16]	; (8003fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	0a1b      	lsrs	r3, r3, #8
 8003f96:	f003 0307 	and.w	r3, r3, #7
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bc80      	pop	{r7}
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	e000ed00 	.word	0xe000ed00

08003fa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	4603      	mov	r3, r0
 8003fb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	db0b      	blt.n	8003fd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fba:	79fb      	ldrb	r3, [r7, #7]
 8003fbc:	f003 021f 	and.w	r2, r3, #31
 8003fc0:	4906      	ldr	r1, [pc, #24]	; (8003fdc <__NVIC_EnableIRQ+0x34>)
 8003fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fc6:	095b      	lsrs	r3, r3, #5
 8003fc8:	2001      	movs	r0, #1
 8003fca:	fa00 f202 	lsl.w	r2, r0, r2
 8003fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003fd2:	bf00      	nop
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bc80      	pop	{r7}
 8003fda:	4770      	bx	lr
 8003fdc:	e000e100 	.word	0xe000e100

08003fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	6039      	str	r1, [r7, #0]
 8003fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	db0a      	blt.n	800400a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	b2da      	uxtb	r2, r3
 8003ff8:	490c      	ldr	r1, [pc, #48]	; (800402c <__NVIC_SetPriority+0x4c>)
 8003ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ffe:	0112      	lsls	r2, r2, #4
 8004000:	b2d2      	uxtb	r2, r2
 8004002:	440b      	add	r3, r1
 8004004:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004008:	e00a      	b.n	8004020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	b2da      	uxtb	r2, r3
 800400e:	4908      	ldr	r1, [pc, #32]	; (8004030 <__NVIC_SetPriority+0x50>)
 8004010:	79fb      	ldrb	r3, [r7, #7]
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	3b04      	subs	r3, #4
 8004018:	0112      	lsls	r2, r2, #4
 800401a:	b2d2      	uxtb	r2, r2
 800401c:	440b      	add	r3, r1
 800401e:	761a      	strb	r2, [r3, #24]
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	bc80      	pop	{r7}
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	e000e100 	.word	0xe000e100
 8004030:	e000ed00 	.word	0xe000ed00

08004034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004034:	b480      	push	{r7}
 8004036:	b089      	sub	sp, #36	; 0x24
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f003 0307 	and.w	r3, r3, #7
 8004046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	f1c3 0307 	rsb	r3, r3, #7
 800404e:	2b04      	cmp	r3, #4
 8004050:	bf28      	it	cs
 8004052:	2304      	movcs	r3, #4
 8004054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	3304      	adds	r3, #4
 800405a:	2b06      	cmp	r3, #6
 800405c:	d902      	bls.n	8004064 <NVIC_EncodePriority+0x30>
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	3b03      	subs	r3, #3
 8004062:	e000      	b.n	8004066 <NVIC_EncodePriority+0x32>
 8004064:	2300      	movs	r3, #0
 8004066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004068:	f04f 32ff 	mov.w	r2, #4294967295
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	43da      	mvns	r2, r3
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	401a      	ands	r2, r3
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800407c:	f04f 31ff 	mov.w	r1, #4294967295
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	fa01 f303 	lsl.w	r3, r1, r3
 8004086:	43d9      	mvns	r1, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800408c:	4313      	orrs	r3, r2
         );
}
 800408e:	4618      	mov	r0, r3
 8004090:	3724      	adds	r7, #36	; 0x24
 8004092:	46bd      	mov	sp, r7
 8004094:	bc80      	pop	{r7}
 8004096:	4770      	bx	lr

08004098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	3b01      	subs	r3, #1
 80040a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040a8:	d301      	bcc.n	80040ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040aa:	2301      	movs	r3, #1
 80040ac:	e00f      	b.n	80040ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040ae:	4a0a      	ldr	r2, [pc, #40]	; (80040d8 <SysTick_Config+0x40>)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	3b01      	subs	r3, #1
 80040b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040b6:	210f      	movs	r1, #15
 80040b8:	f04f 30ff 	mov.w	r0, #4294967295
 80040bc:	f7ff ff90 	bl	8003fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040c0:	4b05      	ldr	r3, [pc, #20]	; (80040d8 <SysTick_Config+0x40>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040c6:	4b04      	ldr	r3, [pc, #16]	; (80040d8 <SysTick_Config+0x40>)
 80040c8:	2207      	movs	r2, #7
 80040ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	e000e010 	.word	0xe000e010

080040dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f7ff ff2d 	bl	8003f44 <__NVIC_SetPriorityGrouping>
}
 80040ea:	bf00      	nop
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b086      	sub	sp, #24
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	4603      	mov	r3, r0
 80040fa:	60b9      	str	r1, [r7, #8]
 80040fc:	607a      	str	r2, [r7, #4]
 80040fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004100:	2300      	movs	r3, #0
 8004102:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004104:	f7ff ff42 	bl	8003f8c <__NVIC_GetPriorityGrouping>
 8004108:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	68b9      	ldr	r1, [r7, #8]
 800410e:	6978      	ldr	r0, [r7, #20]
 8004110:	f7ff ff90 	bl	8004034 <NVIC_EncodePriority>
 8004114:	4602      	mov	r2, r0
 8004116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800411a:	4611      	mov	r1, r2
 800411c:	4618      	mov	r0, r3
 800411e:	f7ff ff5f 	bl	8003fe0 <__NVIC_SetPriority>
}
 8004122:	bf00      	nop
 8004124:	3718      	adds	r7, #24
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b082      	sub	sp, #8
 800412e:	af00      	add	r7, sp, #0
 8004130:	4603      	mov	r3, r0
 8004132:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004138:	4618      	mov	r0, r3
 800413a:	f7ff ff35 	bl	8003fa8 <__NVIC_EnableIRQ>
}
 800413e:	bf00      	nop
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b082      	sub	sp, #8
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7ff ffa2 	bl	8004098 <SysTick_Config>
 8004154:	4603      	mov	r3, r0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3708      	adds	r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
	...

08004160 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004168:	2300      	movs	r3, #0
 800416a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e043      	b.n	80041fe <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	461a      	mov	r2, r3
 800417c:	4b22      	ldr	r3, [pc, #136]	; (8004208 <HAL_DMA_Init+0xa8>)
 800417e:	4413      	add	r3, r2
 8004180:	4a22      	ldr	r2, [pc, #136]	; (800420c <HAL_DMA_Init+0xac>)
 8004182:	fba2 2303 	umull	r2, r3, r2, r3
 8004186:	091b      	lsrs	r3, r3, #4
 8004188:	009a      	lsls	r2, r3, #2
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a1f      	ldr	r2, [pc, #124]	; (8004210 <HAL_DMA_Init+0xb0>)
 8004192:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2202      	movs	r2, #2
 8004198:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80041aa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80041ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80041b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	4313      	orrs	r3, r2
 80041dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	bc80      	pop	{r7}
 8004206:	4770      	bx	lr
 8004208:	bffdfff8 	.word	0xbffdfff8
 800420c:	cccccccd 	.word	0xcccccccd
 8004210:	40020000 	.word	0x40020000

08004214 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
 8004220:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f893 3020 	ldrb.w	r3, [r3, #32]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d101      	bne.n	8004234 <HAL_DMA_Start_IT+0x20>
 8004230:	2302      	movs	r3, #2
 8004232:	e04b      	b.n	80042cc <HAL_DMA_Start_IT+0xb8>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b01      	cmp	r3, #1
 8004246:	d13a      	bne.n	80042be <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2202      	movs	r2, #2
 800424c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0201 	bic.w	r2, r2, #1
 8004264:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	68b9      	ldr	r1, [r7, #8]
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f000 f9eb 	bl	8004648 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004276:	2b00      	cmp	r3, #0
 8004278:	d008      	beq.n	800428c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f042 020e 	orr.w	r2, r2, #14
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	e00f      	b.n	80042ac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0204 	bic.w	r2, r2, #4
 800429a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f042 020a 	orr.w	r2, r2, #10
 80042aa:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f042 0201 	orr.w	r2, r2, #1
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	e005      	b.n	80042ca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80042c6:	2302      	movs	r3, #2
 80042c8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80042ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3718      	adds	r7, #24
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042dc:	2300      	movs	r3, #0
 80042de:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d008      	beq.n	80042fe <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2204      	movs	r2, #4
 80042f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e020      	b.n	8004340 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 020e 	bic.w	r2, r2, #14
 800430c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 0201 	bic.w	r2, r2, #1
 800431c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004326:	2101      	movs	r1, #1
 8004328:	fa01 f202 	lsl.w	r2, r1, r2
 800432c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800433e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004340:	4618      	mov	r0, r3
 8004342:	3714      	adds	r7, #20
 8004344:	46bd      	mov	sp, r7
 8004346:	bc80      	pop	{r7}
 8004348:	4770      	bx	lr
	...

0800434c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004354:	2300      	movs	r3, #0
 8004356:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d005      	beq.n	8004370 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2204      	movs	r2, #4
 8004368:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	73fb      	strb	r3, [r7, #15]
 800436e:	e051      	b.n	8004414 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 020e 	bic.w	r2, r2, #14
 800437e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 0201 	bic.w	r2, r2, #1
 800438e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a22      	ldr	r2, [pc, #136]	; (8004420 <HAL_DMA_Abort_IT+0xd4>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d029      	beq.n	80043ee <HAL_DMA_Abort_IT+0xa2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a21      	ldr	r2, [pc, #132]	; (8004424 <HAL_DMA_Abort_IT+0xd8>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d022      	beq.n	80043ea <HAL_DMA_Abort_IT+0x9e>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a1f      	ldr	r2, [pc, #124]	; (8004428 <HAL_DMA_Abort_IT+0xdc>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d01a      	beq.n	80043e4 <HAL_DMA_Abort_IT+0x98>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a1e      	ldr	r2, [pc, #120]	; (800442c <HAL_DMA_Abort_IT+0xe0>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d012      	beq.n	80043de <HAL_DMA_Abort_IT+0x92>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a1c      	ldr	r2, [pc, #112]	; (8004430 <HAL_DMA_Abort_IT+0xe4>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d00a      	beq.n	80043d8 <HAL_DMA_Abort_IT+0x8c>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a1b      	ldr	r2, [pc, #108]	; (8004434 <HAL_DMA_Abort_IT+0xe8>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d102      	bne.n	80043d2 <HAL_DMA_Abort_IT+0x86>
 80043cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80043d0:	e00e      	b.n	80043f0 <HAL_DMA_Abort_IT+0xa4>
 80043d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043d6:	e00b      	b.n	80043f0 <HAL_DMA_Abort_IT+0xa4>
 80043d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80043dc:	e008      	b.n	80043f0 <HAL_DMA_Abort_IT+0xa4>
 80043de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043e2:	e005      	b.n	80043f0 <HAL_DMA_Abort_IT+0xa4>
 80043e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043e8:	e002      	b.n	80043f0 <HAL_DMA_Abort_IT+0xa4>
 80043ea:	2310      	movs	r3, #16
 80043ec:	e000      	b.n	80043f0 <HAL_DMA_Abort_IT+0xa4>
 80043ee:	2301      	movs	r3, #1
 80043f0:	4a11      	ldr	r2, [pc, #68]	; (8004438 <HAL_DMA_Abort_IT+0xec>)
 80043f2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004408:	2b00      	cmp	r3, #0
 800440a:	d003      	beq.n	8004414 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	4798      	blx	r3
    } 
  }
  return status;
 8004414:	7bfb      	ldrb	r3, [r7, #15]
}
 8004416:	4618      	mov	r0, r3
 8004418:	3710      	adds	r7, #16
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	40020008 	.word	0x40020008
 8004424:	4002001c 	.word	0x4002001c
 8004428:	40020030 	.word	0x40020030
 800442c:	40020044 	.word	0x40020044
 8004430:	40020058 	.word	0x40020058
 8004434:	4002006c 	.word	0x4002006c
 8004438:	40020000 	.word	0x40020000

0800443c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004458:	2204      	movs	r2, #4
 800445a:	409a      	lsls	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	4013      	ands	r3, r2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d04f      	beq.n	8004504 <HAL_DMA_IRQHandler+0xc8>
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f003 0304 	and.w	r3, r3, #4
 800446a:	2b00      	cmp	r3, #0
 800446c:	d04a      	beq.n	8004504 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0320 	and.w	r3, r3, #32
 8004478:	2b00      	cmp	r3, #0
 800447a:	d107      	bne.n	800448c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 0204 	bic.w	r2, r2, #4
 800448a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a66      	ldr	r2, [pc, #408]	; (800462c <HAL_DMA_IRQHandler+0x1f0>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d029      	beq.n	80044ea <HAL_DMA_IRQHandler+0xae>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a65      	ldr	r2, [pc, #404]	; (8004630 <HAL_DMA_IRQHandler+0x1f4>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d022      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xaa>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a63      	ldr	r2, [pc, #396]	; (8004634 <HAL_DMA_IRQHandler+0x1f8>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d01a      	beq.n	80044e0 <HAL_DMA_IRQHandler+0xa4>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a62      	ldr	r2, [pc, #392]	; (8004638 <HAL_DMA_IRQHandler+0x1fc>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d012      	beq.n	80044da <HAL_DMA_IRQHandler+0x9e>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a60      	ldr	r2, [pc, #384]	; (800463c <HAL_DMA_IRQHandler+0x200>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d00a      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x98>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a5f      	ldr	r2, [pc, #380]	; (8004640 <HAL_DMA_IRQHandler+0x204>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d102      	bne.n	80044ce <HAL_DMA_IRQHandler+0x92>
 80044c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80044cc:	e00e      	b.n	80044ec <HAL_DMA_IRQHandler+0xb0>
 80044ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80044d2:	e00b      	b.n	80044ec <HAL_DMA_IRQHandler+0xb0>
 80044d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80044d8:	e008      	b.n	80044ec <HAL_DMA_IRQHandler+0xb0>
 80044da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044de:	e005      	b.n	80044ec <HAL_DMA_IRQHandler+0xb0>
 80044e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044e4:	e002      	b.n	80044ec <HAL_DMA_IRQHandler+0xb0>
 80044e6:	2340      	movs	r3, #64	; 0x40
 80044e8:	e000      	b.n	80044ec <HAL_DMA_IRQHandler+0xb0>
 80044ea:	2304      	movs	r3, #4
 80044ec:	4a55      	ldr	r2, [pc, #340]	; (8004644 <HAL_DMA_IRQHandler+0x208>)
 80044ee:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 8094 	beq.w	8004622 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004502:	e08e      	b.n	8004622 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004508:	2202      	movs	r2, #2
 800450a:	409a      	lsls	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4013      	ands	r3, r2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d056      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x186>
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d051      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0320 	and.w	r3, r3, #32
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10b      	bne.n	8004544 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 020a 	bic.w	r2, r2, #10
 800453a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a38      	ldr	r2, [pc, #224]	; (800462c <HAL_DMA_IRQHandler+0x1f0>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d029      	beq.n	80045a2 <HAL_DMA_IRQHandler+0x166>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a37      	ldr	r2, [pc, #220]	; (8004630 <HAL_DMA_IRQHandler+0x1f4>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d022      	beq.n	800459e <HAL_DMA_IRQHandler+0x162>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a35      	ldr	r2, [pc, #212]	; (8004634 <HAL_DMA_IRQHandler+0x1f8>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d01a      	beq.n	8004598 <HAL_DMA_IRQHandler+0x15c>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a34      	ldr	r2, [pc, #208]	; (8004638 <HAL_DMA_IRQHandler+0x1fc>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d012      	beq.n	8004592 <HAL_DMA_IRQHandler+0x156>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a32      	ldr	r2, [pc, #200]	; (800463c <HAL_DMA_IRQHandler+0x200>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d00a      	beq.n	800458c <HAL_DMA_IRQHandler+0x150>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a31      	ldr	r2, [pc, #196]	; (8004640 <HAL_DMA_IRQHandler+0x204>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d102      	bne.n	8004586 <HAL_DMA_IRQHandler+0x14a>
 8004580:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004584:	e00e      	b.n	80045a4 <HAL_DMA_IRQHandler+0x168>
 8004586:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800458a:	e00b      	b.n	80045a4 <HAL_DMA_IRQHandler+0x168>
 800458c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004590:	e008      	b.n	80045a4 <HAL_DMA_IRQHandler+0x168>
 8004592:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004596:	e005      	b.n	80045a4 <HAL_DMA_IRQHandler+0x168>
 8004598:	f44f 7300 	mov.w	r3, #512	; 0x200
 800459c:	e002      	b.n	80045a4 <HAL_DMA_IRQHandler+0x168>
 800459e:	2320      	movs	r3, #32
 80045a0:	e000      	b.n	80045a4 <HAL_DMA_IRQHandler+0x168>
 80045a2:	2302      	movs	r3, #2
 80045a4:	4a27      	ldr	r2, [pc, #156]	; (8004644 <HAL_DMA_IRQHandler+0x208>)
 80045a6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d034      	beq.n	8004622 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80045c0:	e02f      	b.n	8004622 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	2208      	movs	r2, #8
 80045c8:	409a      	lsls	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	4013      	ands	r3, r2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d028      	beq.n	8004624 <HAL_DMA_IRQHandler+0x1e8>
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	f003 0308 	and.w	r3, r3, #8
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d023      	beq.n	8004624 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f022 020e 	bic.w	r2, r2, #14
 80045ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f4:	2101      	movs	r1, #1
 80045f6:	fa01 f202 	lsl.w	r2, r1, r2
 80045fa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004616:	2b00      	cmp	r3, #0
 8004618:	d004      	beq.n	8004624 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	4798      	blx	r3
    }
  }
  return;
 8004622:	bf00      	nop
 8004624:	bf00      	nop
}
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	40020008 	.word	0x40020008
 8004630:	4002001c 	.word	0x4002001c
 8004634:	40020030 	.word	0x40020030
 8004638:	40020044 	.word	0x40020044
 800463c:	40020058 	.word	0x40020058
 8004640:	4002006c 	.word	0x4002006c
 8004644:	40020000 	.word	0x40020000

08004648 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
 8004654:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465e:	2101      	movs	r1, #1
 8004660:	fa01 f202 	lsl.w	r2, r1, r2
 8004664:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	2b10      	cmp	r3, #16
 8004674:	d108      	bne.n	8004688 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004686:	e007      	b.n	8004698 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	60da      	str	r2, [r3, #12]
}
 8004698:	bf00      	nop
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	bc80      	pop	{r7}
 80046a0:	4770      	bx	lr
	...

080046a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b08b      	sub	sp, #44	; 0x2c
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046ae:	2300      	movs	r3, #0
 80046b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80046b2:	2300      	movs	r3, #0
 80046b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046b6:	e169      	b.n	800498c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80046b8:	2201      	movs	r2, #1
 80046ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046bc:	fa02 f303 	lsl.w	r3, r2, r3
 80046c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	69fa      	ldr	r2, [r7, #28]
 80046c8:	4013      	ands	r3, r2
 80046ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	f040 8158 	bne.w	8004986 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	4a9a      	ldr	r2, [pc, #616]	; (8004944 <HAL_GPIO_Init+0x2a0>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d05e      	beq.n	800479e <HAL_GPIO_Init+0xfa>
 80046e0:	4a98      	ldr	r2, [pc, #608]	; (8004944 <HAL_GPIO_Init+0x2a0>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d875      	bhi.n	80047d2 <HAL_GPIO_Init+0x12e>
 80046e6:	4a98      	ldr	r2, [pc, #608]	; (8004948 <HAL_GPIO_Init+0x2a4>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d058      	beq.n	800479e <HAL_GPIO_Init+0xfa>
 80046ec:	4a96      	ldr	r2, [pc, #600]	; (8004948 <HAL_GPIO_Init+0x2a4>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d86f      	bhi.n	80047d2 <HAL_GPIO_Init+0x12e>
 80046f2:	4a96      	ldr	r2, [pc, #600]	; (800494c <HAL_GPIO_Init+0x2a8>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d052      	beq.n	800479e <HAL_GPIO_Init+0xfa>
 80046f8:	4a94      	ldr	r2, [pc, #592]	; (800494c <HAL_GPIO_Init+0x2a8>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d869      	bhi.n	80047d2 <HAL_GPIO_Init+0x12e>
 80046fe:	4a94      	ldr	r2, [pc, #592]	; (8004950 <HAL_GPIO_Init+0x2ac>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d04c      	beq.n	800479e <HAL_GPIO_Init+0xfa>
 8004704:	4a92      	ldr	r2, [pc, #584]	; (8004950 <HAL_GPIO_Init+0x2ac>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d863      	bhi.n	80047d2 <HAL_GPIO_Init+0x12e>
 800470a:	4a92      	ldr	r2, [pc, #584]	; (8004954 <HAL_GPIO_Init+0x2b0>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d046      	beq.n	800479e <HAL_GPIO_Init+0xfa>
 8004710:	4a90      	ldr	r2, [pc, #576]	; (8004954 <HAL_GPIO_Init+0x2b0>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d85d      	bhi.n	80047d2 <HAL_GPIO_Init+0x12e>
 8004716:	2b12      	cmp	r3, #18
 8004718:	d82a      	bhi.n	8004770 <HAL_GPIO_Init+0xcc>
 800471a:	2b12      	cmp	r3, #18
 800471c:	d859      	bhi.n	80047d2 <HAL_GPIO_Init+0x12e>
 800471e:	a201      	add	r2, pc, #4	; (adr r2, 8004724 <HAL_GPIO_Init+0x80>)
 8004720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004724:	0800479f 	.word	0x0800479f
 8004728:	08004779 	.word	0x08004779
 800472c:	0800478b 	.word	0x0800478b
 8004730:	080047cd 	.word	0x080047cd
 8004734:	080047d3 	.word	0x080047d3
 8004738:	080047d3 	.word	0x080047d3
 800473c:	080047d3 	.word	0x080047d3
 8004740:	080047d3 	.word	0x080047d3
 8004744:	080047d3 	.word	0x080047d3
 8004748:	080047d3 	.word	0x080047d3
 800474c:	080047d3 	.word	0x080047d3
 8004750:	080047d3 	.word	0x080047d3
 8004754:	080047d3 	.word	0x080047d3
 8004758:	080047d3 	.word	0x080047d3
 800475c:	080047d3 	.word	0x080047d3
 8004760:	080047d3 	.word	0x080047d3
 8004764:	080047d3 	.word	0x080047d3
 8004768:	08004781 	.word	0x08004781
 800476c:	08004795 	.word	0x08004795
 8004770:	4a79      	ldr	r2, [pc, #484]	; (8004958 <HAL_GPIO_Init+0x2b4>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d013      	beq.n	800479e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004776:	e02c      	b.n	80047d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	623b      	str	r3, [r7, #32]
          break;
 800477e:	e029      	b.n	80047d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	3304      	adds	r3, #4
 8004786:	623b      	str	r3, [r7, #32]
          break;
 8004788:	e024      	b.n	80047d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	3308      	adds	r3, #8
 8004790:	623b      	str	r3, [r7, #32]
          break;
 8004792:	e01f      	b.n	80047d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	330c      	adds	r3, #12
 800479a:	623b      	str	r3, [r7, #32]
          break;
 800479c:	e01a      	b.n	80047d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d102      	bne.n	80047ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80047a6:	2304      	movs	r3, #4
 80047a8:	623b      	str	r3, [r7, #32]
          break;
 80047aa:	e013      	b.n	80047d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d105      	bne.n	80047c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80047b4:	2308      	movs	r3, #8
 80047b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	69fa      	ldr	r2, [r7, #28]
 80047bc:	611a      	str	r2, [r3, #16]
          break;
 80047be:	e009      	b.n	80047d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80047c0:	2308      	movs	r3, #8
 80047c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	69fa      	ldr	r2, [r7, #28]
 80047c8:	615a      	str	r2, [r3, #20]
          break;
 80047ca:	e003      	b.n	80047d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80047cc:	2300      	movs	r3, #0
 80047ce:	623b      	str	r3, [r7, #32]
          break;
 80047d0:	e000      	b.n	80047d4 <HAL_GPIO_Init+0x130>
          break;
 80047d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	2bff      	cmp	r3, #255	; 0xff
 80047d8:	d801      	bhi.n	80047de <HAL_GPIO_Init+0x13a>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	e001      	b.n	80047e2 <HAL_GPIO_Init+0x13e>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	3304      	adds	r3, #4
 80047e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	2bff      	cmp	r3, #255	; 0xff
 80047e8:	d802      	bhi.n	80047f0 <HAL_GPIO_Init+0x14c>
 80047ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	e002      	b.n	80047f6 <HAL_GPIO_Init+0x152>
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	3b08      	subs	r3, #8
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	210f      	movs	r1, #15
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	fa01 f303 	lsl.w	r3, r1, r3
 8004804:	43db      	mvns	r3, r3
 8004806:	401a      	ands	r2, r3
 8004808:	6a39      	ldr	r1, [r7, #32]
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	fa01 f303 	lsl.w	r3, r1, r3
 8004810:	431a      	orrs	r2, r3
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800481e:	2b00      	cmp	r3, #0
 8004820:	f000 80b1 	beq.w	8004986 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004824:	4b4d      	ldr	r3, [pc, #308]	; (800495c <HAL_GPIO_Init+0x2b8>)
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	4a4c      	ldr	r2, [pc, #304]	; (800495c <HAL_GPIO_Init+0x2b8>)
 800482a:	f043 0301 	orr.w	r3, r3, #1
 800482e:	6193      	str	r3, [r2, #24]
 8004830:	4b4a      	ldr	r3, [pc, #296]	; (800495c <HAL_GPIO_Init+0x2b8>)
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	60bb      	str	r3, [r7, #8]
 800483a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800483c:	4a48      	ldr	r2, [pc, #288]	; (8004960 <HAL_GPIO_Init+0x2bc>)
 800483e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004840:	089b      	lsrs	r3, r3, #2
 8004842:	3302      	adds	r3, #2
 8004844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004848:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	f003 0303 	and.w	r3, r3, #3
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	220f      	movs	r2, #15
 8004854:	fa02 f303 	lsl.w	r3, r2, r3
 8004858:	43db      	mvns	r3, r3
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	4013      	ands	r3, r2
 800485e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a40      	ldr	r2, [pc, #256]	; (8004964 <HAL_GPIO_Init+0x2c0>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d013      	beq.n	8004890 <HAL_GPIO_Init+0x1ec>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a3f      	ldr	r2, [pc, #252]	; (8004968 <HAL_GPIO_Init+0x2c4>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d00d      	beq.n	800488c <HAL_GPIO_Init+0x1e8>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a3e      	ldr	r2, [pc, #248]	; (800496c <HAL_GPIO_Init+0x2c8>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d007      	beq.n	8004888 <HAL_GPIO_Init+0x1e4>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a3d      	ldr	r2, [pc, #244]	; (8004970 <HAL_GPIO_Init+0x2cc>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d101      	bne.n	8004884 <HAL_GPIO_Init+0x1e0>
 8004880:	2303      	movs	r3, #3
 8004882:	e006      	b.n	8004892 <HAL_GPIO_Init+0x1ee>
 8004884:	2304      	movs	r3, #4
 8004886:	e004      	b.n	8004892 <HAL_GPIO_Init+0x1ee>
 8004888:	2302      	movs	r3, #2
 800488a:	e002      	b.n	8004892 <HAL_GPIO_Init+0x1ee>
 800488c:	2301      	movs	r3, #1
 800488e:	e000      	b.n	8004892 <HAL_GPIO_Init+0x1ee>
 8004890:	2300      	movs	r3, #0
 8004892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004894:	f002 0203 	and.w	r2, r2, #3
 8004898:	0092      	lsls	r2, r2, #2
 800489a:	4093      	lsls	r3, r2
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	4313      	orrs	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80048a2:	492f      	ldr	r1, [pc, #188]	; (8004960 <HAL_GPIO_Init+0x2bc>)
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	089b      	lsrs	r3, r3, #2
 80048a8:	3302      	adds	r3, #2
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d006      	beq.n	80048ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80048bc:	4b2d      	ldr	r3, [pc, #180]	; (8004974 <HAL_GPIO_Init+0x2d0>)
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	492c      	ldr	r1, [pc, #176]	; (8004974 <HAL_GPIO_Init+0x2d0>)
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	608b      	str	r3, [r1, #8]
 80048c8:	e006      	b.n	80048d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80048ca:	4b2a      	ldr	r3, [pc, #168]	; (8004974 <HAL_GPIO_Init+0x2d0>)
 80048cc:	689a      	ldr	r2, [r3, #8]
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	43db      	mvns	r3, r3
 80048d2:	4928      	ldr	r1, [pc, #160]	; (8004974 <HAL_GPIO_Init+0x2d0>)
 80048d4:	4013      	ands	r3, r2
 80048d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d006      	beq.n	80048f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80048e4:	4b23      	ldr	r3, [pc, #140]	; (8004974 <HAL_GPIO_Init+0x2d0>)
 80048e6:	68da      	ldr	r2, [r3, #12]
 80048e8:	4922      	ldr	r1, [pc, #136]	; (8004974 <HAL_GPIO_Init+0x2d0>)
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	60cb      	str	r3, [r1, #12]
 80048f0:	e006      	b.n	8004900 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80048f2:	4b20      	ldr	r3, [pc, #128]	; (8004974 <HAL_GPIO_Init+0x2d0>)
 80048f4:	68da      	ldr	r2, [r3, #12]
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	43db      	mvns	r3, r3
 80048fa:	491e      	ldr	r1, [pc, #120]	; (8004974 <HAL_GPIO_Init+0x2d0>)
 80048fc:	4013      	ands	r3, r2
 80048fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d006      	beq.n	800491a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800490c:	4b19      	ldr	r3, [pc, #100]	; (8004974 <HAL_GPIO_Init+0x2d0>)
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	4918      	ldr	r1, [pc, #96]	; (8004974 <HAL_GPIO_Init+0x2d0>)
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	4313      	orrs	r3, r2
 8004916:	604b      	str	r3, [r1, #4]
 8004918:	e006      	b.n	8004928 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800491a:	4b16      	ldr	r3, [pc, #88]	; (8004974 <HAL_GPIO_Init+0x2d0>)
 800491c:	685a      	ldr	r2, [r3, #4]
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	43db      	mvns	r3, r3
 8004922:	4914      	ldr	r1, [pc, #80]	; (8004974 <HAL_GPIO_Init+0x2d0>)
 8004924:	4013      	ands	r3, r2
 8004926:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d021      	beq.n	8004978 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004934:	4b0f      	ldr	r3, [pc, #60]	; (8004974 <HAL_GPIO_Init+0x2d0>)
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	490e      	ldr	r1, [pc, #56]	; (8004974 <HAL_GPIO_Init+0x2d0>)
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	4313      	orrs	r3, r2
 800493e:	600b      	str	r3, [r1, #0]
 8004940:	e021      	b.n	8004986 <HAL_GPIO_Init+0x2e2>
 8004942:	bf00      	nop
 8004944:	10320000 	.word	0x10320000
 8004948:	10310000 	.word	0x10310000
 800494c:	10220000 	.word	0x10220000
 8004950:	10210000 	.word	0x10210000
 8004954:	10120000 	.word	0x10120000
 8004958:	10110000 	.word	0x10110000
 800495c:	40021000 	.word	0x40021000
 8004960:	40010000 	.word	0x40010000
 8004964:	40010800 	.word	0x40010800
 8004968:	40010c00 	.word	0x40010c00
 800496c:	40011000 	.word	0x40011000
 8004970:	40011400 	.word	0x40011400
 8004974:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004978:	4b0b      	ldr	r3, [pc, #44]	; (80049a8 <HAL_GPIO_Init+0x304>)
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	43db      	mvns	r3, r3
 8004980:	4909      	ldr	r1, [pc, #36]	; (80049a8 <HAL_GPIO_Init+0x304>)
 8004982:	4013      	ands	r3, r2
 8004984:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004988:	3301      	adds	r3, #1
 800498a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	fa22 f303 	lsr.w	r3, r2, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	f47f ae8e 	bne.w	80046b8 <HAL_GPIO_Init+0x14>
  }
}
 800499c:	bf00      	nop
 800499e:	bf00      	nop
 80049a0:	372c      	adds	r7, #44	; 0x2c
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bc80      	pop	{r7}
 80049a6:	4770      	bx	lr
 80049a8:	40010400 	.word	0x40010400

080049ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	460b      	mov	r3, r1
 80049b6:	807b      	strh	r3, [r7, #2]
 80049b8:	4613      	mov	r3, r2
 80049ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049bc:	787b      	ldrb	r3, [r7, #1]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049c2:	887a      	ldrh	r2, [r7, #2]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80049c8:	e003      	b.n	80049d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80049ca:	887b      	ldrh	r3, [r7, #2]
 80049cc:	041a      	lsls	r2, r3, #16
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	611a      	str	r2, [r3, #16]
}
 80049d2:	bf00      	nop
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bc80      	pop	{r7}
 80049da:	4770      	bx	lr

080049dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e12b      	b.n	8004c46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d106      	bne.n	8004a08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7fe fb90 	bl	8003128 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2224      	movs	r2, #36	; 0x24
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f022 0201 	bic.w	r2, r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a40:	f001 fd70 	bl	8006524 <HAL_RCC_GetPCLK1Freq>
 8004a44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	4a81      	ldr	r2, [pc, #516]	; (8004c50 <HAL_I2C_Init+0x274>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d807      	bhi.n	8004a60 <HAL_I2C_Init+0x84>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4a80      	ldr	r2, [pc, #512]	; (8004c54 <HAL_I2C_Init+0x278>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	bf94      	ite	ls
 8004a58:	2301      	movls	r3, #1
 8004a5a:	2300      	movhi	r3, #0
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	e006      	b.n	8004a6e <HAL_I2C_Init+0x92>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4a7d      	ldr	r2, [pc, #500]	; (8004c58 <HAL_I2C_Init+0x27c>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	bf94      	ite	ls
 8004a68:	2301      	movls	r3, #1
 8004a6a:	2300      	movhi	r3, #0
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e0e7      	b.n	8004c46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4a78      	ldr	r2, [pc, #480]	; (8004c5c <HAL_I2C_Init+0x280>)
 8004a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7e:	0c9b      	lsrs	r3, r3, #18
 8004a80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	4a6a      	ldr	r2, [pc, #424]	; (8004c50 <HAL_I2C_Init+0x274>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d802      	bhi.n	8004ab0 <HAL_I2C_Init+0xd4>
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	3301      	adds	r3, #1
 8004aae:	e009      	b.n	8004ac4 <HAL_I2C_Init+0xe8>
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004ab6:	fb02 f303 	mul.w	r3, r2, r3
 8004aba:	4a69      	ldr	r2, [pc, #420]	; (8004c60 <HAL_I2C_Init+0x284>)
 8004abc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac0:	099b      	lsrs	r3, r3, #6
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6812      	ldr	r2, [r2, #0]
 8004ac8:	430b      	orrs	r3, r1
 8004aca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004ad6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	495c      	ldr	r1, [pc, #368]	; (8004c50 <HAL_I2C_Init+0x274>)
 8004ae0:	428b      	cmp	r3, r1
 8004ae2:	d819      	bhi.n	8004b18 <HAL_I2C_Init+0x13c>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	1e59      	subs	r1, r3, #1
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	005b      	lsls	r3, r3, #1
 8004aee:	fbb1 f3f3 	udiv	r3, r1, r3
 8004af2:	1c59      	adds	r1, r3, #1
 8004af4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004af8:	400b      	ands	r3, r1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00a      	beq.n	8004b14 <HAL_I2C_Init+0x138>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	1e59      	subs	r1, r3, #1
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	005b      	lsls	r3, r3, #1
 8004b08:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b12:	e051      	b.n	8004bb8 <HAL_I2C_Init+0x1dc>
 8004b14:	2304      	movs	r3, #4
 8004b16:	e04f      	b.n	8004bb8 <HAL_I2C_Init+0x1dc>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d111      	bne.n	8004b44 <HAL_I2C_Init+0x168>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	1e58      	subs	r0, r3, #1
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6859      	ldr	r1, [r3, #4]
 8004b28:	460b      	mov	r3, r1
 8004b2a:	005b      	lsls	r3, r3, #1
 8004b2c:	440b      	add	r3, r1
 8004b2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b32:	3301      	adds	r3, #1
 8004b34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	bf0c      	ite	eq
 8004b3c:	2301      	moveq	r3, #1
 8004b3e:	2300      	movne	r3, #0
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	e012      	b.n	8004b6a <HAL_I2C_Init+0x18e>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	1e58      	subs	r0, r3, #1
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6859      	ldr	r1, [r3, #4]
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	440b      	add	r3, r1
 8004b52:	0099      	lsls	r1, r3, #2
 8004b54:	440b      	add	r3, r1
 8004b56:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	bf0c      	ite	eq
 8004b64:	2301      	moveq	r3, #1
 8004b66:	2300      	movne	r3, #0
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <HAL_I2C_Init+0x196>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e022      	b.n	8004bb8 <HAL_I2C_Init+0x1dc>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10e      	bne.n	8004b98 <HAL_I2C_Init+0x1bc>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	1e58      	subs	r0, r3, #1
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6859      	ldr	r1, [r3, #4]
 8004b82:	460b      	mov	r3, r1
 8004b84:	005b      	lsls	r3, r3, #1
 8004b86:	440b      	add	r3, r1
 8004b88:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b96:	e00f      	b.n	8004bb8 <HAL_I2C_Init+0x1dc>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	1e58      	subs	r0, r3, #1
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6859      	ldr	r1, [r3, #4]
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	440b      	add	r3, r1
 8004ba6:	0099      	lsls	r1, r3, #2
 8004ba8:	440b      	add	r3, r1
 8004baa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bae:	3301      	adds	r3, #1
 8004bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bb8:	6879      	ldr	r1, [r7, #4]
 8004bba:	6809      	ldr	r1, [r1, #0]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	69da      	ldr	r2, [r3, #28]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004be6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	6911      	ldr	r1, [r2, #16]
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	68d2      	ldr	r2, [r2, #12]
 8004bf2:	4311      	orrs	r1, r2
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	6812      	ldr	r2, [r2, #0]
 8004bf8:	430b      	orrs	r3, r1
 8004bfa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	695a      	ldr	r2, [r3, #20]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	431a      	orrs	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	430a      	orrs	r2, r1
 8004c16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 0201 	orr.w	r2, r2, #1
 8004c26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2220      	movs	r2, #32
 8004c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	000186a0 	.word	0x000186a0
 8004c54:	001e847f 	.word	0x001e847f
 8004c58:	003d08ff 	.word	0x003d08ff
 8004c5c:	431bde83 	.word	0x431bde83
 8004c60:	10624dd3 	.word	0x10624dd3

08004c64 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b088      	sub	sp, #32
 8004c68:	af02      	add	r7, sp, #8
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	607a      	str	r2, [r7, #4]
 8004c6e:	461a      	mov	r2, r3
 8004c70:	460b      	mov	r3, r1
 8004c72:	817b      	strh	r3, [r7, #10]
 8004c74:	4613      	mov	r3, r2
 8004c76:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c78:	f7fe fd6a 	bl	8003750 <HAL_GetTick>
 8004c7c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b20      	cmp	r3, #32
 8004c88:	f040 80e0 	bne.w	8004e4c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	2319      	movs	r3, #25
 8004c92:	2201      	movs	r2, #1
 8004c94:	4970      	ldr	r1, [pc, #448]	; (8004e58 <HAL_I2C_Master_Transmit+0x1f4>)
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 fe44 	bl	8005924 <I2C_WaitOnFlagUntilTimeout>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d001      	beq.n	8004ca6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	e0d3      	b.n	8004e4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d101      	bne.n	8004cb4 <HAL_I2C_Master_Transmit+0x50>
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	e0cc      	b.n	8004e4e <HAL_I2C_Master_Transmit+0x1ea>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d007      	beq.n	8004cda <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f042 0201 	orr.w	r2, r2, #1
 8004cd8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ce8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2221      	movs	r2, #33	; 0x21
 8004cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2210      	movs	r2, #16
 8004cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	893a      	ldrh	r2, [r7, #8]
 8004d0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	4a50      	ldr	r2, [pc, #320]	; (8004e5c <HAL_I2C_Master_Transmit+0x1f8>)
 8004d1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004d1c:	8979      	ldrh	r1, [r7, #10]
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	6a3a      	ldr	r2, [r7, #32]
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f000 fbfe 	bl	8005524 <I2C_MasterRequestWrite>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e08d      	b.n	8004e4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d32:	2300      	movs	r3, #0
 8004d34:	613b      	str	r3, [r7, #16]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	613b      	str	r3, [r7, #16]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	613b      	str	r3, [r7, #16]
 8004d46:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004d48:	e066      	b.n	8004e18 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	6a39      	ldr	r1, [r7, #32]
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f000 ff02 	bl	8005b58 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00d      	beq.n	8004d76 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	2b04      	cmp	r3, #4
 8004d60:	d107      	bne.n	8004d72 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e06b      	b.n	8004e4e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7a:	781a      	ldrb	r2, [r3, #0]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d86:	1c5a      	adds	r2, r3, #1
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	3b01      	subs	r3, #1
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	695b      	ldr	r3, [r3, #20]
 8004dac:	f003 0304 	and.w	r3, r3, #4
 8004db0:	2b04      	cmp	r3, #4
 8004db2:	d11b      	bne.n	8004dec <HAL_I2C_Master_Transmit+0x188>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d017      	beq.n	8004dec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc0:	781a      	ldrb	r2, [r3, #0]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dcc:	1c5a      	adds	r2, r3, #1
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de4:	3b01      	subs	r3, #1
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	6a39      	ldr	r1, [r7, #32]
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f000 fef9 	bl	8005be8 <I2C_WaitOnBTFFlagUntilTimeout>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00d      	beq.n	8004e18 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e00:	2b04      	cmp	r3, #4
 8004e02:	d107      	bne.n	8004e14 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e12:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e01a      	b.n	8004e4e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d194      	bne.n	8004d4a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2220      	movs	r2, #32
 8004e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	e000      	b.n	8004e4e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004e4c:	2302      	movs	r3, #2
  }
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3718      	adds	r7, #24
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	00100002 	.word	0x00100002
 8004e5c:	ffff0000 	.word	0xffff0000

08004e60 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b088      	sub	sp, #32
 8004e64:	af02      	add	r7, sp, #8
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	4608      	mov	r0, r1
 8004e6a:	4611      	mov	r1, r2
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	4603      	mov	r3, r0
 8004e70:	817b      	strh	r3, [r7, #10]
 8004e72:	460b      	mov	r3, r1
 8004e74:	813b      	strh	r3, [r7, #8]
 8004e76:	4613      	mov	r3, r2
 8004e78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e7a:	f7fe fc69 	bl	8003750 <HAL_GetTick>
 8004e7e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	2b20      	cmp	r3, #32
 8004e8a:	f040 80d9 	bne.w	8005040 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	9300      	str	r3, [sp, #0]
 8004e92:	2319      	movs	r3, #25
 8004e94:	2201      	movs	r2, #1
 8004e96:	496d      	ldr	r1, [pc, #436]	; (800504c <HAL_I2C_Mem_Write+0x1ec>)
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f000 fd43 	bl	8005924 <I2C_WaitOnFlagUntilTimeout>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	e0cc      	b.n	8005042 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d101      	bne.n	8004eb6 <HAL_I2C_Mem_Write+0x56>
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	e0c5      	b.n	8005042 <HAL_I2C_Mem_Write+0x1e2>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d007      	beq.n	8004edc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f042 0201 	orr.w	r2, r2, #1
 8004eda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004eea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2221      	movs	r2, #33	; 0x21
 8004ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2240      	movs	r2, #64	; 0x40
 8004ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6a3a      	ldr	r2, [r7, #32]
 8004f06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004f0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	4a4d      	ldr	r2, [pc, #308]	; (8005050 <HAL_I2C_Mem_Write+0x1f0>)
 8004f1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f1e:	88f8      	ldrh	r0, [r7, #6]
 8004f20:	893a      	ldrh	r2, [r7, #8]
 8004f22:	8979      	ldrh	r1, [r7, #10]
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	9301      	str	r3, [sp, #4]
 8004f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f000 fb7a 	bl	8005628 <I2C_RequestMemoryWrite>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d052      	beq.n	8004fe0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e081      	b.n	8005042 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f000 fe08 	bl	8005b58 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00d      	beq.n	8004f6a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	d107      	bne.n	8004f66 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e06b      	b.n	8005042 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6e:	781a      	ldrb	r2, [r3, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	1c5a      	adds	r2, r3, #1
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f84:	3b01      	subs	r3, #1
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	3b01      	subs	r3, #1
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	f003 0304 	and.w	r3, r3, #4
 8004fa4:	2b04      	cmp	r3, #4
 8004fa6:	d11b      	bne.n	8004fe0 <HAL_I2C_Mem_Write+0x180>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d017      	beq.n	8004fe0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb4:	781a      	ldrb	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc0:	1c5a      	adds	r2, r3, #1
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1aa      	bne.n	8004f3e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f000 fdfb 	bl	8005be8 <I2C_WaitOnBTFFlagUntilTimeout>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00d      	beq.n	8005014 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffc:	2b04      	cmp	r3, #4
 8004ffe:	d107      	bne.n	8005010 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800500e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e016      	b.n	8005042 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005022:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2220      	movs	r2, #32
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800503c:	2300      	movs	r3, #0
 800503e:	e000      	b.n	8005042 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005040:	2302      	movs	r3, #2
  }
}
 8005042:	4618      	mov	r0, r3
 8005044:	3718      	adds	r7, #24
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	00100002 	.word	0x00100002
 8005050:	ffff0000 	.word	0xffff0000

08005054 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b08c      	sub	sp, #48	; 0x30
 8005058:	af02      	add	r7, sp, #8
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	4608      	mov	r0, r1
 800505e:	4611      	mov	r1, r2
 8005060:	461a      	mov	r2, r3
 8005062:	4603      	mov	r3, r0
 8005064:	817b      	strh	r3, [r7, #10]
 8005066:	460b      	mov	r3, r1
 8005068:	813b      	strh	r3, [r7, #8]
 800506a:	4613      	mov	r3, r2
 800506c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800506e:	2300      	movs	r3, #0
 8005070:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005072:	f7fe fb6d 	bl	8003750 <HAL_GetTick>
 8005076:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b20      	cmp	r3, #32
 8005082:	f040 8244 	bne.w	800550e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005088:	9300      	str	r3, [sp, #0]
 800508a:	2319      	movs	r3, #25
 800508c:	2201      	movs	r2, #1
 800508e:	4982      	ldr	r1, [pc, #520]	; (8005298 <HAL_I2C_Mem_Read+0x244>)
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 fc47 	bl	8005924 <I2C_WaitOnFlagUntilTimeout>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d001      	beq.n	80050a0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800509c:	2302      	movs	r3, #2
 800509e:	e237      	b.n	8005510 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d101      	bne.n	80050ae <HAL_I2C_Mem_Read+0x5a>
 80050aa:	2302      	movs	r3, #2
 80050ac:	e230      	b.n	8005510 <HAL_I2C_Mem_Read+0x4bc>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d007      	beq.n	80050d4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f042 0201 	orr.w	r2, r2, #1
 80050d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2222      	movs	r2, #34	; 0x22
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2240      	movs	r2, #64	; 0x40
 80050f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005104:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800510a:	b29a      	uxth	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	4a62      	ldr	r2, [pc, #392]	; (800529c <HAL_I2C_Mem_Read+0x248>)
 8005114:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005116:	88f8      	ldrh	r0, [r7, #6]
 8005118:	893a      	ldrh	r2, [r7, #8]
 800511a:	8979      	ldrh	r1, [r7, #10]
 800511c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511e:	9301      	str	r3, [sp, #4]
 8005120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005122:	9300      	str	r3, [sp, #0]
 8005124:	4603      	mov	r3, r0
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	f000 fb14 	bl	8005754 <I2C_RequestMemoryRead>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d001      	beq.n	8005136 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e1ec      	b.n	8005510 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800513a:	2b00      	cmp	r3, #0
 800513c:	d113      	bne.n	8005166 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800513e:	2300      	movs	r3, #0
 8005140:	61fb      	str	r3, [r7, #28]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	61fb      	str	r3, [r7, #28]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	61fb      	str	r3, [r7, #28]
 8005152:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	e1c0      	b.n	80054e8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800516a:	2b01      	cmp	r3, #1
 800516c:	d11e      	bne.n	80051ac <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800517c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800517e:	b672      	cpsid	i
}
 8005180:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005182:	2300      	movs	r3, #0
 8005184:	61bb      	str	r3, [r7, #24]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	61bb      	str	r3, [r7, #24]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	61bb      	str	r3, [r7, #24]
 8005196:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80051a8:	b662      	cpsie	i
}
 80051aa:	e035      	b.n	8005218 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d11e      	bne.n	80051f2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80051c4:	b672      	cpsid	i
}
 80051c6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051c8:	2300      	movs	r3, #0
 80051ca:	617b      	str	r3, [r7, #20]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	617b      	str	r3, [r7, #20]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	617b      	str	r3, [r7, #20]
 80051dc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80051ee:	b662      	cpsie	i
}
 80051f0:	e012      	b.n	8005218 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005200:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005202:	2300      	movs	r3, #0
 8005204:	613b      	str	r3, [r7, #16]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	613b      	str	r3, [r7, #16]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	613b      	str	r3, [r7, #16]
 8005216:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005218:	e166      	b.n	80054e8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800521e:	2b03      	cmp	r3, #3
 8005220:	f200 811f 	bhi.w	8005462 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005228:	2b01      	cmp	r3, #1
 800522a:	d123      	bne.n	8005274 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800522c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800522e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 fd21 	bl	8005c78 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d001      	beq.n	8005240 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e167      	b.n	8005510 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	691a      	ldr	r2, [r3, #16]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	b2d2      	uxtb	r2, r2
 800524c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005252:	1c5a      	adds	r2, r3, #1
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800525c:	3b01      	subs	r3, #1
 800525e:	b29a      	uxth	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005268:	b29b      	uxth	r3, r3
 800526a:	3b01      	subs	r3, #1
 800526c:	b29a      	uxth	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005272:	e139      	b.n	80054e8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005278:	2b02      	cmp	r3, #2
 800527a:	d152      	bne.n	8005322 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005282:	2200      	movs	r2, #0
 8005284:	4906      	ldr	r1, [pc, #24]	; (80052a0 <HAL_I2C_Mem_Read+0x24c>)
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f000 fb4c 	bl	8005924 <I2C_WaitOnFlagUntilTimeout>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d008      	beq.n	80052a4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e13c      	b.n	8005510 <HAL_I2C_Mem_Read+0x4bc>
 8005296:	bf00      	nop
 8005298:	00100002 	.word	0x00100002
 800529c:	ffff0000 	.word	0xffff0000
 80052a0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80052a4:	b672      	cpsid	i
}
 80052a6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	691a      	ldr	r2, [r3, #16]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c2:	b2d2      	uxtb	r2, r2
 80052c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ca:	1c5a      	adds	r2, r3, #1
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052d4:	3b01      	subs	r3, #1
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	3b01      	subs	r3, #1
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80052ea:	b662      	cpsie	i
}
 80052ec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	691a      	ldr	r2, [r3, #16]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f8:	b2d2      	uxtb	r2, r2
 80052fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005300:	1c5a      	adds	r2, r3, #1
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800530a:	3b01      	subs	r3, #1
 800530c:	b29a      	uxth	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005316:	b29b      	uxth	r3, r3
 8005318:	3b01      	subs	r3, #1
 800531a:	b29a      	uxth	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005320:	e0e2      	b.n	80054e8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	9300      	str	r3, [sp, #0]
 8005326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005328:	2200      	movs	r2, #0
 800532a:	497b      	ldr	r1, [pc, #492]	; (8005518 <HAL_I2C_Mem_Read+0x4c4>)
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f000 faf9 	bl	8005924 <I2C_WaitOnFlagUntilTimeout>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d001      	beq.n	800533c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e0e9      	b.n	8005510 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800534a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800534c:	b672      	cpsid	i
}
 800534e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	691a      	ldr	r2, [r3, #16]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535a:	b2d2      	uxtb	r2, r2
 800535c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005362:	1c5a      	adds	r2, r3, #1
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800536c:	3b01      	subs	r3, #1
 800536e:	b29a      	uxth	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005378:	b29b      	uxth	r3, r3
 800537a:	3b01      	subs	r3, #1
 800537c:	b29a      	uxth	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005382:	4b66      	ldr	r3, [pc, #408]	; (800551c <HAL_I2C_Mem_Read+0x4c8>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	08db      	lsrs	r3, r3, #3
 8005388:	4a65      	ldr	r2, [pc, #404]	; (8005520 <HAL_I2C_Mem_Read+0x4cc>)
 800538a:	fba2 2303 	umull	r2, r3, r2, r3
 800538e:	0a1a      	lsrs	r2, r3, #8
 8005390:	4613      	mov	r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4413      	add	r3, r2
 8005396:	00da      	lsls	r2, r3, #3
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800539c:	6a3b      	ldr	r3, [r7, #32]
 800539e:	3b01      	subs	r3, #1
 80053a0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80053a2:	6a3b      	ldr	r3, [r7, #32]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d118      	bne.n	80053da <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2220      	movs	r2, #32
 80053b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c2:	f043 0220 	orr.w	r2, r3, #32
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80053ca:	b662      	cpsie	i
}
 80053cc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e09a      	b.n	8005510 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	f003 0304 	and.w	r3, r3, #4
 80053e4:	2b04      	cmp	r3, #4
 80053e6:	d1d9      	bne.n	800539c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	691a      	ldr	r2, [r3, #16]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005402:	b2d2      	uxtb	r2, r2
 8005404:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540a:	1c5a      	adds	r2, r3, #1
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005414:	3b01      	subs	r3, #1
 8005416:	b29a      	uxth	r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005420:	b29b      	uxth	r3, r3
 8005422:	3b01      	subs	r3, #1
 8005424:	b29a      	uxth	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800542a:	b662      	cpsie	i
}
 800542c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	691a      	ldr	r2, [r3, #16]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005438:	b2d2      	uxtb	r2, r2
 800543a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005440:	1c5a      	adds	r2, r3, #1
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800544a:	3b01      	subs	r3, #1
 800544c:	b29a      	uxth	r2, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005456:	b29b      	uxth	r3, r3
 8005458:	3b01      	subs	r3, #1
 800545a:	b29a      	uxth	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005460:	e042      	b.n	80054e8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005464:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f000 fc06 	bl	8005c78 <I2C_WaitOnRXNEFlagUntilTimeout>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e04c      	b.n	8005510 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	691a      	ldr	r2, [r3, #16]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005480:	b2d2      	uxtb	r2, r2
 8005482:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005488:	1c5a      	adds	r2, r3, #1
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005492:	3b01      	subs	r3, #1
 8005494:	b29a      	uxth	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800549e:	b29b      	uxth	r3, r3
 80054a0:	3b01      	subs	r3, #1
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	f003 0304 	and.w	r3, r3, #4
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	d118      	bne.n	80054e8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	691a      	ldr	r2, [r3, #16]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	b2d2      	uxtb	r2, r2
 80054c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	1c5a      	adds	r2, r3, #1
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054d2:	3b01      	subs	r3, #1
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054de:	b29b      	uxth	r3, r3
 80054e0:	3b01      	subs	r3, #1
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f47f ae94 	bne.w	800521a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2220      	movs	r2, #32
 80054f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800550a:	2300      	movs	r3, #0
 800550c:	e000      	b.n	8005510 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800550e:	2302      	movs	r3, #2
  }
}
 8005510:	4618      	mov	r0, r3
 8005512:	3728      	adds	r7, #40	; 0x28
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	00010004 	.word	0x00010004
 800551c:	2000000c 	.word	0x2000000c
 8005520:	14f8b589 	.word	0x14f8b589

08005524 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b088      	sub	sp, #32
 8005528:	af02      	add	r7, sp, #8
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	607a      	str	r2, [r7, #4]
 800552e:	603b      	str	r3, [r7, #0]
 8005530:	460b      	mov	r3, r1
 8005532:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005538:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	2b08      	cmp	r3, #8
 800553e:	d006      	beq.n	800554e <I2C_MasterRequestWrite+0x2a>
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d003      	beq.n	800554e <I2C_MasterRequestWrite+0x2a>
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800554c:	d108      	bne.n	8005560 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	e00b      	b.n	8005578 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005564:	2b12      	cmp	r3, #18
 8005566:	d107      	bne.n	8005578 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005576:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f000 f9cd 	bl	8005924 <I2C_WaitOnFlagUntilTimeout>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00d      	beq.n	80055ac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800559a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800559e:	d103      	bne.n	80055a8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e035      	b.n	8005618 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055b4:	d108      	bne.n	80055c8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055b6:	897b      	ldrh	r3, [r7, #10]
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	461a      	mov	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055c4:	611a      	str	r2, [r3, #16]
 80055c6:	e01b      	b.n	8005600 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80055c8:	897b      	ldrh	r3, [r7, #10]
 80055ca:	11db      	asrs	r3, r3, #7
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	f003 0306 	and.w	r3, r3, #6
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	f063 030f 	orn	r3, r3, #15
 80055d8:	b2da      	uxtb	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	490e      	ldr	r1, [pc, #56]	; (8005620 <I2C_MasterRequestWrite+0xfc>)
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f000 fa16 	bl	8005a18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d001      	beq.n	80055f6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e010      	b.n	8005618 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80055f6:	897b      	ldrh	r3, [r7, #10]
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	4907      	ldr	r1, [pc, #28]	; (8005624 <I2C_MasterRequestWrite+0x100>)
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f000 fa06 	bl	8005a18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e000      	b.n	8005618 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3718      	adds	r7, #24
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	00010008 	.word	0x00010008
 8005624:	00010002 	.word	0x00010002

08005628 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b088      	sub	sp, #32
 800562c:	af02      	add	r7, sp, #8
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	4608      	mov	r0, r1
 8005632:	4611      	mov	r1, r2
 8005634:	461a      	mov	r2, r3
 8005636:	4603      	mov	r3, r0
 8005638:	817b      	strh	r3, [r7, #10]
 800563a:	460b      	mov	r3, r1
 800563c:	813b      	strh	r3, [r7, #8]
 800563e:	4613      	mov	r3, r2
 8005640:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005650:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005654:	9300      	str	r3, [sp, #0]
 8005656:	6a3b      	ldr	r3, [r7, #32]
 8005658:	2200      	movs	r2, #0
 800565a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f000 f960 	bl	8005924 <I2C_WaitOnFlagUntilTimeout>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00d      	beq.n	8005686 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005678:	d103      	bne.n	8005682 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005680:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e05f      	b.n	8005746 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005686:	897b      	ldrh	r3, [r7, #10]
 8005688:	b2db      	uxtb	r3, r3
 800568a:	461a      	mov	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005694:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005698:	6a3a      	ldr	r2, [r7, #32]
 800569a:	492d      	ldr	r1, [pc, #180]	; (8005750 <I2C_RequestMemoryWrite+0x128>)
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f000 f9bb 	bl	8005a18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d001      	beq.n	80056ac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e04c      	b.n	8005746 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056ac:	2300      	movs	r3, #0
 80056ae:	617b      	str	r3, [r7, #20]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	617b      	str	r3, [r7, #20]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	617b      	str	r3, [r7, #20]
 80056c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056c4:	6a39      	ldr	r1, [r7, #32]
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f000 fa46 	bl	8005b58 <I2C_WaitOnTXEFlagUntilTimeout>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00d      	beq.n	80056ee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d6:	2b04      	cmp	r3, #4
 80056d8:	d107      	bne.n	80056ea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e02b      	b.n	8005746 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80056ee:	88fb      	ldrh	r3, [r7, #6]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d105      	bne.n	8005700 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056f4:	893b      	ldrh	r3, [r7, #8]
 80056f6:	b2da      	uxtb	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	611a      	str	r2, [r3, #16]
 80056fe:	e021      	b.n	8005744 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005700:	893b      	ldrh	r3, [r7, #8]
 8005702:	0a1b      	lsrs	r3, r3, #8
 8005704:	b29b      	uxth	r3, r3
 8005706:	b2da      	uxtb	r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800570e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005710:	6a39      	ldr	r1, [r7, #32]
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f000 fa20 	bl	8005b58 <I2C_WaitOnTXEFlagUntilTimeout>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00d      	beq.n	800573a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005722:	2b04      	cmp	r3, #4
 8005724:	d107      	bne.n	8005736 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005734:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e005      	b.n	8005746 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800573a:	893b      	ldrh	r3, [r7, #8]
 800573c:	b2da      	uxtb	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3718      	adds	r7, #24
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	00010002 	.word	0x00010002

08005754 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b088      	sub	sp, #32
 8005758:	af02      	add	r7, sp, #8
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	4608      	mov	r0, r1
 800575e:	4611      	mov	r1, r2
 8005760:	461a      	mov	r2, r3
 8005762:	4603      	mov	r3, r0
 8005764:	817b      	strh	r3, [r7, #10]
 8005766:	460b      	mov	r3, r1
 8005768:	813b      	strh	r3, [r7, #8]
 800576a:	4613      	mov	r3, r2
 800576c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800577c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800578c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800578e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005790:	9300      	str	r3, [sp, #0]
 8005792:	6a3b      	ldr	r3, [r7, #32]
 8005794:	2200      	movs	r2, #0
 8005796:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f000 f8c2 	bl	8005924 <I2C_WaitOnFlagUntilTimeout>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00d      	beq.n	80057c2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057b4:	d103      	bne.n	80057be <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e0aa      	b.n	8005918 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80057c2:	897b      	ldrh	r3, [r7, #10]
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	461a      	mov	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80057d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d4:	6a3a      	ldr	r2, [r7, #32]
 80057d6:	4952      	ldr	r1, [pc, #328]	; (8005920 <I2C_RequestMemoryRead+0x1cc>)
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f000 f91d 	bl	8005a18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d001      	beq.n	80057e8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e097      	b.n	8005918 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057e8:	2300      	movs	r3, #0
 80057ea:	617b      	str	r3, [r7, #20]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	617b      	str	r3, [r7, #20]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	617b      	str	r3, [r7, #20]
 80057fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005800:	6a39      	ldr	r1, [r7, #32]
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f000 f9a8 	bl	8005b58 <I2C_WaitOnTXEFlagUntilTimeout>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00d      	beq.n	800582a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005812:	2b04      	cmp	r3, #4
 8005814:	d107      	bne.n	8005826 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005824:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e076      	b.n	8005918 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800582a:	88fb      	ldrh	r3, [r7, #6]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d105      	bne.n	800583c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005830:	893b      	ldrh	r3, [r7, #8]
 8005832:	b2da      	uxtb	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	611a      	str	r2, [r3, #16]
 800583a:	e021      	b.n	8005880 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800583c:	893b      	ldrh	r3, [r7, #8]
 800583e:	0a1b      	lsrs	r3, r3, #8
 8005840:	b29b      	uxth	r3, r3
 8005842:	b2da      	uxtb	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800584a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800584c:	6a39      	ldr	r1, [r7, #32]
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f000 f982 	bl	8005b58 <I2C_WaitOnTXEFlagUntilTimeout>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00d      	beq.n	8005876 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585e:	2b04      	cmp	r3, #4
 8005860:	d107      	bne.n	8005872 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005870:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e050      	b.n	8005918 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005876:	893b      	ldrh	r3, [r7, #8]
 8005878:	b2da      	uxtb	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005882:	6a39      	ldr	r1, [r7, #32]
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f000 f967 	bl	8005b58 <I2C_WaitOnTXEFlagUntilTimeout>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00d      	beq.n	80058ac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005894:	2b04      	cmp	r3, #4
 8005896:	d107      	bne.n	80058a8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058a6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e035      	b.n	8005918 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058ba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	6a3b      	ldr	r3, [r7, #32]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 f82b 	bl	8005924 <I2C_WaitOnFlagUntilTimeout>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00d      	beq.n	80058f0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058e2:	d103      	bne.n	80058ec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e013      	b.n	8005918 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80058f0:	897b      	ldrh	r3, [r7, #10]
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	f043 0301 	orr.w	r3, r3, #1
 80058f8:	b2da      	uxtb	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005902:	6a3a      	ldr	r2, [r7, #32]
 8005904:	4906      	ldr	r1, [pc, #24]	; (8005920 <I2C_RequestMemoryRead+0x1cc>)
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	f000 f886 	bl	8005a18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d001      	beq.n	8005916 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e000      	b.n	8005918 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3718      	adds	r7, #24
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	00010002 	.word	0x00010002

08005924 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	603b      	str	r3, [r7, #0]
 8005930:	4613      	mov	r3, r2
 8005932:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005934:	e048      	b.n	80059c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800593c:	d044      	beq.n	80059c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800593e:	f7fd ff07 	bl	8003750 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	683a      	ldr	r2, [r7, #0]
 800594a:	429a      	cmp	r2, r3
 800594c:	d302      	bcc.n	8005954 <I2C_WaitOnFlagUntilTimeout+0x30>
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d139      	bne.n	80059c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	0c1b      	lsrs	r3, r3, #16
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b01      	cmp	r3, #1
 800595c:	d10d      	bne.n	800597a <I2C_WaitOnFlagUntilTimeout+0x56>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	43da      	mvns	r2, r3
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	4013      	ands	r3, r2
 800596a:	b29b      	uxth	r3, r3
 800596c:	2b00      	cmp	r3, #0
 800596e:	bf0c      	ite	eq
 8005970:	2301      	moveq	r3, #1
 8005972:	2300      	movne	r3, #0
 8005974:	b2db      	uxtb	r3, r3
 8005976:	461a      	mov	r2, r3
 8005978:	e00c      	b.n	8005994 <I2C_WaitOnFlagUntilTimeout+0x70>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	43da      	mvns	r2, r3
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	4013      	ands	r3, r2
 8005986:	b29b      	uxth	r3, r3
 8005988:	2b00      	cmp	r3, #0
 800598a:	bf0c      	ite	eq
 800598c:	2301      	moveq	r3, #1
 800598e:	2300      	movne	r3, #0
 8005990:	b2db      	uxtb	r3, r3
 8005992:	461a      	mov	r2, r3
 8005994:	79fb      	ldrb	r3, [r7, #7]
 8005996:	429a      	cmp	r2, r3
 8005998:	d116      	bne.n	80059c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2220      	movs	r2, #32
 80059a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b4:	f043 0220 	orr.w	r2, r3, #32
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e023      	b.n	8005a10 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	0c1b      	lsrs	r3, r3, #16
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d10d      	bne.n	80059ee <I2C_WaitOnFlagUntilTimeout+0xca>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	695b      	ldr	r3, [r3, #20]
 80059d8:	43da      	mvns	r2, r3
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	4013      	ands	r3, r2
 80059de:	b29b      	uxth	r3, r3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	bf0c      	ite	eq
 80059e4:	2301      	moveq	r3, #1
 80059e6:	2300      	movne	r3, #0
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	461a      	mov	r2, r3
 80059ec:	e00c      	b.n	8005a08 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	43da      	mvns	r2, r3
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	4013      	ands	r3, r2
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	bf0c      	ite	eq
 8005a00:	2301      	moveq	r3, #1
 8005a02:	2300      	movne	r3, #0
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	461a      	mov	r2, r3
 8005a08:	79fb      	ldrb	r3, [r7, #7]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d093      	beq.n	8005936 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3710      	adds	r7, #16
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
 8005a24:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a26:	e071      	b.n	8005b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a36:	d123      	bne.n	8005a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a46:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6c:	f043 0204 	orr.w	r2, r3, #4
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e067      	b.n	8005b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a86:	d041      	beq.n	8005b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a88:	f7fd fe62 	bl	8003750 <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d302      	bcc.n	8005a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d136      	bne.n	8005b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	0c1b      	lsrs	r3, r3, #16
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d10c      	bne.n	8005ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	43da      	mvns	r2, r3
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	bf14      	ite	ne
 8005aba:	2301      	movne	r3, #1
 8005abc:	2300      	moveq	r3, #0
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	e00b      	b.n	8005ada <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	43da      	mvns	r2, r3
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	4013      	ands	r3, r2
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	bf14      	ite	ne
 8005ad4:	2301      	movne	r3, #1
 8005ad6:	2300      	moveq	r3, #0
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d016      	beq.n	8005b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af8:	f043 0220 	orr.w	r2, r3, #32
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e021      	b.n	8005b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	0c1b      	lsrs	r3, r3, #16
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d10c      	bne.n	8005b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	43da      	mvns	r2, r3
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	4013      	ands	r3, r2
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	bf14      	ite	ne
 8005b28:	2301      	movne	r3, #1
 8005b2a:	2300      	moveq	r3, #0
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	e00b      	b.n	8005b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	43da      	mvns	r2, r3
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	bf14      	ite	ne
 8005b42:	2301      	movne	r3, #1
 8005b44:	2300      	moveq	r3, #0
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f47f af6d 	bne.w	8005a28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b64:	e034      	b.n	8005bd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f000 f8e3 	bl	8005d32 <I2C_IsAcknowledgeFailed>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e034      	b.n	8005be0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7c:	d028      	beq.n	8005bd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b7e:	f7fd fde7 	bl	8003750 <HAL_GetTick>
 8005b82:	4602      	mov	r2, r0
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d302      	bcc.n	8005b94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d11d      	bne.n	8005bd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b9e:	2b80      	cmp	r3, #128	; 0x80
 8005ba0:	d016      	beq.n	8005bd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2220      	movs	r2, #32
 8005bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbc:	f043 0220 	orr.w	r2, r3, #32
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e007      	b.n	8005be0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bda:	2b80      	cmp	r3, #128	; 0x80
 8005bdc:	d1c3      	bne.n	8005b66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005bf4:	e034      	b.n	8005c60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005bf6:	68f8      	ldr	r0, [r7, #12]
 8005bf8:	f000 f89b 	bl	8005d32 <I2C_IsAcknowledgeFailed>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d001      	beq.n	8005c06 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e034      	b.n	8005c70 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0c:	d028      	beq.n	8005c60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c0e:	f7fd fd9f 	bl	8003750 <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d302      	bcc.n	8005c24 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d11d      	bne.n	8005c60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	f003 0304 	and.w	r3, r3, #4
 8005c2e:	2b04      	cmp	r3, #4
 8005c30:	d016      	beq.n	8005c60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2220      	movs	r2, #32
 8005c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4c:	f043 0220 	orr.w	r2, r3, #32
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e007      	b.n	8005c70 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	f003 0304 	and.w	r3, r3, #4
 8005c6a:	2b04      	cmp	r3, #4
 8005c6c:	d1c3      	bne.n	8005bf6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c84:	e049      	b.n	8005d1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	695b      	ldr	r3, [r3, #20]
 8005c8c:	f003 0310 	and.w	r3, r3, #16
 8005c90:	2b10      	cmp	r3, #16
 8005c92:	d119      	bne.n	8005cc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f06f 0210 	mvn.w	r2, #16
 8005c9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2220      	movs	r2, #32
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e030      	b.n	8005d2a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cc8:	f7fd fd42 	bl	8003750 <HAL_GetTick>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d302      	bcc.n	8005cde <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d11d      	bne.n	8005d1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	695b      	ldr	r3, [r3, #20]
 8005ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce8:	2b40      	cmp	r3, #64	; 0x40
 8005cea:	d016      	beq.n	8005d1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2220      	movs	r2, #32
 8005cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d06:	f043 0220 	orr.w	r2, r3, #32
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e007      	b.n	8005d2a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	695b      	ldr	r3, [r3, #20]
 8005d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d24:	2b40      	cmp	r3, #64	; 0x40
 8005d26:	d1ae      	bne.n	8005c86 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005d32:	b480      	push	{r7}
 8005d34:	b083      	sub	sp, #12
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	695b      	ldr	r3, [r3, #20]
 8005d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d48:	d11b      	bne.n	8005d82 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d52:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2220      	movs	r2, #32
 8005d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6e:	f043 0204 	orr.w	r2, r3, #4
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e000      	b.n	8005d84 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bc80      	pop	{r7}
 8005d8c:	4770      	bx	lr
	...

08005d90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e272      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f000 8087 	beq.w	8005ebe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005db0:	4b92      	ldr	r3, [pc, #584]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f003 030c 	and.w	r3, r3, #12
 8005db8:	2b04      	cmp	r3, #4
 8005dba:	d00c      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005dbc:	4b8f      	ldr	r3, [pc, #572]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	f003 030c 	and.w	r3, r3, #12
 8005dc4:	2b08      	cmp	r3, #8
 8005dc6:	d112      	bne.n	8005dee <HAL_RCC_OscConfig+0x5e>
 8005dc8:	4b8c      	ldr	r3, [pc, #560]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dd4:	d10b      	bne.n	8005dee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dd6:	4b89      	ldr	r3, [pc, #548]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d06c      	beq.n	8005ebc <HAL_RCC_OscConfig+0x12c>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d168      	bne.n	8005ebc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e24c      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005df6:	d106      	bne.n	8005e06 <HAL_RCC_OscConfig+0x76>
 8005df8:	4b80      	ldr	r3, [pc, #512]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a7f      	ldr	r2, [pc, #508]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e02:	6013      	str	r3, [r2, #0]
 8005e04:	e02e      	b.n	8005e64 <HAL_RCC_OscConfig+0xd4>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10c      	bne.n	8005e28 <HAL_RCC_OscConfig+0x98>
 8005e0e:	4b7b      	ldr	r3, [pc, #492]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a7a      	ldr	r2, [pc, #488]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005e14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e18:	6013      	str	r3, [r2, #0]
 8005e1a:	4b78      	ldr	r3, [pc, #480]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a77      	ldr	r2, [pc, #476]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005e20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e24:	6013      	str	r3, [r2, #0]
 8005e26:	e01d      	b.n	8005e64 <HAL_RCC_OscConfig+0xd4>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e30:	d10c      	bne.n	8005e4c <HAL_RCC_OscConfig+0xbc>
 8005e32:	4b72      	ldr	r3, [pc, #456]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a71      	ldr	r2, [pc, #452]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005e38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e3c:	6013      	str	r3, [r2, #0]
 8005e3e:	4b6f      	ldr	r3, [pc, #444]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a6e      	ldr	r2, [pc, #440]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e48:	6013      	str	r3, [r2, #0]
 8005e4a:	e00b      	b.n	8005e64 <HAL_RCC_OscConfig+0xd4>
 8005e4c:	4b6b      	ldr	r3, [pc, #428]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a6a      	ldr	r2, [pc, #424]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e56:	6013      	str	r3, [r2, #0]
 8005e58:	4b68      	ldr	r3, [pc, #416]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a67      	ldr	r2, [pc, #412]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005e5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e62:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d013      	beq.n	8005e94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e6c:	f7fd fc70 	bl	8003750 <HAL_GetTick>
 8005e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e72:	e008      	b.n	8005e86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e74:	f7fd fc6c 	bl	8003750 <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	2b64      	cmp	r3, #100	; 0x64
 8005e80:	d901      	bls.n	8005e86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e200      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e86:	4b5d      	ldr	r3, [pc, #372]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d0f0      	beq.n	8005e74 <HAL_RCC_OscConfig+0xe4>
 8005e92:	e014      	b.n	8005ebe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e94:	f7fd fc5c 	bl	8003750 <HAL_GetTick>
 8005e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e9a:	e008      	b.n	8005eae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e9c:	f7fd fc58 	bl	8003750 <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	2b64      	cmp	r3, #100	; 0x64
 8005ea8:	d901      	bls.n	8005eae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e1ec      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005eae:	4b53      	ldr	r3, [pc, #332]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1f0      	bne.n	8005e9c <HAL_RCC_OscConfig+0x10c>
 8005eba:	e000      	b.n	8005ebe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ebc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0302 	and.w	r3, r3, #2
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d063      	beq.n	8005f92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005eca:	4b4c      	ldr	r3, [pc, #304]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f003 030c 	and.w	r3, r3, #12
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00b      	beq.n	8005eee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005ed6:	4b49      	ldr	r3, [pc, #292]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f003 030c 	and.w	r3, r3, #12
 8005ede:	2b08      	cmp	r3, #8
 8005ee0:	d11c      	bne.n	8005f1c <HAL_RCC_OscConfig+0x18c>
 8005ee2:	4b46      	ldr	r3, [pc, #280]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d116      	bne.n	8005f1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005eee:	4b43      	ldr	r3, [pc, #268]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0302 	and.w	r3, r3, #2
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d005      	beq.n	8005f06 <HAL_RCC_OscConfig+0x176>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d001      	beq.n	8005f06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e1c0      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f06:	4b3d      	ldr	r3, [pc, #244]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	00db      	lsls	r3, r3, #3
 8005f14:	4939      	ldr	r1, [pc, #228]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f1a:	e03a      	b.n	8005f92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d020      	beq.n	8005f66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f24:	4b36      	ldr	r3, [pc, #216]	; (8006000 <HAL_RCC_OscConfig+0x270>)
 8005f26:	2201      	movs	r2, #1
 8005f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f2a:	f7fd fc11 	bl	8003750 <HAL_GetTick>
 8005f2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f30:	e008      	b.n	8005f44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f32:	f7fd fc0d 	bl	8003750 <HAL_GetTick>
 8005f36:	4602      	mov	r2, r0
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d901      	bls.n	8005f44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e1a1      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f44:	4b2d      	ldr	r3, [pc, #180]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0302 	and.w	r3, r3, #2
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d0f0      	beq.n	8005f32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f50:	4b2a      	ldr	r3, [pc, #168]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	00db      	lsls	r3, r3, #3
 8005f5e:	4927      	ldr	r1, [pc, #156]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005f60:	4313      	orrs	r3, r2
 8005f62:	600b      	str	r3, [r1, #0]
 8005f64:	e015      	b.n	8005f92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f66:	4b26      	ldr	r3, [pc, #152]	; (8006000 <HAL_RCC_OscConfig+0x270>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f6c:	f7fd fbf0 	bl	8003750 <HAL_GetTick>
 8005f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f72:	e008      	b.n	8005f86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f74:	f7fd fbec 	bl	8003750 <HAL_GetTick>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d901      	bls.n	8005f86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e180      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f86:	4b1d      	ldr	r3, [pc, #116]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0302 	and.w	r3, r3, #2
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1f0      	bne.n	8005f74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 0308 	and.w	r3, r3, #8
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d03a      	beq.n	8006014 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d019      	beq.n	8005fda <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fa6:	4b17      	ldr	r3, [pc, #92]	; (8006004 <HAL_RCC_OscConfig+0x274>)
 8005fa8:	2201      	movs	r2, #1
 8005faa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fac:	f7fd fbd0 	bl	8003750 <HAL_GetTick>
 8005fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fb2:	e008      	b.n	8005fc6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fb4:	f7fd fbcc 	bl	8003750 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d901      	bls.n	8005fc6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e160      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fc6:	4b0d      	ldr	r3, [pc, #52]	; (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fca:	f003 0302 	and.w	r3, r3, #2
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d0f0      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005fd2:	2001      	movs	r0, #1
 8005fd4:	f000 face 	bl	8006574 <RCC_Delay>
 8005fd8:	e01c      	b.n	8006014 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fda:	4b0a      	ldr	r3, [pc, #40]	; (8006004 <HAL_RCC_OscConfig+0x274>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fe0:	f7fd fbb6 	bl	8003750 <HAL_GetTick>
 8005fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fe6:	e00f      	b.n	8006008 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fe8:	f7fd fbb2 	bl	8003750 <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d908      	bls.n	8006008 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e146      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
 8005ffa:	bf00      	nop
 8005ffc:	40021000 	.word	0x40021000
 8006000:	42420000 	.word	0x42420000
 8006004:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006008:	4b92      	ldr	r3, [pc, #584]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 800600a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600c:	f003 0302 	and.w	r3, r3, #2
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1e9      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0304 	and.w	r3, r3, #4
 800601c:	2b00      	cmp	r3, #0
 800601e:	f000 80a6 	beq.w	800616e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006022:	2300      	movs	r3, #0
 8006024:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006026:	4b8b      	ldr	r3, [pc, #556]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 8006028:	69db      	ldr	r3, [r3, #28]
 800602a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10d      	bne.n	800604e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006032:	4b88      	ldr	r3, [pc, #544]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 8006034:	69db      	ldr	r3, [r3, #28]
 8006036:	4a87      	ldr	r2, [pc, #540]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 8006038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800603c:	61d3      	str	r3, [r2, #28]
 800603e:	4b85      	ldr	r3, [pc, #532]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006046:	60bb      	str	r3, [r7, #8]
 8006048:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800604a:	2301      	movs	r3, #1
 800604c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800604e:	4b82      	ldr	r3, [pc, #520]	; (8006258 <HAL_RCC_OscConfig+0x4c8>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006056:	2b00      	cmp	r3, #0
 8006058:	d118      	bne.n	800608c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800605a:	4b7f      	ldr	r3, [pc, #508]	; (8006258 <HAL_RCC_OscConfig+0x4c8>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a7e      	ldr	r2, [pc, #504]	; (8006258 <HAL_RCC_OscConfig+0x4c8>)
 8006060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006064:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006066:	f7fd fb73 	bl	8003750 <HAL_GetTick>
 800606a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800606c:	e008      	b.n	8006080 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800606e:	f7fd fb6f 	bl	8003750 <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	2b64      	cmp	r3, #100	; 0x64
 800607a:	d901      	bls.n	8006080 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e103      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006080:	4b75      	ldr	r3, [pc, #468]	; (8006258 <HAL_RCC_OscConfig+0x4c8>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006088:	2b00      	cmp	r3, #0
 800608a:	d0f0      	beq.n	800606e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d106      	bne.n	80060a2 <HAL_RCC_OscConfig+0x312>
 8006094:	4b6f      	ldr	r3, [pc, #444]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 8006096:	6a1b      	ldr	r3, [r3, #32]
 8006098:	4a6e      	ldr	r2, [pc, #440]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 800609a:	f043 0301 	orr.w	r3, r3, #1
 800609e:	6213      	str	r3, [r2, #32]
 80060a0:	e02d      	b.n	80060fe <HAL_RCC_OscConfig+0x36e>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10c      	bne.n	80060c4 <HAL_RCC_OscConfig+0x334>
 80060aa:	4b6a      	ldr	r3, [pc, #424]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	4a69      	ldr	r2, [pc, #420]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80060b0:	f023 0301 	bic.w	r3, r3, #1
 80060b4:	6213      	str	r3, [r2, #32]
 80060b6:	4b67      	ldr	r3, [pc, #412]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	4a66      	ldr	r2, [pc, #408]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80060bc:	f023 0304 	bic.w	r3, r3, #4
 80060c0:	6213      	str	r3, [r2, #32]
 80060c2:	e01c      	b.n	80060fe <HAL_RCC_OscConfig+0x36e>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	2b05      	cmp	r3, #5
 80060ca:	d10c      	bne.n	80060e6 <HAL_RCC_OscConfig+0x356>
 80060cc:	4b61      	ldr	r3, [pc, #388]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80060ce:	6a1b      	ldr	r3, [r3, #32]
 80060d0:	4a60      	ldr	r2, [pc, #384]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80060d2:	f043 0304 	orr.w	r3, r3, #4
 80060d6:	6213      	str	r3, [r2, #32]
 80060d8:	4b5e      	ldr	r3, [pc, #376]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80060da:	6a1b      	ldr	r3, [r3, #32]
 80060dc:	4a5d      	ldr	r2, [pc, #372]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80060de:	f043 0301 	orr.w	r3, r3, #1
 80060e2:	6213      	str	r3, [r2, #32]
 80060e4:	e00b      	b.n	80060fe <HAL_RCC_OscConfig+0x36e>
 80060e6:	4b5b      	ldr	r3, [pc, #364]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	4a5a      	ldr	r2, [pc, #360]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80060ec:	f023 0301 	bic.w	r3, r3, #1
 80060f0:	6213      	str	r3, [r2, #32]
 80060f2:	4b58      	ldr	r3, [pc, #352]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	4a57      	ldr	r2, [pc, #348]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80060f8:	f023 0304 	bic.w	r3, r3, #4
 80060fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d015      	beq.n	8006132 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006106:	f7fd fb23 	bl	8003750 <HAL_GetTick>
 800610a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800610c:	e00a      	b.n	8006124 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800610e:	f7fd fb1f 	bl	8003750 <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	f241 3288 	movw	r2, #5000	; 0x1388
 800611c:	4293      	cmp	r3, r2
 800611e:	d901      	bls.n	8006124 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e0b1      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006124:	4b4b      	ldr	r3, [pc, #300]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 8006126:	6a1b      	ldr	r3, [r3, #32]
 8006128:	f003 0302 	and.w	r3, r3, #2
 800612c:	2b00      	cmp	r3, #0
 800612e:	d0ee      	beq.n	800610e <HAL_RCC_OscConfig+0x37e>
 8006130:	e014      	b.n	800615c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006132:	f7fd fb0d 	bl	8003750 <HAL_GetTick>
 8006136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006138:	e00a      	b.n	8006150 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800613a:	f7fd fb09 	bl	8003750 <HAL_GetTick>
 800613e:	4602      	mov	r2, r0
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	f241 3288 	movw	r2, #5000	; 0x1388
 8006148:	4293      	cmp	r3, r2
 800614a:	d901      	bls.n	8006150 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e09b      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006150:	4b40      	ldr	r3, [pc, #256]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 8006152:	6a1b      	ldr	r3, [r3, #32]
 8006154:	f003 0302 	and.w	r3, r3, #2
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1ee      	bne.n	800613a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800615c:	7dfb      	ldrb	r3, [r7, #23]
 800615e:	2b01      	cmp	r3, #1
 8006160:	d105      	bne.n	800616e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006162:	4b3c      	ldr	r3, [pc, #240]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	4a3b      	ldr	r2, [pc, #236]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 8006168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800616c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	69db      	ldr	r3, [r3, #28]
 8006172:	2b00      	cmp	r3, #0
 8006174:	f000 8087 	beq.w	8006286 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006178:	4b36      	ldr	r3, [pc, #216]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	f003 030c 	and.w	r3, r3, #12
 8006180:	2b08      	cmp	r3, #8
 8006182:	d061      	beq.n	8006248 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	69db      	ldr	r3, [r3, #28]
 8006188:	2b02      	cmp	r3, #2
 800618a:	d146      	bne.n	800621a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800618c:	4b33      	ldr	r3, [pc, #204]	; (800625c <HAL_RCC_OscConfig+0x4cc>)
 800618e:	2200      	movs	r2, #0
 8006190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006192:	f7fd fadd 	bl	8003750 <HAL_GetTick>
 8006196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006198:	e008      	b.n	80061ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800619a:	f7fd fad9 	bl	8003750 <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d901      	bls.n	80061ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e06d      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061ac:	4b29      	ldr	r3, [pc, #164]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1f0      	bne.n	800619a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a1b      	ldr	r3, [r3, #32]
 80061bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061c0:	d108      	bne.n	80061d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80061c2:	4b24      	ldr	r3, [pc, #144]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	4921      	ldr	r1, [pc, #132]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80061d0:	4313      	orrs	r3, r2
 80061d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061d4:	4b1f      	ldr	r3, [pc, #124]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a19      	ldr	r1, [r3, #32]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e4:	430b      	orrs	r3, r1
 80061e6:	491b      	ldr	r1, [pc, #108]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80061e8:	4313      	orrs	r3, r2
 80061ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061ec:	4b1b      	ldr	r3, [pc, #108]	; (800625c <HAL_RCC_OscConfig+0x4cc>)
 80061ee:	2201      	movs	r2, #1
 80061f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061f2:	f7fd faad 	bl	8003750 <HAL_GetTick>
 80061f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80061f8:	e008      	b.n	800620c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061fa:	f7fd faa9 	bl	8003750 <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	2b02      	cmp	r3, #2
 8006206:	d901      	bls.n	800620c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e03d      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800620c:	4b11      	ldr	r3, [pc, #68]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d0f0      	beq.n	80061fa <HAL_RCC_OscConfig+0x46a>
 8006218:	e035      	b.n	8006286 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800621a:	4b10      	ldr	r3, [pc, #64]	; (800625c <HAL_RCC_OscConfig+0x4cc>)
 800621c:	2200      	movs	r2, #0
 800621e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006220:	f7fd fa96 	bl	8003750 <HAL_GetTick>
 8006224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006226:	e008      	b.n	800623a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006228:	f7fd fa92 	bl	8003750 <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	2b02      	cmp	r3, #2
 8006234:	d901      	bls.n	800623a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	e026      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800623a:	4b06      	ldr	r3, [pc, #24]	; (8006254 <HAL_RCC_OscConfig+0x4c4>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006242:	2b00      	cmp	r3, #0
 8006244:	d1f0      	bne.n	8006228 <HAL_RCC_OscConfig+0x498>
 8006246:	e01e      	b.n	8006286 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	69db      	ldr	r3, [r3, #28]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d107      	bne.n	8006260 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e019      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
 8006254:	40021000 	.word	0x40021000
 8006258:	40007000 	.word	0x40007000
 800625c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006260:	4b0b      	ldr	r3, [pc, #44]	; (8006290 <HAL_RCC_OscConfig+0x500>)
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a1b      	ldr	r3, [r3, #32]
 8006270:	429a      	cmp	r2, r3
 8006272:	d106      	bne.n	8006282 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800627e:	429a      	cmp	r2, r3
 8006280:	d001      	beq.n	8006286 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e000      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3718      	adds	r7, #24
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	40021000 	.word	0x40021000

08006294 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d101      	bne.n	80062a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e0d0      	b.n	800644a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062a8:	4b6a      	ldr	r3, [pc, #424]	; (8006454 <HAL_RCC_ClockConfig+0x1c0>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0307 	and.w	r3, r3, #7
 80062b0:	683a      	ldr	r2, [r7, #0]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d910      	bls.n	80062d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062b6:	4b67      	ldr	r3, [pc, #412]	; (8006454 <HAL_RCC_ClockConfig+0x1c0>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f023 0207 	bic.w	r2, r3, #7
 80062be:	4965      	ldr	r1, [pc, #404]	; (8006454 <HAL_RCC_ClockConfig+0x1c0>)
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062c6:	4b63      	ldr	r3, [pc, #396]	; (8006454 <HAL_RCC_ClockConfig+0x1c0>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0307 	and.w	r3, r3, #7
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d001      	beq.n	80062d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	e0b8      	b.n	800644a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0302 	and.w	r3, r3, #2
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d020      	beq.n	8006326 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0304 	and.w	r3, r3, #4
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d005      	beq.n	80062fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062f0:	4b59      	ldr	r3, [pc, #356]	; (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	4a58      	ldr	r2, [pc, #352]	; (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 80062f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80062fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0308 	and.w	r3, r3, #8
 8006304:	2b00      	cmp	r3, #0
 8006306:	d005      	beq.n	8006314 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006308:	4b53      	ldr	r3, [pc, #332]	; (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	4a52      	ldr	r2, [pc, #328]	; (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 800630e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006312:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006314:	4b50      	ldr	r3, [pc, #320]	; (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	494d      	ldr	r1, [pc, #308]	; (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 8006322:	4313      	orrs	r3, r2
 8006324:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	2b00      	cmp	r3, #0
 8006330:	d040      	beq.n	80063b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d107      	bne.n	800634a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800633a:	4b47      	ldr	r3, [pc, #284]	; (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d115      	bne.n	8006372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e07f      	b.n	800644a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	2b02      	cmp	r3, #2
 8006350:	d107      	bne.n	8006362 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006352:	4b41      	ldr	r3, [pc, #260]	; (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d109      	bne.n	8006372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e073      	b.n	800644a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006362:	4b3d      	ldr	r3, [pc, #244]	; (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0302 	and.w	r3, r3, #2
 800636a:	2b00      	cmp	r3, #0
 800636c:	d101      	bne.n	8006372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e06b      	b.n	800644a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006372:	4b39      	ldr	r3, [pc, #228]	; (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	f023 0203 	bic.w	r2, r3, #3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	4936      	ldr	r1, [pc, #216]	; (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 8006380:	4313      	orrs	r3, r2
 8006382:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006384:	f7fd f9e4 	bl	8003750 <HAL_GetTick>
 8006388:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800638a:	e00a      	b.n	80063a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800638c:	f7fd f9e0 	bl	8003750 <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	f241 3288 	movw	r2, #5000	; 0x1388
 800639a:	4293      	cmp	r3, r2
 800639c:	d901      	bls.n	80063a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e053      	b.n	800644a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063a2:	4b2d      	ldr	r3, [pc, #180]	; (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f003 020c 	and.w	r2, r3, #12
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d1eb      	bne.n	800638c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063b4:	4b27      	ldr	r3, [pc, #156]	; (8006454 <HAL_RCC_ClockConfig+0x1c0>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0307 	and.w	r3, r3, #7
 80063bc:	683a      	ldr	r2, [r7, #0]
 80063be:	429a      	cmp	r2, r3
 80063c0:	d210      	bcs.n	80063e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063c2:	4b24      	ldr	r3, [pc, #144]	; (8006454 <HAL_RCC_ClockConfig+0x1c0>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f023 0207 	bic.w	r2, r3, #7
 80063ca:	4922      	ldr	r1, [pc, #136]	; (8006454 <HAL_RCC_ClockConfig+0x1c0>)
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063d2:	4b20      	ldr	r3, [pc, #128]	; (8006454 <HAL_RCC_ClockConfig+0x1c0>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 0307 	and.w	r3, r3, #7
 80063da:	683a      	ldr	r2, [r7, #0]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d001      	beq.n	80063e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e032      	b.n	800644a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0304 	and.w	r3, r3, #4
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d008      	beq.n	8006402 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063f0:	4b19      	ldr	r3, [pc, #100]	; (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	4916      	ldr	r1, [pc, #88]	; (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0308 	and.w	r3, r3, #8
 800640a:	2b00      	cmp	r3, #0
 800640c:	d009      	beq.n	8006422 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800640e:	4b12      	ldr	r3, [pc, #72]	; (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	00db      	lsls	r3, r3, #3
 800641c:	490e      	ldr	r1, [pc, #56]	; (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 800641e:	4313      	orrs	r3, r2
 8006420:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006422:	f000 f821 	bl	8006468 <HAL_RCC_GetSysClockFreq>
 8006426:	4602      	mov	r2, r0
 8006428:	4b0b      	ldr	r3, [pc, #44]	; (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	091b      	lsrs	r3, r3, #4
 800642e:	f003 030f 	and.w	r3, r3, #15
 8006432:	490a      	ldr	r1, [pc, #40]	; (800645c <HAL_RCC_ClockConfig+0x1c8>)
 8006434:	5ccb      	ldrb	r3, [r1, r3]
 8006436:	fa22 f303 	lsr.w	r3, r2, r3
 800643a:	4a09      	ldr	r2, [pc, #36]	; (8006460 <HAL_RCC_ClockConfig+0x1cc>)
 800643c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800643e:	4b09      	ldr	r3, [pc, #36]	; (8006464 <HAL_RCC_ClockConfig+0x1d0>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4618      	mov	r0, r3
 8006444:	f7fd f942 	bl	80036cc <HAL_InitTick>

  return HAL_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3710      	adds	r7, #16
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	40022000 	.word	0x40022000
 8006458:	40021000 	.word	0x40021000
 800645c:	0800e530 	.word	0x0800e530
 8006460:	2000000c 	.word	0x2000000c
 8006464:	20000010 	.word	0x20000010

08006468 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006468:	b480      	push	{r7}
 800646a:	b087      	sub	sp, #28
 800646c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800646e:	2300      	movs	r3, #0
 8006470:	60fb      	str	r3, [r7, #12]
 8006472:	2300      	movs	r3, #0
 8006474:	60bb      	str	r3, [r7, #8]
 8006476:	2300      	movs	r3, #0
 8006478:	617b      	str	r3, [r7, #20]
 800647a:	2300      	movs	r3, #0
 800647c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800647e:	2300      	movs	r3, #0
 8006480:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006482:	4b1e      	ldr	r3, [pc, #120]	; (80064fc <HAL_RCC_GetSysClockFreq+0x94>)
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f003 030c 	and.w	r3, r3, #12
 800648e:	2b04      	cmp	r3, #4
 8006490:	d002      	beq.n	8006498 <HAL_RCC_GetSysClockFreq+0x30>
 8006492:	2b08      	cmp	r3, #8
 8006494:	d003      	beq.n	800649e <HAL_RCC_GetSysClockFreq+0x36>
 8006496:	e027      	b.n	80064e8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006498:	4b19      	ldr	r3, [pc, #100]	; (8006500 <HAL_RCC_GetSysClockFreq+0x98>)
 800649a:	613b      	str	r3, [r7, #16]
      break;
 800649c:	e027      	b.n	80064ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	0c9b      	lsrs	r3, r3, #18
 80064a2:	f003 030f 	and.w	r3, r3, #15
 80064a6:	4a17      	ldr	r2, [pc, #92]	; (8006504 <HAL_RCC_GetSysClockFreq+0x9c>)
 80064a8:	5cd3      	ldrb	r3, [r2, r3]
 80064aa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d010      	beq.n	80064d8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80064b6:	4b11      	ldr	r3, [pc, #68]	; (80064fc <HAL_RCC_GetSysClockFreq+0x94>)
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	0c5b      	lsrs	r3, r3, #17
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	4a11      	ldr	r2, [pc, #68]	; (8006508 <HAL_RCC_GetSysClockFreq+0xa0>)
 80064c2:	5cd3      	ldrb	r3, [r2, r3]
 80064c4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a0d      	ldr	r2, [pc, #52]	; (8006500 <HAL_RCC_GetSysClockFreq+0x98>)
 80064ca:	fb03 f202 	mul.w	r2, r3, r2
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d4:	617b      	str	r3, [r7, #20]
 80064d6:	e004      	b.n	80064e2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a0c      	ldr	r2, [pc, #48]	; (800650c <HAL_RCC_GetSysClockFreq+0xa4>)
 80064dc:	fb02 f303 	mul.w	r3, r2, r3
 80064e0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	613b      	str	r3, [r7, #16]
      break;
 80064e6:	e002      	b.n	80064ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80064e8:	4b05      	ldr	r3, [pc, #20]	; (8006500 <HAL_RCC_GetSysClockFreq+0x98>)
 80064ea:	613b      	str	r3, [r7, #16]
      break;
 80064ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064ee:	693b      	ldr	r3, [r7, #16]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	371c      	adds	r7, #28
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bc80      	pop	{r7}
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	40021000 	.word	0x40021000
 8006500:	007a1200 	.word	0x007a1200
 8006504:	0800e548 	.word	0x0800e548
 8006508:	0800e558 	.word	0x0800e558
 800650c:	003d0900 	.word	0x003d0900

08006510 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006510:	b480      	push	{r7}
 8006512:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006514:	4b02      	ldr	r3, [pc, #8]	; (8006520 <HAL_RCC_GetHCLKFreq+0x10>)
 8006516:	681b      	ldr	r3, [r3, #0]
}
 8006518:	4618      	mov	r0, r3
 800651a:	46bd      	mov	sp, r7
 800651c:	bc80      	pop	{r7}
 800651e:	4770      	bx	lr
 8006520:	2000000c 	.word	0x2000000c

08006524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006528:	f7ff fff2 	bl	8006510 <HAL_RCC_GetHCLKFreq>
 800652c:	4602      	mov	r2, r0
 800652e:	4b05      	ldr	r3, [pc, #20]	; (8006544 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	0a1b      	lsrs	r3, r3, #8
 8006534:	f003 0307 	and.w	r3, r3, #7
 8006538:	4903      	ldr	r1, [pc, #12]	; (8006548 <HAL_RCC_GetPCLK1Freq+0x24>)
 800653a:	5ccb      	ldrb	r3, [r1, r3]
 800653c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006540:	4618      	mov	r0, r3
 8006542:	bd80      	pop	{r7, pc}
 8006544:	40021000 	.word	0x40021000
 8006548:	0800e540 	.word	0x0800e540

0800654c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006550:	f7ff ffde 	bl	8006510 <HAL_RCC_GetHCLKFreq>
 8006554:	4602      	mov	r2, r0
 8006556:	4b05      	ldr	r3, [pc, #20]	; (800656c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	0adb      	lsrs	r3, r3, #11
 800655c:	f003 0307 	and.w	r3, r3, #7
 8006560:	4903      	ldr	r1, [pc, #12]	; (8006570 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006562:	5ccb      	ldrb	r3, [r1, r3]
 8006564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006568:	4618      	mov	r0, r3
 800656a:	bd80      	pop	{r7, pc}
 800656c:	40021000 	.word	0x40021000
 8006570:	0800e540 	.word	0x0800e540

08006574 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006574:	b480      	push	{r7}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800657c:	4b0a      	ldr	r3, [pc, #40]	; (80065a8 <RCC_Delay+0x34>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a0a      	ldr	r2, [pc, #40]	; (80065ac <RCC_Delay+0x38>)
 8006582:	fba2 2303 	umull	r2, r3, r2, r3
 8006586:	0a5b      	lsrs	r3, r3, #9
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	fb02 f303 	mul.w	r3, r2, r3
 800658e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006590:	bf00      	nop
  }
  while (Delay --);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	1e5a      	subs	r2, r3, #1
 8006596:	60fa      	str	r2, [r7, #12]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1f9      	bne.n	8006590 <RCC_Delay+0x1c>
}
 800659c:	bf00      	nop
 800659e:	bf00      	nop
 80065a0:	3714      	adds	r7, #20
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bc80      	pop	{r7}
 80065a6:	4770      	bx	lr
 80065a8:	2000000c 	.word	0x2000000c
 80065ac:	10624dd3 	.word	0x10624dd3

080065b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80065b8:	2300      	movs	r3, #0
 80065ba:	613b      	str	r3, [r7, #16]
 80065bc:	2300      	movs	r3, #0
 80065be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 0301 	and.w	r3, r3, #1
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d07d      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80065cc:	2300      	movs	r3, #0
 80065ce:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065d0:	4b4f      	ldr	r3, [pc, #316]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065d2:	69db      	ldr	r3, [r3, #28]
 80065d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10d      	bne.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065dc:	4b4c      	ldr	r3, [pc, #304]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065de:	69db      	ldr	r3, [r3, #28]
 80065e0:	4a4b      	ldr	r2, [pc, #300]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065e6:	61d3      	str	r3, [r2, #28]
 80065e8:	4b49      	ldr	r3, [pc, #292]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065ea:	69db      	ldr	r3, [r3, #28]
 80065ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065f0:	60bb      	str	r3, [r7, #8]
 80065f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065f4:	2301      	movs	r3, #1
 80065f6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065f8:	4b46      	ldr	r3, [pc, #280]	; (8006714 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006600:	2b00      	cmp	r3, #0
 8006602:	d118      	bne.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006604:	4b43      	ldr	r3, [pc, #268]	; (8006714 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a42      	ldr	r2, [pc, #264]	; (8006714 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800660a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800660e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006610:	f7fd f89e 	bl	8003750 <HAL_GetTick>
 8006614:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006616:	e008      	b.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006618:	f7fd f89a 	bl	8003750 <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	2b64      	cmp	r3, #100	; 0x64
 8006624:	d901      	bls.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e06d      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800662a:	4b3a      	ldr	r3, [pc, #232]	; (8006714 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006632:	2b00      	cmp	r3, #0
 8006634:	d0f0      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006636:	4b36      	ldr	r3, [pc, #216]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800663e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d02e      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	429a      	cmp	r2, r3
 8006652:	d027      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006654:	4b2e      	ldr	r3, [pc, #184]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006656:	6a1b      	ldr	r3, [r3, #32]
 8006658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800665c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800665e:	4b2e      	ldr	r3, [pc, #184]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006660:	2201      	movs	r2, #1
 8006662:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006664:	4b2c      	ldr	r3, [pc, #176]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006666:	2200      	movs	r2, #0
 8006668:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800666a:	4a29      	ldr	r2, [pc, #164]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	2b00      	cmp	r3, #0
 8006678:	d014      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800667a:	f7fd f869 	bl	8003750 <HAL_GetTick>
 800667e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006680:	e00a      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006682:	f7fd f865 	bl	8003750 <HAL_GetTick>
 8006686:	4602      	mov	r2, r0
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006690:	4293      	cmp	r3, r2
 8006692:	d901      	bls.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e036      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006698:	4b1d      	ldr	r3, [pc, #116]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800669a:	6a1b      	ldr	r3, [r3, #32]
 800669c:	f003 0302 	and.w	r3, r3, #2
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d0ee      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066a4:	4b1a      	ldr	r3, [pc, #104]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066a6:	6a1b      	ldr	r3, [r3, #32]
 80066a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	4917      	ldr	r1, [pc, #92]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066b2:	4313      	orrs	r3, r2
 80066b4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80066b6:	7dfb      	ldrb	r3, [r7, #23]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d105      	bne.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066bc:	4b14      	ldr	r3, [pc, #80]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066be:	69db      	ldr	r3, [r3, #28]
 80066c0:	4a13      	ldr	r2, [pc, #76]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0302 	and.w	r3, r3, #2
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d008      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066d4:	4b0e      	ldr	r3, [pc, #56]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	490b      	ldr	r1, [pc, #44]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066e2:	4313      	orrs	r3, r2
 80066e4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 0310 	and.w	r3, r3, #16
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d008      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066f2:	4b07      	ldr	r3, [pc, #28]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	4904      	ldr	r1, [pc, #16]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006700:	4313      	orrs	r3, r2
 8006702:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3718      	adds	r7, #24
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	40021000 	.word	0x40021000
 8006714:	40007000 	.word	0x40007000
 8006718:	42420440 	.word	0x42420440

0800671c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d101      	bne.n	800672e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e041      	b.n	80067b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d106      	bne.n	8006748 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f7fc fd6c 	bl	8003220 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2202      	movs	r2, #2
 800674c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	3304      	adds	r3, #4
 8006758:	4619      	mov	r1, r3
 800675a:	4610      	mov	r0, r2
 800675c:	f000 feae 	bl	80074bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3708      	adds	r7, #8
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
	...

080067bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80067bc:	b480      	push	{r7}
 80067be:	b085      	sub	sp, #20
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d001      	beq.n	80067d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e032      	b.n	800683a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2202      	movs	r2, #2
 80067d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a18      	ldr	r2, [pc, #96]	; (8006844 <HAL_TIM_Base_Start+0x88>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d00e      	beq.n	8006804 <HAL_TIM_Base_Start+0x48>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ee:	d009      	beq.n	8006804 <HAL_TIM_Base_Start+0x48>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a14      	ldr	r2, [pc, #80]	; (8006848 <HAL_TIM_Base_Start+0x8c>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d004      	beq.n	8006804 <HAL_TIM_Base_Start+0x48>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a13      	ldr	r2, [pc, #76]	; (800684c <HAL_TIM_Base_Start+0x90>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d111      	bne.n	8006828 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f003 0307 	and.w	r3, r3, #7
 800680e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2b06      	cmp	r3, #6
 8006814:	d010      	beq.n	8006838 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f042 0201 	orr.w	r2, r2, #1
 8006824:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006826:	e007      	b.n	8006838 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f042 0201 	orr.w	r2, r2, #1
 8006836:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3714      	adds	r7, #20
 800683e:	46bd      	mov	sp, r7
 8006840:	bc80      	pop	{r7}
 8006842:	4770      	bx	lr
 8006844:	40012c00 	.word	0x40012c00
 8006848:	40000400 	.word	0x40000400
 800684c:	40000800 	.word	0x40000800

08006850 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800685e:	b2db      	uxtb	r3, r3
 8006860:	2b01      	cmp	r3, #1
 8006862:	d001      	beq.n	8006868 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e03a      	b.n	80068de <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2202      	movs	r2, #2
 800686c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68da      	ldr	r2, [r3, #12]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f042 0201 	orr.w	r2, r2, #1
 800687e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a18      	ldr	r2, [pc, #96]	; (80068e8 <HAL_TIM_Base_Start_IT+0x98>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d00e      	beq.n	80068a8 <HAL_TIM_Base_Start_IT+0x58>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006892:	d009      	beq.n	80068a8 <HAL_TIM_Base_Start_IT+0x58>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a14      	ldr	r2, [pc, #80]	; (80068ec <HAL_TIM_Base_Start_IT+0x9c>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d004      	beq.n	80068a8 <HAL_TIM_Base_Start_IT+0x58>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a13      	ldr	r2, [pc, #76]	; (80068f0 <HAL_TIM_Base_Start_IT+0xa0>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d111      	bne.n	80068cc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	f003 0307 	and.w	r3, r3, #7
 80068b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2b06      	cmp	r3, #6
 80068b8:	d010      	beq.n	80068dc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f042 0201 	orr.w	r2, r2, #1
 80068c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068ca:	e007      	b.n	80068dc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f042 0201 	orr.w	r2, r2, #1
 80068da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3714      	adds	r7, #20
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bc80      	pop	{r7}
 80068e6:	4770      	bx	lr
 80068e8:	40012c00 	.word	0x40012c00
 80068ec:	40000400 	.word	0x40000400
 80068f0:	40000800 	.word	0x40000800

080068f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d101      	bne.n	8006906 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e041      	b.n	800698a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800690c:	b2db      	uxtb	r3, r3
 800690e:	2b00      	cmp	r3, #0
 8006910:	d106      	bne.n	8006920 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f839 	bl	8006992 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2202      	movs	r2, #2
 8006924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	3304      	adds	r3, #4
 8006930:	4619      	mov	r1, r3
 8006932:	4610      	mov	r0, r2
 8006934:	f000 fdc2 	bl	80074bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3708      	adds	r7, #8
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006992:	b480      	push	{r7}
 8006994:	b083      	sub	sp, #12
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800699a:	bf00      	nop
 800699c:	370c      	adds	r7, #12
 800699e:	46bd      	mov	sp, r7
 80069a0:	bc80      	pop	{r7}
 80069a2:	4770      	bx	lr

080069a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d109      	bne.n	80069c8 <HAL_TIM_PWM_Start+0x24>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	2b01      	cmp	r3, #1
 80069be:	bf14      	ite	ne
 80069c0:	2301      	movne	r3, #1
 80069c2:	2300      	moveq	r3, #0
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	e022      	b.n	8006a0e <HAL_TIM_PWM_Start+0x6a>
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	2b04      	cmp	r3, #4
 80069cc:	d109      	bne.n	80069e2 <HAL_TIM_PWM_Start+0x3e>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	bf14      	ite	ne
 80069da:	2301      	movne	r3, #1
 80069dc:	2300      	moveq	r3, #0
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	e015      	b.n	8006a0e <HAL_TIM_PWM_Start+0x6a>
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	2b08      	cmp	r3, #8
 80069e6:	d109      	bne.n	80069fc <HAL_TIM_PWM_Start+0x58>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	bf14      	ite	ne
 80069f4:	2301      	movne	r3, #1
 80069f6:	2300      	moveq	r3, #0
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	e008      	b.n	8006a0e <HAL_TIM_PWM_Start+0x6a>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	bf14      	ite	ne
 8006a08:	2301      	movne	r3, #1
 8006a0a:	2300      	moveq	r3, #0
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d001      	beq.n	8006a16 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e05e      	b.n	8006ad4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d104      	bne.n	8006a26 <HAL_TIM_PWM_Start+0x82>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2202      	movs	r2, #2
 8006a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a24:	e013      	b.n	8006a4e <HAL_TIM_PWM_Start+0xaa>
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	2b04      	cmp	r3, #4
 8006a2a:	d104      	bne.n	8006a36 <HAL_TIM_PWM_Start+0x92>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2202      	movs	r2, #2
 8006a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a34:	e00b      	b.n	8006a4e <HAL_TIM_PWM_Start+0xaa>
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	2b08      	cmp	r3, #8
 8006a3a:	d104      	bne.n	8006a46 <HAL_TIM_PWM_Start+0xa2>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2202      	movs	r2, #2
 8006a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a44:	e003      	b.n	8006a4e <HAL_TIM_PWM_Start+0xaa>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2202      	movs	r2, #2
 8006a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2201      	movs	r2, #1
 8006a54:	6839      	ldr	r1, [r7, #0]
 8006a56:	4618      	mov	r0, r3
 8006a58:	f001 f8bd 	bl	8007bd6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a1e      	ldr	r2, [pc, #120]	; (8006adc <HAL_TIM_PWM_Start+0x138>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d107      	bne.n	8006a76 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a18      	ldr	r2, [pc, #96]	; (8006adc <HAL_TIM_PWM_Start+0x138>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d00e      	beq.n	8006a9e <HAL_TIM_PWM_Start+0xfa>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a88:	d009      	beq.n	8006a9e <HAL_TIM_PWM_Start+0xfa>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a14      	ldr	r2, [pc, #80]	; (8006ae0 <HAL_TIM_PWM_Start+0x13c>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d004      	beq.n	8006a9e <HAL_TIM_PWM_Start+0xfa>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a12      	ldr	r2, [pc, #72]	; (8006ae4 <HAL_TIM_PWM_Start+0x140>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d111      	bne.n	8006ac2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f003 0307 	and.w	r3, r3, #7
 8006aa8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2b06      	cmp	r3, #6
 8006aae:	d010      	beq.n	8006ad2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f042 0201 	orr.w	r2, r2, #1
 8006abe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ac0:	e007      	b.n	8006ad2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f042 0201 	orr.w	r2, r2, #1
 8006ad0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	40012c00 	.word	0x40012c00
 8006ae0:	40000400 	.word	0x40000400
 8006ae4:	40000800 	.word	0x40000800

08006ae8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d101      	bne.n	8006afa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e041      	b.n	8006b7e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d106      	bne.n	8006b14 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f7fc fbc0 	bl	8003294 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2202      	movs	r2, #2
 8006b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	3304      	adds	r3, #4
 8006b24:	4619      	mov	r1, r3
 8006b26:	4610      	mov	r0, r2
 8006b28:	f000 fcc8 	bl	80074bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3708      	adds	r7, #8
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
	...

08006b88 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b92:	2300      	movs	r3, #0
 8006b94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d104      	bne.n	8006ba6 <HAL_TIM_IC_Start_IT+0x1e>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	e013      	b.n	8006bce <HAL_TIM_IC_Start_IT+0x46>
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	2b04      	cmp	r3, #4
 8006baa:	d104      	bne.n	8006bb6 <HAL_TIM_IC_Start_IT+0x2e>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	e00b      	b.n	8006bce <HAL_TIM_IC_Start_IT+0x46>
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	2b08      	cmp	r3, #8
 8006bba:	d104      	bne.n	8006bc6 <HAL_TIM_IC_Start_IT+0x3e>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	e003      	b.n	8006bce <HAL_TIM_IC_Start_IT+0x46>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d104      	bne.n	8006be0 <HAL_TIM_IC_Start_IT+0x58>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	e013      	b.n	8006c08 <HAL_TIM_IC_Start_IT+0x80>
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	2b04      	cmp	r3, #4
 8006be4:	d104      	bne.n	8006bf0 <HAL_TIM_IC_Start_IT+0x68>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	e00b      	b.n	8006c08 <HAL_TIM_IC_Start_IT+0x80>
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	2b08      	cmp	r3, #8
 8006bf4:	d104      	bne.n	8006c00 <HAL_TIM_IC_Start_IT+0x78>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	e003      	b.n	8006c08 <HAL_TIM_IC_Start_IT+0x80>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c0a:	7bbb      	ldrb	r3, [r7, #14]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d102      	bne.n	8006c16 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c10:	7b7b      	ldrb	r3, [r7, #13]
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d001      	beq.n	8006c1a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e0b8      	b.n	8006d8c <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d104      	bne.n	8006c2a <HAL_TIM_IC_Start_IT+0xa2>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2202      	movs	r2, #2
 8006c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c28:	e013      	b.n	8006c52 <HAL_TIM_IC_Start_IT+0xca>
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	2b04      	cmp	r3, #4
 8006c2e:	d104      	bne.n	8006c3a <HAL_TIM_IC_Start_IT+0xb2>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2202      	movs	r2, #2
 8006c34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c38:	e00b      	b.n	8006c52 <HAL_TIM_IC_Start_IT+0xca>
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	2b08      	cmp	r3, #8
 8006c3e:	d104      	bne.n	8006c4a <HAL_TIM_IC_Start_IT+0xc2>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2202      	movs	r2, #2
 8006c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c48:	e003      	b.n	8006c52 <HAL_TIM_IC_Start_IT+0xca>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2202      	movs	r2, #2
 8006c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d104      	bne.n	8006c62 <HAL_TIM_IC_Start_IT+0xda>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c60:	e013      	b.n	8006c8a <HAL_TIM_IC_Start_IT+0x102>
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	2b04      	cmp	r3, #4
 8006c66:	d104      	bne.n	8006c72 <HAL_TIM_IC_Start_IT+0xea>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c70:	e00b      	b.n	8006c8a <HAL_TIM_IC_Start_IT+0x102>
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	2b08      	cmp	r3, #8
 8006c76:	d104      	bne.n	8006c82 <HAL_TIM_IC_Start_IT+0xfa>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c80:	e003      	b.n	8006c8a <HAL_TIM_IC_Start_IT+0x102>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2202      	movs	r2, #2
 8006c86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	2b0c      	cmp	r3, #12
 8006c8e:	d841      	bhi.n	8006d14 <HAL_TIM_IC_Start_IT+0x18c>
 8006c90:	a201      	add	r2, pc, #4	; (adr r2, 8006c98 <HAL_TIM_IC_Start_IT+0x110>)
 8006c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c96:	bf00      	nop
 8006c98:	08006ccd 	.word	0x08006ccd
 8006c9c:	08006d15 	.word	0x08006d15
 8006ca0:	08006d15 	.word	0x08006d15
 8006ca4:	08006d15 	.word	0x08006d15
 8006ca8:	08006cdf 	.word	0x08006cdf
 8006cac:	08006d15 	.word	0x08006d15
 8006cb0:	08006d15 	.word	0x08006d15
 8006cb4:	08006d15 	.word	0x08006d15
 8006cb8:	08006cf1 	.word	0x08006cf1
 8006cbc:	08006d15 	.word	0x08006d15
 8006cc0:	08006d15 	.word	0x08006d15
 8006cc4:	08006d15 	.word	0x08006d15
 8006cc8:	08006d03 	.word	0x08006d03
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68da      	ldr	r2, [r3, #12]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f042 0202 	orr.w	r2, r2, #2
 8006cda:	60da      	str	r2, [r3, #12]
      break;
 8006cdc:	e01d      	b.n	8006d1a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68da      	ldr	r2, [r3, #12]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f042 0204 	orr.w	r2, r2, #4
 8006cec:	60da      	str	r2, [r3, #12]
      break;
 8006cee:	e014      	b.n	8006d1a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68da      	ldr	r2, [r3, #12]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f042 0208 	orr.w	r2, r2, #8
 8006cfe:	60da      	str	r2, [r3, #12]
      break;
 8006d00:	e00b      	b.n	8006d1a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68da      	ldr	r2, [r3, #12]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f042 0210 	orr.w	r2, r2, #16
 8006d10:	60da      	str	r2, [r3, #12]
      break;
 8006d12:	e002      	b.n	8006d1a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	73fb      	strb	r3, [r7, #15]
      break;
 8006d18:	bf00      	nop
  }

  if (status == HAL_OK)
 8006d1a:	7bfb      	ldrb	r3, [r7, #15]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d134      	bne.n	8006d8a <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2201      	movs	r2, #1
 8006d26:	6839      	ldr	r1, [r7, #0]
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f000 ff54 	bl	8007bd6 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a18      	ldr	r2, [pc, #96]	; (8006d94 <HAL_TIM_IC_Start_IT+0x20c>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d00e      	beq.n	8006d56 <HAL_TIM_IC_Start_IT+0x1ce>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d40:	d009      	beq.n	8006d56 <HAL_TIM_IC_Start_IT+0x1ce>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a14      	ldr	r2, [pc, #80]	; (8006d98 <HAL_TIM_IC_Start_IT+0x210>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d004      	beq.n	8006d56 <HAL_TIM_IC_Start_IT+0x1ce>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a12      	ldr	r2, [pc, #72]	; (8006d9c <HAL_TIM_IC_Start_IT+0x214>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d111      	bne.n	8006d7a <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f003 0307 	and.w	r3, r3, #7
 8006d60:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	2b06      	cmp	r3, #6
 8006d66:	d010      	beq.n	8006d8a <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f042 0201 	orr.w	r2, r2, #1
 8006d76:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d78:	e007      	b.n	8006d8a <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f042 0201 	orr.w	r2, r2, #1
 8006d88:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3710      	adds	r7, #16
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	40012c00 	.word	0x40012c00
 8006d98:	40000400 	.word	0x40000400
 8006d9c:	40000800 	.word	0x40000800

08006da0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	f003 0302 	and.w	r3, r3, #2
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d122      	bne.n	8006dfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	f003 0302 	and.w	r3, r3, #2
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d11b      	bne.n	8006dfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f06f 0202 	mvn.w	r2, #2
 8006dcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	f003 0303 	and.w	r3, r3, #3
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d003      	beq.n	8006dea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f7fa fc5c 	bl	80016a0 <HAL_TIM_IC_CaptureCallback>
 8006de8:	e005      	b.n	8006df6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 fb4a 	bl	8007484 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 fb50 	bl	8007496 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	f003 0304 	and.w	r3, r3, #4
 8006e06:	2b04      	cmp	r3, #4
 8006e08:	d122      	bne.n	8006e50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	f003 0304 	and.w	r3, r3, #4
 8006e14:	2b04      	cmp	r3, #4
 8006e16:	d11b      	bne.n	8006e50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f06f 0204 	mvn.w	r2, #4
 8006e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2202      	movs	r2, #2
 8006e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	699b      	ldr	r3, [r3, #24]
 8006e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d003      	beq.n	8006e3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f7fa fc32 	bl	80016a0 <HAL_TIM_IC_CaptureCallback>
 8006e3c:	e005      	b.n	8006e4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 fb20 	bl	8007484 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 fb26 	bl	8007496 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	f003 0308 	and.w	r3, r3, #8
 8006e5a:	2b08      	cmp	r3, #8
 8006e5c:	d122      	bne.n	8006ea4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	f003 0308 	and.w	r3, r3, #8
 8006e68:	2b08      	cmp	r3, #8
 8006e6a:	d11b      	bne.n	8006ea4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f06f 0208 	mvn.w	r2, #8
 8006e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2204      	movs	r2, #4
 8006e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	69db      	ldr	r3, [r3, #28]
 8006e82:	f003 0303 	and.w	r3, r3, #3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d003      	beq.n	8006e92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f7fa fc08 	bl	80016a0 <HAL_TIM_IC_CaptureCallback>
 8006e90:	e005      	b.n	8006e9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 faf6 	bl	8007484 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 fafc 	bl	8007496 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	f003 0310 	and.w	r3, r3, #16
 8006eae:	2b10      	cmp	r3, #16
 8006eb0:	d122      	bne.n	8006ef8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	f003 0310 	and.w	r3, r3, #16
 8006ebc:	2b10      	cmp	r3, #16
 8006ebe:	d11b      	bne.n	8006ef8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f06f 0210 	mvn.w	r2, #16
 8006ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2208      	movs	r2, #8
 8006ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	69db      	ldr	r3, [r3, #28]
 8006ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d003      	beq.n	8006ee6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f7fa fbde 	bl	80016a0 <HAL_TIM_IC_CaptureCallback>
 8006ee4:	e005      	b.n	8006ef2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 facc 	bl	8007484 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 fad2 	bl	8007496 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	f003 0301 	and.w	r3, r3, #1
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d10e      	bne.n	8006f24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	f003 0301 	and.w	r3, r3, #1
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d107      	bne.n	8006f24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f06f 0201 	mvn.w	r2, #1
 8006f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f7fa fb74 	bl	800160c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f2e:	2b80      	cmp	r3, #128	; 0x80
 8006f30:	d10e      	bne.n	8006f50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f3c:	2b80      	cmp	r3, #128	; 0x80
 8006f3e:	d107      	bne.n	8006f50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fecf 	bl	8007cee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f5a:	2b40      	cmp	r3, #64	; 0x40
 8006f5c:	d10e      	bne.n	8006f7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f68:	2b40      	cmp	r3, #64	; 0x40
 8006f6a:	d107      	bne.n	8006f7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 fa96 	bl	80074a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	f003 0320 	and.w	r3, r3, #32
 8006f86:	2b20      	cmp	r3, #32
 8006f88:	d10e      	bne.n	8006fa8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	f003 0320 	and.w	r3, r3, #32
 8006f94:	2b20      	cmp	r3, #32
 8006f96:	d107      	bne.n	8006fa8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f06f 0220 	mvn.w	r2, #32
 8006fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 fe9a 	bl	8007cdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006fa8:	bf00      	nop
 8006faa:	3708      	adds	r7, #8
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d101      	bne.n	8006fce <HAL_TIM_IC_ConfigChannel+0x1e>
 8006fca:	2302      	movs	r3, #2
 8006fcc:	e088      	b.n	80070e0 <HAL_TIM_IC_ConfigChannel+0x130>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d11b      	bne.n	8007014 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6818      	ldr	r0, [r3, #0]
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	6819      	ldr	r1, [r3, #0]
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	685a      	ldr	r2, [r3, #4]
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	f000 fc50 	bl	8007890 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	699a      	ldr	r2, [r3, #24]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f022 020c 	bic.w	r2, r2, #12
 8006ffe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	6999      	ldr	r1, [r3, #24]
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	689a      	ldr	r2, [r3, #8]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	430a      	orrs	r2, r1
 8007010:	619a      	str	r2, [r3, #24]
 8007012:	e060      	b.n	80070d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2b04      	cmp	r3, #4
 8007018:	d11c      	bne.n	8007054 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6818      	ldr	r0, [r3, #0]
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	6819      	ldr	r1, [r3, #0]
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	685a      	ldr	r2, [r3, #4]
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	f000 fcb9 	bl	80079a0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	699a      	ldr	r2, [r3, #24]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800703c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	6999      	ldr	r1, [r3, #24]
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	021a      	lsls	r2, r3, #8
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	430a      	orrs	r2, r1
 8007050:	619a      	str	r2, [r3, #24]
 8007052:	e040      	b.n	80070d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2b08      	cmp	r3, #8
 8007058:	d11b      	bne.n	8007092 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	6818      	ldr	r0, [r3, #0]
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	6819      	ldr	r1, [r3, #0]
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	685a      	ldr	r2, [r3, #4]
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	f000 fd04 	bl	8007a76 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	69da      	ldr	r2, [r3, #28]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f022 020c 	bic.w	r2, r2, #12
 800707c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	69d9      	ldr	r1, [r3, #28]
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	689a      	ldr	r2, [r3, #8]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	430a      	orrs	r2, r1
 800708e:	61da      	str	r2, [r3, #28]
 8007090:	e021      	b.n	80070d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2b0c      	cmp	r3, #12
 8007096:	d11c      	bne.n	80070d2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6818      	ldr	r0, [r3, #0]
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	6819      	ldr	r1, [r3, #0]
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	685a      	ldr	r2, [r3, #4]
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	f000 fd20 	bl	8007aec <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	69da      	ldr	r2, [r3, #28]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80070ba:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	69d9      	ldr	r1, [r3, #28]
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	021a      	lsls	r2, r3, #8
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	430a      	orrs	r2, r1
 80070ce:	61da      	str	r2, [r3, #28]
 80070d0:	e001      	b.n	80070d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80070de:	7dfb      	ldrb	r3, [r7, #23]
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3718      	adds	r7, #24
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b086      	sub	sp, #24
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070f4:	2300      	movs	r3, #0
 80070f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d101      	bne.n	8007106 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007102:	2302      	movs	r3, #2
 8007104:	e0ae      	b.n	8007264 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2201      	movs	r2, #1
 800710a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2b0c      	cmp	r3, #12
 8007112:	f200 809f 	bhi.w	8007254 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007116:	a201      	add	r2, pc, #4	; (adr r2, 800711c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711c:	08007151 	.word	0x08007151
 8007120:	08007255 	.word	0x08007255
 8007124:	08007255 	.word	0x08007255
 8007128:	08007255 	.word	0x08007255
 800712c:	08007191 	.word	0x08007191
 8007130:	08007255 	.word	0x08007255
 8007134:	08007255 	.word	0x08007255
 8007138:	08007255 	.word	0x08007255
 800713c:	080071d3 	.word	0x080071d3
 8007140:	08007255 	.word	0x08007255
 8007144:	08007255 	.word	0x08007255
 8007148:	08007255 	.word	0x08007255
 800714c:	08007213 	.word	0x08007213
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68b9      	ldr	r1, [r7, #8]
 8007156:	4618      	mov	r0, r3
 8007158:	f000 fa12 	bl	8007580 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	699a      	ldr	r2, [r3, #24]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f042 0208 	orr.w	r2, r2, #8
 800716a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	699a      	ldr	r2, [r3, #24]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f022 0204 	bic.w	r2, r2, #4
 800717a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6999      	ldr	r1, [r3, #24]
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	691a      	ldr	r2, [r3, #16]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	430a      	orrs	r2, r1
 800718c:	619a      	str	r2, [r3, #24]
      break;
 800718e:	e064      	b.n	800725a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	68b9      	ldr	r1, [r7, #8]
 8007196:	4618      	mov	r0, r3
 8007198:	f000 fa58 	bl	800764c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	699a      	ldr	r2, [r3, #24]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	699a      	ldr	r2, [r3, #24]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	6999      	ldr	r1, [r3, #24]
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	021a      	lsls	r2, r3, #8
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	430a      	orrs	r2, r1
 80071ce:	619a      	str	r2, [r3, #24]
      break;
 80071d0:	e043      	b.n	800725a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68b9      	ldr	r1, [r7, #8]
 80071d8:	4618      	mov	r0, r3
 80071da:	f000 faa1 	bl	8007720 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	69da      	ldr	r2, [r3, #28]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f042 0208 	orr.w	r2, r2, #8
 80071ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	69da      	ldr	r2, [r3, #28]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f022 0204 	bic.w	r2, r2, #4
 80071fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	69d9      	ldr	r1, [r3, #28]
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	691a      	ldr	r2, [r3, #16]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	430a      	orrs	r2, r1
 800720e:	61da      	str	r2, [r3, #28]
      break;
 8007210:	e023      	b.n	800725a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	68b9      	ldr	r1, [r7, #8]
 8007218:	4618      	mov	r0, r3
 800721a:	f000 faeb 	bl	80077f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	69da      	ldr	r2, [r3, #28]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800722c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	69da      	ldr	r2, [r3, #28]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800723c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	69d9      	ldr	r1, [r3, #28]
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	691b      	ldr	r3, [r3, #16]
 8007248:	021a      	lsls	r2, r3, #8
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	430a      	orrs	r2, r1
 8007250:	61da      	str	r2, [r3, #28]
      break;
 8007252:	e002      	b.n	800725a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	75fb      	strb	r3, [r7, #23]
      break;
 8007258:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007262:	7dfb      	ldrb	r3, [r7, #23]
}
 8007264:	4618      	mov	r0, r3
 8007266:	3718      	adds	r7, #24
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007276:	2300      	movs	r3, #0
 8007278:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007280:	2b01      	cmp	r3, #1
 8007282:	d101      	bne.n	8007288 <HAL_TIM_ConfigClockSource+0x1c>
 8007284:	2302      	movs	r3, #2
 8007286:	e0b4      	b.n	80073f2 <HAL_TIM_ConfigClockSource+0x186>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2202      	movs	r2, #2
 8007294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80072a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68ba      	ldr	r2, [r7, #8]
 80072b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072c0:	d03e      	beq.n	8007340 <HAL_TIM_ConfigClockSource+0xd4>
 80072c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072c6:	f200 8087 	bhi.w	80073d8 <HAL_TIM_ConfigClockSource+0x16c>
 80072ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072ce:	f000 8086 	beq.w	80073de <HAL_TIM_ConfigClockSource+0x172>
 80072d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072d6:	d87f      	bhi.n	80073d8 <HAL_TIM_ConfigClockSource+0x16c>
 80072d8:	2b70      	cmp	r3, #112	; 0x70
 80072da:	d01a      	beq.n	8007312 <HAL_TIM_ConfigClockSource+0xa6>
 80072dc:	2b70      	cmp	r3, #112	; 0x70
 80072de:	d87b      	bhi.n	80073d8 <HAL_TIM_ConfigClockSource+0x16c>
 80072e0:	2b60      	cmp	r3, #96	; 0x60
 80072e2:	d050      	beq.n	8007386 <HAL_TIM_ConfigClockSource+0x11a>
 80072e4:	2b60      	cmp	r3, #96	; 0x60
 80072e6:	d877      	bhi.n	80073d8 <HAL_TIM_ConfigClockSource+0x16c>
 80072e8:	2b50      	cmp	r3, #80	; 0x50
 80072ea:	d03c      	beq.n	8007366 <HAL_TIM_ConfigClockSource+0xfa>
 80072ec:	2b50      	cmp	r3, #80	; 0x50
 80072ee:	d873      	bhi.n	80073d8 <HAL_TIM_ConfigClockSource+0x16c>
 80072f0:	2b40      	cmp	r3, #64	; 0x40
 80072f2:	d058      	beq.n	80073a6 <HAL_TIM_ConfigClockSource+0x13a>
 80072f4:	2b40      	cmp	r3, #64	; 0x40
 80072f6:	d86f      	bhi.n	80073d8 <HAL_TIM_ConfigClockSource+0x16c>
 80072f8:	2b30      	cmp	r3, #48	; 0x30
 80072fa:	d064      	beq.n	80073c6 <HAL_TIM_ConfigClockSource+0x15a>
 80072fc:	2b30      	cmp	r3, #48	; 0x30
 80072fe:	d86b      	bhi.n	80073d8 <HAL_TIM_ConfigClockSource+0x16c>
 8007300:	2b20      	cmp	r3, #32
 8007302:	d060      	beq.n	80073c6 <HAL_TIM_ConfigClockSource+0x15a>
 8007304:	2b20      	cmp	r3, #32
 8007306:	d867      	bhi.n	80073d8 <HAL_TIM_ConfigClockSource+0x16c>
 8007308:	2b00      	cmp	r3, #0
 800730a:	d05c      	beq.n	80073c6 <HAL_TIM_ConfigClockSource+0x15a>
 800730c:	2b10      	cmp	r3, #16
 800730e:	d05a      	beq.n	80073c6 <HAL_TIM_ConfigClockSource+0x15a>
 8007310:	e062      	b.n	80073d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6818      	ldr	r0, [r3, #0]
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	6899      	ldr	r1, [r3, #8]
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	685a      	ldr	r2, [r3, #4]
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	f000 fc39 	bl	8007b98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007334:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68ba      	ldr	r2, [r7, #8]
 800733c:	609a      	str	r2, [r3, #8]
      break;
 800733e:	e04f      	b.n	80073e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6818      	ldr	r0, [r3, #0]
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	6899      	ldr	r1, [r3, #8]
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	685a      	ldr	r2, [r3, #4]
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	f000 fc22 	bl	8007b98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	689a      	ldr	r2, [r3, #8]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007362:	609a      	str	r2, [r3, #8]
      break;
 8007364:	e03c      	b.n	80073e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6818      	ldr	r0, [r3, #0]
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	6859      	ldr	r1, [r3, #4]
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	461a      	mov	r2, r3
 8007374:	f000 fae6 	bl	8007944 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2150      	movs	r1, #80	; 0x50
 800737e:	4618      	mov	r0, r3
 8007380:	f000 fbf0 	bl	8007b64 <TIM_ITRx_SetConfig>
      break;
 8007384:	e02c      	b.n	80073e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6818      	ldr	r0, [r3, #0]
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	6859      	ldr	r1, [r3, #4]
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	461a      	mov	r2, r3
 8007394:	f000 fb40 	bl	8007a18 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2160      	movs	r1, #96	; 0x60
 800739e:	4618      	mov	r0, r3
 80073a0:	f000 fbe0 	bl	8007b64 <TIM_ITRx_SetConfig>
      break;
 80073a4:	e01c      	b.n	80073e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6818      	ldr	r0, [r3, #0]
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	6859      	ldr	r1, [r3, #4]
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	461a      	mov	r2, r3
 80073b4:	f000 fac6 	bl	8007944 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2140      	movs	r1, #64	; 0x40
 80073be:	4618      	mov	r0, r3
 80073c0:	f000 fbd0 	bl	8007b64 <TIM_ITRx_SetConfig>
      break;
 80073c4:	e00c      	b.n	80073e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4619      	mov	r1, r3
 80073d0:	4610      	mov	r0, r2
 80073d2:	f000 fbc7 	bl	8007b64 <TIM_ITRx_SetConfig>
      break;
 80073d6:	e003      	b.n	80073e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	73fb      	strb	r3, [r7, #15]
      break;
 80073dc:	e000      	b.n	80073e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80073de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80073f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
	...

080073fc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007406:	2300      	movs	r3, #0
 8007408:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	2b0c      	cmp	r3, #12
 800740e:	d831      	bhi.n	8007474 <HAL_TIM_ReadCapturedValue+0x78>
 8007410:	a201      	add	r2, pc, #4	; (adr r2, 8007418 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007416:	bf00      	nop
 8007418:	0800744d 	.word	0x0800744d
 800741c:	08007475 	.word	0x08007475
 8007420:	08007475 	.word	0x08007475
 8007424:	08007475 	.word	0x08007475
 8007428:	08007457 	.word	0x08007457
 800742c:	08007475 	.word	0x08007475
 8007430:	08007475 	.word	0x08007475
 8007434:	08007475 	.word	0x08007475
 8007438:	08007461 	.word	0x08007461
 800743c:	08007475 	.word	0x08007475
 8007440:	08007475 	.word	0x08007475
 8007444:	08007475 	.word	0x08007475
 8007448:	0800746b 	.word	0x0800746b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007452:	60fb      	str	r3, [r7, #12]

      break;
 8007454:	e00f      	b.n	8007476 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800745c:	60fb      	str	r3, [r7, #12]

      break;
 800745e:	e00a      	b.n	8007476 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007466:	60fb      	str	r3, [r7, #12]

      break;
 8007468:	e005      	b.n	8007476 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007470:	60fb      	str	r3, [r7, #12]

      break;
 8007472:	e000      	b.n	8007476 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007474:	bf00      	nop
  }

  return tmpreg;
 8007476:	68fb      	ldr	r3, [r7, #12]
}
 8007478:	4618      	mov	r0, r3
 800747a:	3714      	adds	r7, #20
 800747c:	46bd      	mov	sp, r7
 800747e:	bc80      	pop	{r7}
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop

08007484 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800748c:	bf00      	nop
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	bc80      	pop	{r7}
 8007494:	4770      	bx	lr

08007496 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007496:	b480      	push	{r7}
 8007498:	b083      	sub	sp, #12
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800749e:	bf00      	nop
 80074a0:	370c      	adds	r7, #12
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bc80      	pop	{r7}
 80074a6:	4770      	bx	lr

080074a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bc80      	pop	{r7}
 80074b8:	4770      	bx	lr
	...

080074bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a29      	ldr	r2, [pc, #164]	; (8007574 <TIM_Base_SetConfig+0xb8>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d00b      	beq.n	80074ec <TIM_Base_SetConfig+0x30>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074da:	d007      	beq.n	80074ec <TIM_Base_SetConfig+0x30>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a26      	ldr	r2, [pc, #152]	; (8007578 <TIM_Base_SetConfig+0xbc>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d003      	beq.n	80074ec <TIM_Base_SetConfig+0x30>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a25      	ldr	r2, [pc, #148]	; (800757c <TIM_Base_SetConfig+0xc0>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d108      	bne.n	80074fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a1c      	ldr	r2, [pc, #112]	; (8007574 <TIM_Base_SetConfig+0xb8>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d00b      	beq.n	800751e <TIM_Base_SetConfig+0x62>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800750c:	d007      	beq.n	800751e <TIM_Base_SetConfig+0x62>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a19      	ldr	r2, [pc, #100]	; (8007578 <TIM_Base_SetConfig+0xbc>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d003      	beq.n	800751e <TIM_Base_SetConfig+0x62>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a18      	ldr	r2, [pc, #96]	; (800757c <TIM_Base_SetConfig+0xc0>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d108      	bne.n	8007530 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	4313      	orrs	r3, r2
 800752e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	695b      	ldr	r3, [r3, #20]
 800753a:	4313      	orrs	r3, r2
 800753c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	689a      	ldr	r2, [r3, #8]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a07      	ldr	r2, [pc, #28]	; (8007574 <TIM_Base_SetConfig+0xb8>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d103      	bne.n	8007564 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	691a      	ldr	r2, [r3, #16]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	615a      	str	r2, [r3, #20]
}
 800756a:	bf00      	nop
 800756c:	3714      	adds	r7, #20
 800756e:	46bd      	mov	sp, r7
 8007570:	bc80      	pop	{r7}
 8007572:	4770      	bx	lr
 8007574:	40012c00 	.word	0x40012c00
 8007578:	40000400 	.word	0x40000400
 800757c:	40000800 	.word	0x40000800

08007580 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007580:	b480      	push	{r7}
 8007582:	b087      	sub	sp, #28
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a1b      	ldr	r3, [r3, #32]
 800758e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a1b      	ldr	r3, [r3, #32]
 8007594:	f023 0201 	bic.w	r2, r3, #1
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	699b      	ldr	r3, [r3, #24]
 80075a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f023 0303 	bic.w	r3, r3, #3
 80075b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	4313      	orrs	r3, r2
 80075c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	f023 0302 	bic.w	r3, r3, #2
 80075c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	697a      	ldr	r2, [r7, #20]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a1c      	ldr	r2, [pc, #112]	; (8007648 <TIM_OC1_SetConfig+0xc8>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d10c      	bne.n	80075f6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	f023 0308 	bic.w	r3, r3, #8
 80075e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	697a      	ldr	r2, [r7, #20]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	f023 0304 	bic.w	r3, r3, #4
 80075f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4a13      	ldr	r2, [pc, #76]	; (8007648 <TIM_OC1_SetConfig+0xc8>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d111      	bne.n	8007622 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007604:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800760c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	693a      	ldr	r2, [r7, #16]
 8007614:	4313      	orrs	r3, r2
 8007616:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	699b      	ldr	r3, [r3, #24]
 800761c:	693a      	ldr	r2, [r7, #16]
 800761e:	4313      	orrs	r3, r2
 8007620:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	693a      	ldr	r2, [r7, #16]
 8007626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	685a      	ldr	r2, [r3, #4]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	697a      	ldr	r2, [r7, #20]
 800763a:	621a      	str	r2, [r3, #32]
}
 800763c:	bf00      	nop
 800763e:	371c      	adds	r7, #28
 8007640:	46bd      	mov	sp, r7
 8007642:	bc80      	pop	{r7}
 8007644:	4770      	bx	lr
 8007646:	bf00      	nop
 8007648:	40012c00 	.word	0x40012c00

0800764c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800764c:	b480      	push	{r7}
 800764e:	b087      	sub	sp, #28
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a1b      	ldr	r3, [r3, #32]
 800765a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6a1b      	ldr	r3, [r3, #32]
 8007660:	f023 0210 	bic.w	r2, r3, #16
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	699b      	ldr	r3, [r3, #24]
 8007672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800767a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007682:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	021b      	lsls	r3, r3, #8
 800768a:	68fa      	ldr	r2, [r7, #12]
 800768c:	4313      	orrs	r3, r2
 800768e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	f023 0320 	bic.w	r3, r3, #32
 8007696:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	011b      	lsls	r3, r3, #4
 800769e:	697a      	ldr	r2, [r7, #20]
 80076a0:	4313      	orrs	r3, r2
 80076a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4a1d      	ldr	r2, [pc, #116]	; (800771c <TIM_OC2_SetConfig+0xd0>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d10d      	bne.n	80076c8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	011b      	lsls	r3, r3, #4
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	4313      	orrs	r3, r2
 80076be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a14      	ldr	r2, [pc, #80]	; (800771c <TIM_OC2_SetConfig+0xd0>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d113      	bne.n	80076f8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	695b      	ldr	r3, [r3, #20]
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	693a      	ldr	r2, [r7, #16]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	699b      	ldr	r3, [r3, #24]
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	693a      	ldr	r2, [r7, #16]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	693a      	ldr	r2, [r7, #16]
 80076fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	685a      	ldr	r2, [r3, #4]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	697a      	ldr	r2, [r7, #20]
 8007710:	621a      	str	r2, [r3, #32]
}
 8007712:	bf00      	nop
 8007714:	371c      	adds	r7, #28
 8007716:	46bd      	mov	sp, r7
 8007718:	bc80      	pop	{r7}
 800771a:	4770      	bx	lr
 800771c:	40012c00 	.word	0x40012c00

08007720 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007720:	b480      	push	{r7}
 8007722:	b087      	sub	sp, #28
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6a1b      	ldr	r3, [r3, #32]
 800772e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6a1b      	ldr	r3, [r3, #32]
 8007734:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	69db      	ldr	r3, [r3, #28]
 8007746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800774e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f023 0303 	bic.w	r3, r3, #3
 8007756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	4313      	orrs	r3, r2
 8007760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	021b      	lsls	r3, r3, #8
 8007770:	697a      	ldr	r2, [r7, #20]
 8007772:	4313      	orrs	r3, r2
 8007774:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a1d      	ldr	r2, [pc, #116]	; (80077f0 <TIM_OC3_SetConfig+0xd0>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d10d      	bne.n	800779a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007784:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	021b      	lsls	r3, r3, #8
 800778c:	697a      	ldr	r2, [r7, #20]
 800778e:	4313      	orrs	r3, r2
 8007790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007798:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4a14      	ldr	r2, [pc, #80]	; (80077f0 <TIM_OC3_SetConfig+0xd0>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d113      	bne.n	80077ca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	695b      	ldr	r3, [r3, #20]
 80077b6:	011b      	lsls	r3, r3, #4
 80077b8:	693a      	ldr	r2, [r7, #16]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	699b      	ldr	r3, [r3, #24]
 80077c2:	011b      	lsls	r3, r3, #4
 80077c4:	693a      	ldr	r2, [r7, #16]
 80077c6:	4313      	orrs	r3, r2
 80077c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	693a      	ldr	r2, [r7, #16]
 80077ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	685a      	ldr	r2, [r3, #4]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	697a      	ldr	r2, [r7, #20]
 80077e2:	621a      	str	r2, [r3, #32]
}
 80077e4:	bf00      	nop
 80077e6:	371c      	adds	r7, #28
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bc80      	pop	{r7}
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	40012c00 	.word	0x40012c00

080077f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b087      	sub	sp, #28
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a1b      	ldr	r3, [r3, #32]
 8007802:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6a1b      	ldr	r3, [r3, #32]
 8007808:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	69db      	ldr	r3, [r3, #28]
 800781a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800782a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	021b      	lsls	r3, r3, #8
 8007832:	68fa      	ldr	r2, [r7, #12]
 8007834:	4313      	orrs	r3, r2
 8007836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800783e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	031b      	lsls	r3, r3, #12
 8007846:	693a      	ldr	r2, [r7, #16]
 8007848:	4313      	orrs	r3, r2
 800784a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a0f      	ldr	r2, [pc, #60]	; (800788c <TIM_OC4_SetConfig+0x98>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d109      	bne.n	8007868 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800785a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	695b      	ldr	r3, [r3, #20]
 8007860:	019b      	lsls	r3, r3, #6
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	4313      	orrs	r3, r2
 8007866:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	697a      	ldr	r2, [r7, #20]
 800786c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	685a      	ldr	r2, [r3, #4]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	693a      	ldr	r2, [r7, #16]
 8007880:	621a      	str	r2, [r3, #32]
}
 8007882:	bf00      	nop
 8007884:	371c      	adds	r7, #28
 8007886:	46bd      	mov	sp, r7
 8007888:	bc80      	pop	{r7}
 800788a:	4770      	bx	lr
 800788c:	40012c00 	.word	0x40012c00

08007890 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007890:	b480      	push	{r7}
 8007892:	b087      	sub	sp, #28
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	607a      	str	r2, [r7, #4]
 800789c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	6a1b      	ldr	r3, [r3, #32]
 80078a2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6a1b      	ldr	r3, [r3, #32]
 80078a8:	f023 0201 	bic.w	r2, r3, #1
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	699b      	ldr	r3, [r3, #24]
 80078b4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	4a1f      	ldr	r2, [pc, #124]	; (8007938 <TIM_TI1_SetConfig+0xa8>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d00b      	beq.n	80078d6 <TIM_TI1_SetConfig+0x46>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078c4:	d007      	beq.n	80078d6 <TIM_TI1_SetConfig+0x46>
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	4a1c      	ldr	r2, [pc, #112]	; (800793c <TIM_TI1_SetConfig+0xac>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d003      	beq.n	80078d6 <TIM_TI1_SetConfig+0x46>
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	4a1b      	ldr	r2, [pc, #108]	; (8007940 <TIM_TI1_SetConfig+0xb0>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d101      	bne.n	80078da <TIM_TI1_SetConfig+0x4a>
 80078d6:	2301      	movs	r3, #1
 80078d8:	e000      	b.n	80078dc <TIM_TI1_SetConfig+0x4c>
 80078da:	2300      	movs	r3, #0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d008      	beq.n	80078f2 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	f023 0303 	bic.w	r3, r3, #3
 80078e6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80078e8:	697a      	ldr	r2, [r7, #20]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	617b      	str	r3, [r7, #20]
 80078f0:	e003      	b.n	80078fa <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	f043 0301 	orr.w	r3, r3, #1
 80078f8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007900:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	011b      	lsls	r3, r3, #4
 8007906:	b2db      	uxtb	r3, r3
 8007908:	697a      	ldr	r2, [r7, #20]
 800790a:	4313      	orrs	r3, r2
 800790c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	f023 030a 	bic.w	r3, r3, #10
 8007914:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	f003 030a 	and.w	r3, r3, #10
 800791c:	693a      	ldr	r2, [r7, #16]
 800791e:	4313      	orrs	r3, r2
 8007920:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	697a      	ldr	r2, [r7, #20]
 8007926:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	693a      	ldr	r2, [r7, #16]
 800792c:	621a      	str	r2, [r3, #32]
}
 800792e:	bf00      	nop
 8007930:	371c      	adds	r7, #28
 8007932:	46bd      	mov	sp, r7
 8007934:	bc80      	pop	{r7}
 8007936:	4770      	bx	lr
 8007938:	40012c00 	.word	0x40012c00
 800793c:	40000400 	.word	0x40000400
 8007940:	40000800 	.word	0x40000800

08007944 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007944:	b480      	push	{r7}
 8007946:	b087      	sub	sp, #28
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6a1b      	ldr	r3, [r3, #32]
 8007954:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	f023 0201 	bic.w	r2, r3, #1
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	699b      	ldr	r3, [r3, #24]
 8007966:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800796e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	011b      	lsls	r3, r3, #4
 8007974:	693a      	ldr	r2, [r7, #16]
 8007976:	4313      	orrs	r3, r2
 8007978:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	f023 030a 	bic.w	r3, r3, #10
 8007980:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007982:	697a      	ldr	r2, [r7, #20]
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	4313      	orrs	r3, r2
 8007988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	693a      	ldr	r2, [r7, #16]
 800798e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	697a      	ldr	r2, [r7, #20]
 8007994:	621a      	str	r2, [r3, #32]
}
 8007996:	bf00      	nop
 8007998:	371c      	adds	r7, #28
 800799a:	46bd      	mov	sp, r7
 800799c:	bc80      	pop	{r7}
 800799e:	4770      	bx	lr

080079a0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b087      	sub	sp, #28
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	607a      	str	r2, [r7, #4]
 80079ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6a1b      	ldr	r3, [r3, #32]
 80079b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6a1b      	ldr	r3, [r3, #32]
 80079b8:	f023 0210 	bic.w	r2, r3, #16
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	699b      	ldr	r3, [r3, #24]
 80079c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	021b      	lsls	r3, r3, #8
 80079d2:	693a      	ldr	r2, [r7, #16]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80079de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	031b      	lsls	r3, r3, #12
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	693a      	ldr	r2, [r7, #16]
 80079e8:	4313      	orrs	r3, r2
 80079ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80079f2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	011b      	lsls	r3, r3, #4
 80079f8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80079fc:	697a      	ldr	r2, [r7, #20]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	693a      	ldr	r2, [r7, #16]
 8007a06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	697a      	ldr	r2, [r7, #20]
 8007a0c:	621a      	str	r2, [r3, #32]
}
 8007a0e:	bf00      	nop
 8007a10:	371c      	adds	r7, #28
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bc80      	pop	{r7}
 8007a16:	4770      	bx	lr

08007a18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b087      	sub	sp, #28
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6a1b      	ldr	r3, [r3, #32]
 8007a28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6a1b      	ldr	r3, [r3, #32]
 8007a2e:	f023 0210 	bic.w	r2, r3, #16
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	699b      	ldr	r3, [r3, #24]
 8007a3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	031b      	lsls	r3, r3, #12
 8007a48:	693a      	ldr	r2, [r7, #16]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a54:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	011b      	lsls	r3, r3, #4
 8007a5a:	697a      	ldr	r2, [r7, #20]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	693a      	ldr	r2, [r7, #16]
 8007a64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	697a      	ldr	r2, [r7, #20]
 8007a6a:	621a      	str	r2, [r3, #32]
}
 8007a6c:	bf00      	nop
 8007a6e:	371c      	adds	r7, #28
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bc80      	pop	{r7}
 8007a74:	4770      	bx	lr

08007a76 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007a76:	b480      	push	{r7}
 8007a78:	b087      	sub	sp, #28
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	60f8      	str	r0, [r7, #12]
 8007a7e:	60b9      	str	r1, [r7, #8]
 8007a80:	607a      	str	r2, [r7, #4]
 8007a82:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6a1b      	ldr	r3, [r3, #32]
 8007a88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6a1b      	ldr	r3, [r3, #32]
 8007a8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	69db      	ldr	r3, [r3, #28]
 8007a9a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	f023 0303 	bic.w	r3, r3, #3
 8007aa2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8007aa4:	693a      	ldr	r2, [r7, #16]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ab2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	011b      	lsls	r3, r3, #4
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ac6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	021b      	lsls	r3, r3, #8
 8007acc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ad0:	697a      	ldr	r2, [r7, #20]
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	693a      	ldr	r2, [r7, #16]
 8007ada:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	697a      	ldr	r2, [r7, #20]
 8007ae0:	621a      	str	r2, [r3, #32]
}
 8007ae2:	bf00      	nop
 8007ae4:	371c      	adds	r7, #28
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bc80      	pop	{r7}
 8007aea:	4770      	bx	lr

08007aec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b087      	sub	sp, #28
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	60b9      	str	r1, [r7, #8]
 8007af6:	607a      	str	r2, [r7, #4]
 8007af8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6a1b      	ldr	r3, [r3, #32]
 8007afe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6a1b      	ldr	r3, [r3, #32]
 8007b04:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	69db      	ldr	r3, [r3, #28]
 8007b10:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b18:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	021b      	lsls	r3, r3, #8
 8007b1e:	693a      	ldr	r2, [r7, #16]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b2a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	031b      	lsls	r3, r3, #12
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	693a      	ldr	r2, [r7, #16]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b3e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	031b      	lsls	r3, r3, #12
 8007b44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b48:	697a      	ldr	r2, [r7, #20]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	693a      	ldr	r2, [r7, #16]
 8007b52:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	697a      	ldr	r2, [r7, #20]
 8007b58:	621a      	str	r2, [r3, #32]
}
 8007b5a:	bf00      	nop
 8007b5c:	371c      	adds	r7, #28
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bc80      	pop	{r7}
 8007b62:	4770      	bx	lr

08007b64 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b085      	sub	sp, #20
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b7a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b7c:	683a      	ldr	r2, [r7, #0]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	f043 0307 	orr.w	r3, r3, #7
 8007b86:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	609a      	str	r2, [r3, #8]
}
 8007b8e:	bf00      	nop
 8007b90:	3714      	adds	r7, #20
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bc80      	pop	{r7}
 8007b96:	4770      	bx	lr

08007b98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b087      	sub	sp, #28
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	607a      	str	r2, [r7, #4]
 8007ba4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007bb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	021a      	lsls	r2, r3, #8
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	431a      	orrs	r2, r3
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	697a      	ldr	r2, [r7, #20]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	697a      	ldr	r2, [r7, #20]
 8007bca:	609a      	str	r2, [r3, #8]
}
 8007bcc:	bf00      	nop
 8007bce:	371c      	adds	r7, #28
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bc80      	pop	{r7}
 8007bd4:	4770      	bx	lr

08007bd6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007bd6:	b480      	push	{r7}
 8007bd8:	b087      	sub	sp, #28
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	60f8      	str	r0, [r7, #12]
 8007bde:	60b9      	str	r1, [r7, #8]
 8007be0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	f003 031f 	and.w	r3, r3, #31
 8007be8:	2201      	movs	r2, #1
 8007bea:	fa02 f303 	lsl.w	r3, r2, r3
 8007bee:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	6a1a      	ldr	r2, [r3, #32]
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	43db      	mvns	r3, r3
 8007bf8:	401a      	ands	r2, r3
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6a1a      	ldr	r2, [r3, #32]
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	f003 031f 	and.w	r3, r3, #31
 8007c08:	6879      	ldr	r1, [r7, #4]
 8007c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8007c0e:	431a      	orrs	r2, r3
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	621a      	str	r2, [r3, #32]
}
 8007c14:	bf00      	nop
 8007c16:	371c      	adds	r7, #28
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bc80      	pop	{r7}
 8007c1c:	4770      	bx	lr
	...

08007c20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d101      	bne.n	8007c38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c34:	2302      	movs	r3, #2
 8007c36:	e046      	b.n	8007cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2202      	movs	r2, #2
 8007c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a16      	ldr	r2, [pc, #88]	; (8007cd0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d00e      	beq.n	8007c9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c84:	d009      	beq.n	8007c9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a12      	ldr	r2, [pc, #72]	; (8007cd4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d004      	beq.n	8007c9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a10      	ldr	r2, [pc, #64]	; (8007cd8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d10c      	bne.n	8007cb4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ca0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	68ba      	ldr	r2, [r7, #8]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68ba      	ldr	r2, [r7, #8]
 8007cb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3714      	adds	r7, #20
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bc80      	pop	{r7}
 8007cce:	4770      	bx	lr
 8007cd0:	40012c00 	.word	0x40012c00
 8007cd4:	40000400 	.word	0x40000400
 8007cd8:	40000800 	.word	0x40000800

08007cdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ce4:	bf00      	nop
 8007ce6:	370c      	adds	r7, #12
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bc80      	pop	{r7}
 8007cec:	4770      	bx	lr

08007cee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007cee:	b480      	push	{r7}
 8007cf0:	b083      	sub	sp, #12
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007cf6:	bf00      	nop
 8007cf8:	370c      	adds	r7, #12
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bc80      	pop	{r7}
 8007cfe:	4770      	bx	lr

08007d00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d101      	bne.n	8007d12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e042      	b.n	8007d98 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d106      	bne.n	8007d2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f7fb fb2a 	bl	8003380 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2224      	movs	r2, #36	; 0x24
 8007d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	68da      	ldr	r2, [r3, #12]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 fdc5 	bl	80088d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	691a      	ldr	r2, [r3, #16]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	695a      	ldr	r2, [r3, #20]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	68da      	ldr	r2, [r3, #12]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2220      	movs	r2, #32
 8007d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2220      	movs	r2, #32
 8007d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3708      	adds	r7, #8
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b08a      	sub	sp, #40	; 0x28
 8007da4:	af02      	add	r7, sp, #8
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	603b      	str	r3, [r7, #0]
 8007dac:	4613      	mov	r3, r2
 8007dae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007db0:	2300      	movs	r3, #0
 8007db2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	2b20      	cmp	r3, #32
 8007dbe:	d16d      	bne.n	8007e9c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d002      	beq.n	8007dcc <HAL_UART_Transmit+0x2c>
 8007dc6:	88fb      	ldrh	r3, [r7, #6]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d101      	bne.n	8007dd0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e066      	b.n	8007e9e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2221      	movs	r2, #33	; 0x21
 8007dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007dde:	f7fb fcb7 	bl	8003750 <HAL_GetTick>
 8007de2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	88fa      	ldrh	r2, [r7, #6]
 8007de8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	88fa      	ldrh	r2, [r7, #6]
 8007dee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007df8:	d108      	bne.n	8007e0c <HAL_UART_Transmit+0x6c>
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d104      	bne.n	8007e0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007e02:	2300      	movs	r3, #0
 8007e04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	61bb      	str	r3, [r7, #24]
 8007e0a:	e003      	b.n	8007e14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e10:	2300      	movs	r3, #0
 8007e12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007e14:	e02a      	b.n	8007e6c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	9300      	str	r3, [sp, #0]
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	2180      	movs	r1, #128	; 0x80
 8007e20:	68f8      	ldr	r0, [r7, #12]
 8007e22:	f000 fb14 	bl	800844e <UART_WaitOnFlagUntilTimeout>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d001      	beq.n	8007e30 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	e036      	b.n	8007e9e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d10b      	bne.n	8007e4e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	881b      	ldrh	r3, [r3, #0]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007e46:	69bb      	ldr	r3, [r7, #24]
 8007e48:	3302      	adds	r3, #2
 8007e4a:	61bb      	str	r3, [r7, #24]
 8007e4c:	e007      	b.n	8007e5e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e4e:	69fb      	ldr	r3, [r7, #28]
 8007e50:	781a      	ldrb	r2, [r3, #0]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	3b01      	subs	r3, #1
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d1cf      	bne.n	8007e16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	9300      	str	r3, [sp, #0]
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	2140      	movs	r1, #64	; 0x40
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	f000 fae4 	bl	800844e <UART_WaitOnFlagUntilTimeout>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d001      	beq.n	8007e90 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	e006      	b.n	8007e9e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2220      	movs	r2, #32
 8007e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	e000      	b.n	8007e9e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007e9c:	2302      	movs	r3, #2
  }
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3720      	adds	r7, #32
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b084      	sub	sp, #16
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	60f8      	str	r0, [r7, #12]
 8007eae:	60b9      	str	r1, [r7, #8]
 8007eb0:	4613      	mov	r3, r2
 8007eb2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	2b20      	cmp	r3, #32
 8007ebe:	d112      	bne.n	8007ee6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d002      	beq.n	8007ecc <HAL_UART_Receive_IT+0x26>
 8007ec6:	88fb      	ldrh	r3, [r7, #6]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d101      	bne.n	8007ed0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e00b      	b.n	8007ee8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007ed6:	88fb      	ldrh	r3, [r7, #6]
 8007ed8:	461a      	mov	r2, r3
 8007eda:	68b9      	ldr	r1, [r7, #8]
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f000 fb24 	bl	800852a <UART_Start_Receive_IT>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	e000      	b.n	8007ee8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007ee6:	2302      	movs	r3, #2
  }
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3710      	adds	r7, #16
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b0ba      	sub	sp, #232	; 0xe8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	695b      	ldr	r3, [r3, #20]
 8007f12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007f16:	2300      	movs	r3, #0
 8007f18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f26:	f003 030f 	and.w	r3, r3, #15
 8007f2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007f2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d10f      	bne.n	8007f56 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f3a:	f003 0320 	and.w	r3, r3, #32
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d009      	beq.n	8007f56 <HAL_UART_IRQHandler+0x66>
 8007f42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f46:	f003 0320 	and.w	r3, r3, #32
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d003      	beq.n	8007f56 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 fc01 	bl	8008756 <UART_Receive_IT>
      return;
 8007f54:	e25b      	b.n	800840e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007f56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	f000 80de 	beq.w	800811c <HAL_UART_IRQHandler+0x22c>
 8007f60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f64:	f003 0301 	and.w	r3, r3, #1
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d106      	bne.n	8007f7a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f70:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f000 80d1 	beq.w	800811c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f7e:	f003 0301 	and.w	r3, r3, #1
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00b      	beq.n	8007f9e <HAL_UART_IRQHandler+0xae>
 8007f86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d005      	beq.n	8007f9e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f96:	f043 0201 	orr.w	r2, r3, #1
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fa2:	f003 0304 	and.w	r3, r3, #4
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00b      	beq.n	8007fc2 <HAL_UART_IRQHandler+0xd2>
 8007faa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fae:	f003 0301 	and.w	r3, r3, #1
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d005      	beq.n	8007fc2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fba:	f043 0202 	orr.w	r2, r3, #2
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fc6:	f003 0302 	and.w	r3, r3, #2
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00b      	beq.n	8007fe6 <HAL_UART_IRQHandler+0xf6>
 8007fce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fd2:	f003 0301 	and.w	r3, r3, #1
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d005      	beq.n	8007fe6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fde:	f043 0204 	orr.w	r2, r3, #4
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fea:	f003 0308 	and.w	r3, r3, #8
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d011      	beq.n	8008016 <HAL_UART_IRQHandler+0x126>
 8007ff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ff6:	f003 0320 	and.w	r3, r3, #32
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d105      	bne.n	800800a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007ffe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008002:	f003 0301 	and.w	r3, r3, #1
 8008006:	2b00      	cmp	r3, #0
 8008008:	d005      	beq.n	8008016 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800800e:	f043 0208 	orr.w	r2, r3, #8
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800801a:	2b00      	cmp	r3, #0
 800801c:	f000 81f2 	beq.w	8008404 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008024:	f003 0320 	and.w	r3, r3, #32
 8008028:	2b00      	cmp	r3, #0
 800802a:	d008      	beq.n	800803e <HAL_UART_IRQHandler+0x14e>
 800802c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008030:	f003 0320 	and.w	r3, r3, #32
 8008034:	2b00      	cmp	r3, #0
 8008036:	d002      	beq.n	800803e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 fb8c 	bl	8008756 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	695b      	ldr	r3, [r3, #20]
 8008044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008048:	2b00      	cmp	r3, #0
 800804a:	bf14      	ite	ne
 800804c:	2301      	movne	r3, #1
 800804e:	2300      	moveq	r3, #0
 8008050:	b2db      	uxtb	r3, r3
 8008052:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800805a:	f003 0308 	and.w	r3, r3, #8
 800805e:	2b00      	cmp	r3, #0
 8008060:	d103      	bne.n	800806a <HAL_UART_IRQHandler+0x17a>
 8008062:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008066:	2b00      	cmp	r3, #0
 8008068:	d04f      	beq.n	800810a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 fa96 	bl	800859c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	695b      	ldr	r3, [r3, #20]
 8008076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800807a:	2b00      	cmp	r3, #0
 800807c:	d041      	beq.n	8008102 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	3314      	adds	r3, #20
 8008084:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008088:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800808c:	e853 3f00 	ldrex	r3, [r3]
 8008090:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008094:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008098:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800809c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	3314      	adds	r3, #20
 80080a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80080aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80080ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80080b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80080ba:	e841 2300 	strex	r3, r2, [r1]
 80080be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80080c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d1d9      	bne.n	800807e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d013      	beq.n	80080fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080d6:	4a7e      	ldr	r2, [pc, #504]	; (80082d0 <HAL_UART_IRQHandler+0x3e0>)
 80080d8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080de:	4618      	mov	r0, r3
 80080e0:	f7fc f934 	bl	800434c <HAL_DMA_Abort_IT>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d016      	beq.n	8008118 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80080f4:	4610      	mov	r0, r2
 80080f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080f8:	e00e      	b.n	8008118 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 f993 	bl	8008426 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008100:	e00a      	b.n	8008118 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 f98f 	bl	8008426 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008108:	e006      	b.n	8008118 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 f98b 	bl	8008426 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8008116:	e175      	b.n	8008404 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008118:	bf00      	nop
    return;
 800811a:	e173      	b.n	8008404 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008120:	2b01      	cmp	r3, #1
 8008122:	f040 814f 	bne.w	80083c4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800812a:	f003 0310 	and.w	r3, r3, #16
 800812e:	2b00      	cmp	r3, #0
 8008130:	f000 8148 	beq.w	80083c4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008138:	f003 0310 	and.w	r3, r3, #16
 800813c:	2b00      	cmp	r3, #0
 800813e:	f000 8141 	beq.w	80083c4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008142:	2300      	movs	r3, #0
 8008144:	60bb      	str	r3, [r7, #8]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	60bb      	str	r3, [r7, #8]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	60bb      	str	r3, [r7, #8]
 8008156:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	695b      	ldr	r3, [r3, #20]
 800815e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008162:	2b00      	cmp	r3, #0
 8008164:	f000 80b6 	beq.w	80082d4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008174:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008178:	2b00      	cmp	r3, #0
 800817a:	f000 8145 	beq.w	8008408 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008182:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008186:	429a      	cmp	r2, r3
 8008188:	f080 813e 	bcs.w	8008408 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008192:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008198:	699b      	ldr	r3, [r3, #24]
 800819a:	2b20      	cmp	r3, #32
 800819c:	f000 8088 	beq.w	80082b0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	330c      	adds	r3, #12
 80081a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80081ae:	e853 3f00 	ldrex	r3, [r3]
 80081b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80081b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80081ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	330c      	adds	r3, #12
 80081c8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80081cc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80081d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80081d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80081dc:	e841 2300 	strex	r3, r2, [r1]
 80081e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80081e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d1d9      	bne.n	80081a0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	3314      	adds	r3, #20
 80081f2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081f6:	e853 3f00 	ldrex	r3, [r3]
 80081fa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80081fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081fe:	f023 0301 	bic.w	r3, r3, #1
 8008202:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	3314      	adds	r3, #20
 800820c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008210:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008214:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008216:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008218:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800821c:	e841 2300 	strex	r3, r2, [r1]
 8008220:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008222:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008224:	2b00      	cmp	r3, #0
 8008226:	d1e1      	bne.n	80081ec <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	3314      	adds	r3, #20
 800822e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008230:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008232:	e853 3f00 	ldrex	r3, [r3]
 8008236:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008238:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800823a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800823e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	3314      	adds	r3, #20
 8008248:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800824c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800824e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008250:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008252:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008254:	e841 2300 	strex	r3, r2, [r1]
 8008258:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800825a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800825c:	2b00      	cmp	r3, #0
 800825e:	d1e3      	bne.n	8008228 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2220      	movs	r2, #32
 8008264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	330c      	adds	r3, #12
 8008274:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008278:	e853 3f00 	ldrex	r3, [r3]
 800827c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800827e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008280:	f023 0310 	bic.w	r3, r3, #16
 8008284:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	330c      	adds	r3, #12
 800828e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008292:	65ba      	str	r2, [r7, #88]	; 0x58
 8008294:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008296:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008298:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800829a:	e841 2300 	strex	r3, r2, [r1]
 800829e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80082a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d1e3      	bne.n	800826e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7fc f812 	bl	80042d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2202      	movs	r2, #2
 80082b4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80082be:	b29b      	uxth	r3, r3
 80082c0:	1ad3      	subs	r3, r2, r3
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	4619      	mov	r1, r3
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 f8b6 	bl	8008438 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80082cc:	e09c      	b.n	8008408 <HAL_UART_IRQHandler+0x518>
 80082ce:	bf00      	nop
 80082d0:	08008661 	.word	0x08008661
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80082dc:	b29b      	uxth	r3, r3
 80082de:	1ad3      	subs	r3, r2, r3
 80082e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	f000 808e 	beq.w	800840c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80082f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f000 8089 	beq.w	800840c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	330c      	adds	r3, #12
 8008300:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008304:	e853 3f00 	ldrex	r3, [r3]
 8008308:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800830a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800830c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008310:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	330c      	adds	r3, #12
 800831a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800831e:	647a      	str	r2, [r7, #68]	; 0x44
 8008320:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008322:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008324:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008326:	e841 2300 	strex	r3, r2, [r1]
 800832a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800832c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800832e:	2b00      	cmp	r3, #0
 8008330:	d1e3      	bne.n	80082fa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	3314      	adds	r3, #20
 8008338:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833c:	e853 3f00 	ldrex	r3, [r3]
 8008340:	623b      	str	r3, [r7, #32]
   return(result);
 8008342:	6a3b      	ldr	r3, [r7, #32]
 8008344:	f023 0301 	bic.w	r3, r3, #1
 8008348:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	3314      	adds	r3, #20
 8008352:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008356:	633a      	str	r2, [r7, #48]	; 0x30
 8008358:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800835c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800835e:	e841 2300 	strex	r3, r2, [r1]
 8008362:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008366:	2b00      	cmp	r3, #0
 8008368:	d1e3      	bne.n	8008332 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2220      	movs	r2, #32
 800836e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	330c      	adds	r3, #12
 800837e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	e853 3f00 	ldrex	r3, [r3]
 8008386:	60fb      	str	r3, [r7, #12]
   return(result);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f023 0310 	bic.w	r3, r3, #16
 800838e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	330c      	adds	r3, #12
 8008398:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800839c:	61fa      	str	r2, [r7, #28]
 800839e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a0:	69b9      	ldr	r1, [r7, #24]
 80083a2:	69fa      	ldr	r2, [r7, #28]
 80083a4:	e841 2300 	strex	r3, r2, [r1]
 80083a8:	617b      	str	r3, [r7, #20]
   return(result);
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d1e3      	bne.n	8008378 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2202      	movs	r2, #2
 80083b4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80083b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80083ba:	4619      	mov	r1, r3
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 f83b 	bl	8008438 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80083c2:	e023      	b.n	800840c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80083c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d009      	beq.n	80083e4 <HAL_UART_IRQHandler+0x4f4>
 80083d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d003      	beq.n	80083e4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 f953 	bl	8008688 <UART_Transmit_IT>
    return;
 80083e2:	e014      	b.n	800840e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80083e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d00e      	beq.n	800840e <HAL_UART_IRQHandler+0x51e>
 80083f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d008      	beq.n	800840e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 f992 	bl	8008726 <UART_EndTransmit_IT>
    return;
 8008402:	e004      	b.n	800840e <HAL_UART_IRQHandler+0x51e>
    return;
 8008404:	bf00      	nop
 8008406:	e002      	b.n	800840e <HAL_UART_IRQHandler+0x51e>
      return;
 8008408:	bf00      	nop
 800840a:	e000      	b.n	800840e <HAL_UART_IRQHandler+0x51e>
      return;
 800840c:	bf00      	nop
  }
}
 800840e:	37e8      	adds	r7, #232	; 0xe8
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008414:	b480      	push	{r7}
 8008416:	b083      	sub	sp, #12
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800841c:	bf00      	nop
 800841e:	370c      	adds	r7, #12
 8008420:	46bd      	mov	sp, r7
 8008422:	bc80      	pop	{r7}
 8008424:	4770      	bx	lr

08008426 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008426:	b480      	push	{r7}
 8008428:	b083      	sub	sp, #12
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800842e:	bf00      	nop
 8008430:	370c      	adds	r7, #12
 8008432:	46bd      	mov	sp, r7
 8008434:	bc80      	pop	{r7}
 8008436:	4770      	bx	lr

08008438 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	460b      	mov	r3, r1
 8008442:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008444:	bf00      	nop
 8008446:	370c      	adds	r7, #12
 8008448:	46bd      	mov	sp, r7
 800844a:	bc80      	pop	{r7}
 800844c:	4770      	bx	lr

0800844e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800844e:	b580      	push	{r7, lr}
 8008450:	b090      	sub	sp, #64	; 0x40
 8008452:	af00      	add	r7, sp, #0
 8008454:	60f8      	str	r0, [r7, #12]
 8008456:	60b9      	str	r1, [r7, #8]
 8008458:	603b      	str	r3, [r7, #0]
 800845a:	4613      	mov	r3, r2
 800845c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800845e:	e050      	b.n	8008502 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008460:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008466:	d04c      	beq.n	8008502 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008468:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800846a:	2b00      	cmp	r3, #0
 800846c:	d007      	beq.n	800847e <UART_WaitOnFlagUntilTimeout+0x30>
 800846e:	f7fb f96f 	bl	8003750 <HAL_GetTick>
 8008472:	4602      	mov	r2, r0
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	1ad3      	subs	r3, r2, r3
 8008478:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800847a:	429a      	cmp	r2, r3
 800847c:	d241      	bcs.n	8008502 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	330c      	adds	r3, #12
 8008484:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008488:	e853 3f00 	ldrex	r3, [r3]
 800848c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800848e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008490:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008494:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	330c      	adds	r3, #12
 800849c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800849e:	637a      	str	r2, [r7, #52]	; 0x34
 80084a0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80084a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084a6:	e841 2300 	strex	r3, r2, [r1]
 80084aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80084ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d1e5      	bne.n	800847e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	3314      	adds	r3, #20
 80084b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	e853 3f00 	ldrex	r3, [r3]
 80084c0:	613b      	str	r3, [r7, #16]
   return(result);
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	f023 0301 	bic.w	r3, r3, #1
 80084c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	3314      	adds	r3, #20
 80084d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084d2:	623a      	str	r2, [r7, #32]
 80084d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d6:	69f9      	ldr	r1, [r7, #28]
 80084d8:	6a3a      	ldr	r2, [r7, #32]
 80084da:	e841 2300 	strex	r3, r2, [r1]
 80084de:	61bb      	str	r3, [r7, #24]
   return(result);
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d1e5      	bne.n	80084b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2220      	movs	r2, #32
 80084ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2220      	movs	r2, #32
 80084f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2200      	movs	r2, #0
 80084fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80084fe:	2303      	movs	r3, #3
 8008500:	e00f      	b.n	8008522 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	4013      	ands	r3, r2
 800850c:	68ba      	ldr	r2, [r7, #8]
 800850e:	429a      	cmp	r2, r3
 8008510:	bf0c      	ite	eq
 8008512:	2301      	moveq	r3, #1
 8008514:	2300      	movne	r3, #0
 8008516:	b2db      	uxtb	r3, r3
 8008518:	461a      	mov	r2, r3
 800851a:	79fb      	ldrb	r3, [r7, #7]
 800851c:	429a      	cmp	r2, r3
 800851e:	d09f      	beq.n	8008460 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008520:	2300      	movs	r3, #0
}
 8008522:	4618      	mov	r0, r3
 8008524:	3740      	adds	r7, #64	; 0x40
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800852a:	b480      	push	{r7}
 800852c:	b085      	sub	sp, #20
 800852e:	af00      	add	r7, sp, #0
 8008530:	60f8      	str	r0, [r7, #12]
 8008532:	60b9      	str	r1, [r7, #8]
 8008534:	4613      	mov	r3, r2
 8008536:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	68ba      	ldr	r2, [r7, #8]
 800853c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	88fa      	ldrh	r2, [r7, #6]
 8008542:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	88fa      	ldrh	r2, [r7, #6]
 8008548:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2200      	movs	r2, #0
 800854e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2222      	movs	r2, #34	; 0x22
 8008554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	691b      	ldr	r3, [r3, #16]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d007      	beq.n	8008570 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	68da      	ldr	r2, [r3, #12]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800856e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	695a      	ldr	r2, [r3, #20]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f042 0201 	orr.w	r2, r2, #1
 800857e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	68da      	ldr	r2, [r3, #12]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f042 0220 	orr.w	r2, r2, #32
 800858e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008590:	2300      	movs	r3, #0
}
 8008592:	4618      	mov	r0, r3
 8008594:	3714      	adds	r7, #20
 8008596:	46bd      	mov	sp, r7
 8008598:	bc80      	pop	{r7}
 800859a:	4770      	bx	lr

0800859c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800859c:	b480      	push	{r7}
 800859e:	b095      	sub	sp, #84	; 0x54
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	330c      	adds	r3, #12
 80085aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ae:	e853 3f00 	ldrex	r3, [r3]
 80085b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80085b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	330c      	adds	r3, #12
 80085c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80085c4:	643a      	str	r2, [r7, #64]	; 0x40
 80085c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80085ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80085cc:	e841 2300 	strex	r3, r2, [r1]
 80085d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d1e5      	bne.n	80085a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	3314      	adds	r3, #20
 80085de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e0:	6a3b      	ldr	r3, [r7, #32]
 80085e2:	e853 3f00 	ldrex	r3, [r3]
 80085e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	f023 0301 	bic.w	r3, r3, #1
 80085ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	3314      	adds	r3, #20
 80085f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80085fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008600:	e841 2300 	strex	r3, r2, [r1]
 8008604:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008608:	2b00      	cmp	r3, #0
 800860a:	d1e5      	bne.n	80085d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008610:	2b01      	cmp	r3, #1
 8008612:	d119      	bne.n	8008648 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	330c      	adds	r3, #12
 800861a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	e853 3f00 	ldrex	r3, [r3]
 8008622:	60bb      	str	r3, [r7, #8]
   return(result);
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	f023 0310 	bic.w	r3, r3, #16
 800862a:	647b      	str	r3, [r7, #68]	; 0x44
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	330c      	adds	r3, #12
 8008632:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008634:	61ba      	str	r2, [r7, #24]
 8008636:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008638:	6979      	ldr	r1, [r7, #20]
 800863a:	69ba      	ldr	r2, [r7, #24]
 800863c:	e841 2300 	strex	r3, r2, [r1]
 8008640:	613b      	str	r3, [r7, #16]
   return(result);
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d1e5      	bne.n	8008614 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2220      	movs	r2, #32
 800864c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2200      	movs	r2, #0
 8008654:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008656:	bf00      	nop
 8008658:	3754      	adds	r7, #84	; 0x54
 800865a:	46bd      	mov	sp, r7
 800865c:	bc80      	pop	{r7}
 800865e:	4770      	bx	lr

08008660 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2200      	movs	r2, #0
 8008672:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2200      	movs	r2, #0
 8008678:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800867a:	68f8      	ldr	r0, [r7, #12]
 800867c:	f7ff fed3 	bl	8008426 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008680:	bf00      	nop
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008688:	b480      	push	{r7}
 800868a:	b085      	sub	sp, #20
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008696:	b2db      	uxtb	r3, r3
 8008698:	2b21      	cmp	r3, #33	; 0x21
 800869a:	d13e      	bne.n	800871a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086a4:	d114      	bne.n	80086d0 <UART_Transmit_IT+0x48>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d110      	bne.n	80086d0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6a1b      	ldr	r3, [r3, #32]
 80086b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	881b      	ldrh	r3, [r3, #0]
 80086b8:	461a      	mov	r2, r3
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80086c2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6a1b      	ldr	r3, [r3, #32]
 80086c8:	1c9a      	adds	r2, r3, #2
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	621a      	str	r2, [r3, #32]
 80086ce:	e008      	b.n	80086e2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6a1b      	ldr	r3, [r3, #32]
 80086d4:	1c59      	adds	r1, r3, #1
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	6211      	str	r1, [r2, #32]
 80086da:	781a      	ldrb	r2, [r3, #0]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	3b01      	subs	r3, #1
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	4619      	mov	r1, r3
 80086f0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d10f      	bne.n	8008716 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	68da      	ldr	r2, [r3, #12]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008704:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	68da      	ldr	r2, [r3, #12]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008714:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008716:	2300      	movs	r3, #0
 8008718:	e000      	b.n	800871c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800871a:	2302      	movs	r3, #2
  }
}
 800871c:	4618      	mov	r0, r3
 800871e:	3714      	adds	r7, #20
 8008720:	46bd      	mov	sp, r7
 8008722:	bc80      	pop	{r7}
 8008724:	4770      	bx	lr

08008726 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008726:	b580      	push	{r7, lr}
 8008728:	b082      	sub	sp, #8
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	68da      	ldr	r2, [r3, #12]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800873c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2220      	movs	r2, #32
 8008742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f7ff fe64 	bl	8008414 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3708      	adds	r7, #8
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008756:	b580      	push	{r7, lr}
 8008758:	b08c      	sub	sp, #48	; 0x30
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008764:	b2db      	uxtb	r3, r3
 8008766:	2b22      	cmp	r3, #34	; 0x22
 8008768:	f040 80ae 	bne.w	80088c8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008774:	d117      	bne.n	80087a6 <UART_Receive_IT+0x50>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d113      	bne.n	80087a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800877e:	2300      	movs	r3, #0
 8008780:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008786:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	b29b      	uxth	r3, r3
 8008790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008794:	b29a      	uxth	r2, r3
 8008796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008798:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800879e:	1c9a      	adds	r2, r3, #2
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	629a      	str	r2, [r3, #40]	; 0x28
 80087a4:	e026      	b.n	80087f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80087ac:	2300      	movs	r3, #0
 80087ae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087b8:	d007      	beq.n	80087ca <UART_Receive_IT+0x74>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d10a      	bne.n	80087d8 <UART_Receive_IT+0x82>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	691b      	ldr	r3, [r3, #16]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d106      	bne.n	80087d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	b2da      	uxtb	r2, r3
 80087d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087d4:	701a      	strb	r2, [r3, #0]
 80087d6:	e008      	b.n	80087ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087e4:	b2da      	uxtb	r2, r3
 80087e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ee:	1c5a      	adds	r2, r3, #1
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	3b01      	subs	r3, #1
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	4619      	mov	r1, r3
 8008802:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008804:	2b00      	cmp	r3, #0
 8008806:	d15d      	bne.n	80088c4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	68da      	ldr	r2, [r3, #12]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f022 0220 	bic.w	r2, r2, #32
 8008816:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	68da      	ldr	r2, [r3, #12]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008826:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	695a      	ldr	r2, [r3, #20]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f022 0201 	bic.w	r2, r2, #1
 8008836:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2220      	movs	r2, #32
 800883c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800884a:	2b01      	cmp	r3, #1
 800884c:	d135      	bne.n	80088ba <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	330c      	adds	r3, #12
 800885a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	e853 3f00 	ldrex	r3, [r3]
 8008862:	613b      	str	r3, [r7, #16]
   return(result);
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	f023 0310 	bic.w	r3, r3, #16
 800886a:	627b      	str	r3, [r7, #36]	; 0x24
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	330c      	adds	r3, #12
 8008872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008874:	623a      	str	r2, [r7, #32]
 8008876:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008878:	69f9      	ldr	r1, [r7, #28]
 800887a:	6a3a      	ldr	r2, [r7, #32]
 800887c:	e841 2300 	strex	r3, r2, [r1]
 8008880:	61bb      	str	r3, [r7, #24]
   return(result);
 8008882:	69bb      	ldr	r3, [r7, #24]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d1e5      	bne.n	8008854 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f003 0310 	and.w	r3, r3, #16
 8008892:	2b10      	cmp	r3, #16
 8008894:	d10a      	bne.n	80088ac <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008896:	2300      	movs	r3, #0
 8008898:	60fb      	str	r3, [r7, #12]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	60fb      	str	r3, [r7, #12]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	60fb      	str	r3, [r7, #12]
 80088aa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80088b0:	4619      	mov	r1, r3
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f7ff fdc0 	bl	8008438 <HAL_UARTEx_RxEventCallback>
 80088b8:	e002      	b.n	80088c0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f7f8 fffc 	bl	80018b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80088c0:	2300      	movs	r3, #0
 80088c2:	e002      	b.n	80088ca <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80088c4:	2300      	movs	r3, #0
 80088c6:	e000      	b.n	80088ca <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80088c8:	2302      	movs	r3, #2
  }
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3730      	adds	r7, #48	; 0x30
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
	...

080088d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	691b      	ldr	r3, [r3, #16]
 80088e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	68da      	ldr	r2, [r3, #12]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	430a      	orrs	r2, r1
 80088f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	689a      	ldr	r2, [r3, #8]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	691b      	ldr	r3, [r3, #16]
 80088fa:	431a      	orrs	r2, r3
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	695b      	ldr	r3, [r3, #20]
 8008900:	4313      	orrs	r3, r2
 8008902:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	68db      	ldr	r3, [r3, #12]
 800890a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800890e:	f023 030c 	bic.w	r3, r3, #12
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	6812      	ldr	r2, [r2, #0]
 8008916:	68b9      	ldr	r1, [r7, #8]
 8008918:	430b      	orrs	r3, r1
 800891a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	695b      	ldr	r3, [r3, #20]
 8008922:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	699a      	ldr	r2, [r3, #24]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	430a      	orrs	r2, r1
 8008930:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a2c      	ldr	r2, [pc, #176]	; (80089e8 <UART_SetConfig+0x114>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d103      	bne.n	8008944 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800893c:	f7fd fe06 	bl	800654c <HAL_RCC_GetPCLK2Freq>
 8008940:	60f8      	str	r0, [r7, #12]
 8008942:	e002      	b.n	800894a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008944:	f7fd fdee 	bl	8006524 <HAL_RCC_GetPCLK1Freq>
 8008948:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800894a:	68fa      	ldr	r2, [r7, #12]
 800894c:	4613      	mov	r3, r2
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	4413      	add	r3, r2
 8008952:	009a      	lsls	r2, r3, #2
 8008954:	441a      	add	r2, r3
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008960:	4a22      	ldr	r2, [pc, #136]	; (80089ec <UART_SetConfig+0x118>)
 8008962:	fba2 2303 	umull	r2, r3, r2, r3
 8008966:	095b      	lsrs	r3, r3, #5
 8008968:	0119      	lsls	r1, r3, #4
 800896a:	68fa      	ldr	r2, [r7, #12]
 800896c:	4613      	mov	r3, r2
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	4413      	add	r3, r2
 8008972:	009a      	lsls	r2, r3, #2
 8008974:	441a      	add	r2, r3
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008980:	4b1a      	ldr	r3, [pc, #104]	; (80089ec <UART_SetConfig+0x118>)
 8008982:	fba3 0302 	umull	r0, r3, r3, r2
 8008986:	095b      	lsrs	r3, r3, #5
 8008988:	2064      	movs	r0, #100	; 0x64
 800898a:	fb00 f303 	mul.w	r3, r0, r3
 800898e:	1ad3      	subs	r3, r2, r3
 8008990:	011b      	lsls	r3, r3, #4
 8008992:	3332      	adds	r3, #50	; 0x32
 8008994:	4a15      	ldr	r2, [pc, #84]	; (80089ec <UART_SetConfig+0x118>)
 8008996:	fba2 2303 	umull	r2, r3, r2, r3
 800899a:	095b      	lsrs	r3, r3, #5
 800899c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80089a0:	4419      	add	r1, r3
 80089a2:	68fa      	ldr	r2, [r7, #12]
 80089a4:	4613      	mov	r3, r2
 80089a6:	009b      	lsls	r3, r3, #2
 80089a8:	4413      	add	r3, r2
 80089aa:	009a      	lsls	r2, r3, #2
 80089ac:	441a      	add	r2, r3
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80089b8:	4b0c      	ldr	r3, [pc, #48]	; (80089ec <UART_SetConfig+0x118>)
 80089ba:	fba3 0302 	umull	r0, r3, r3, r2
 80089be:	095b      	lsrs	r3, r3, #5
 80089c0:	2064      	movs	r0, #100	; 0x64
 80089c2:	fb00 f303 	mul.w	r3, r0, r3
 80089c6:	1ad3      	subs	r3, r2, r3
 80089c8:	011b      	lsls	r3, r3, #4
 80089ca:	3332      	adds	r3, #50	; 0x32
 80089cc:	4a07      	ldr	r2, [pc, #28]	; (80089ec <UART_SetConfig+0x118>)
 80089ce:	fba2 2303 	umull	r2, r3, r2, r3
 80089d2:	095b      	lsrs	r3, r3, #5
 80089d4:	f003 020f 	and.w	r2, r3, #15
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	440a      	add	r2, r1
 80089de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80089e0:	bf00      	nop
 80089e2:	3710      	adds	r7, #16
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	40013800 	.word	0x40013800
 80089ec:	51eb851f 	.word	0x51eb851f

080089f0 <__errno>:
 80089f0:	4b01      	ldr	r3, [pc, #4]	; (80089f8 <__errno+0x8>)
 80089f2:	6818      	ldr	r0, [r3, #0]
 80089f4:	4770      	bx	lr
 80089f6:	bf00      	nop
 80089f8:	20000018 	.word	0x20000018

080089fc <__libc_init_array>:
 80089fc:	b570      	push	{r4, r5, r6, lr}
 80089fe:	2600      	movs	r6, #0
 8008a00:	4d0c      	ldr	r5, [pc, #48]	; (8008a34 <__libc_init_array+0x38>)
 8008a02:	4c0d      	ldr	r4, [pc, #52]	; (8008a38 <__libc_init_array+0x3c>)
 8008a04:	1b64      	subs	r4, r4, r5
 8008a06:	10a4      	asrs	r4, r4, #2
 8008a08:	42a6      	cmp	r6, r4
 8008a0a:	d109      	bne.n	8008a20 <__libc_init_array+0x24>
 8008a0c:	f005 fd62 	bl	800e4d4 <_init>
 8008a10:	2600      	movs	r6, #0
 8008a12:	4d0a      	ldr	r5, [pc, #40]	; (8008a3c <__libc_init_array+0x40>)
 8008a14:	4c0a      	ldr	r4, [pc, #40]	; (8008a40 <__libc_init_array+0x44>)
 8008a16:	1b64      	subs	r4, r4, r5
 8008a18:	10a4      	asrs	r4, r4, #2
 8008a1a:	42a6      	cmp	r6, r4
 8008a1c:	d105      	bne.n	8008a2a <__libc_init_array+0x2e>
 8008a1e:	bd70      	pop	{r4, r5, r6, pc}
 8008a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a24:	4798      	blx	r3
 8008a26:	3601      	adds	r6, #1
 8008a28:	e7ee      	b.n	8008a08 <__libc_init_array+0xc>
 8008a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a2e:	4798      	blx	r3
 8008a30:	3601      	adds	r6, #1
 8008a32:	e7f2      	b.n	8008a1a <__libc_init_array+0x1e>
 8008a34:	0800ea78 	.word	0x0800ea78
 8008a38:	0800ea78 	.word	0x0800ea78
 8008a3c:	0800ea78 	.word	0x0800ea78
 8008a40:	0800ea7c 	.word	0x0800ea7c

08008a44 <memset>:
 8008a44:	4603      	mov	r3, r0
 8008a46:	4402      	add	r2, r0
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d100      	bne.n	8008a4e <memset+0xa>
 8008a4c:	4770      	bx	lr
 8008a4e:	f803 1b01 	strb.w	r1, [r3], #1
 8008a52:	e7f9      	b.n	8008a48 <memset+0x4>

08008a54 <__cvt>:
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a5a:	461f      	mov	r7, r3
 8008a5c:	bfbb      	ittet	lt
 8008a5e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008a62:	461f      	movlt	r7, r3
 8008a64:	2300      	movge	r3, #0
 8008a66:	232d      	movlt	r3, #45	; 0x2d
 8008a68:	b088      	sub	sp, #32
 8008a6a:	4614      	mov	r4, r2
 8008a6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a6e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008a70:	7013      	strb	r3, [r2, #0]
 8008a72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008a74:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008a78:	f023 0820 	bic.w	r8, r3, #32
 8008a7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008a80:	d005      	beq.n	8008a8e <__cvt+0x3a>
 8008a82:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008a86:	d100      	bne.n	8008a8a <__cvt+0x36>
 8008a88:	3501      	adds	r5, #1
 8008a8a:	2302      	movs	r3, #2
 8008a8c:	e000      	b.n	8008a90 <__cvt+0x3c>
 8008a8e:	2303      	movs	r3, #3
 8008a90:	aa07      	add	r2, sp, #28
 8008a92:	9204      	str	r2, [sp, #16]
 8008a94:	aa06      	add	r2, sp, #24
 8008a96:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008a9a:	e9cd 3500 	strd	r3, r5, [sp]
 8008a9e:	4622      	mov	r2, r4
 8008aa0:	463b      	mov	r3, r7
 8008aa2:	f001 fdb9 	bl	800a618 <_dtoa_r>
 8008aa6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008aaa:	4606      	mov	r6, r0
 8008aac:	d102      	bne.n	8008ab4 <__cvt+0x60>
 8008aae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ab0:	07db      	lsls	r3, r3, #31
 8008ab2:	d522      	bpl.n	8008afa <__cvt+0xa6>
 8008ab4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008ab8:	eb06 0905 	add.w	r9, r6, r5
 8008abc:	d110      	bne.n	8008ae0 <__cvt+0x8c>
 8008abe:	7833      	ldrb	r3, [r6, #0]
 8008ac0:	2b30      	cmp	r3, #48	; 0x30
 8008ac2:	d10a      	bne.n	8008ada <__cvt+0x86>
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	4620      	mov	r0, r4
 8008aca:	4639      	mov	r1, r7
 8008acc:	f7f7 ff6c 	bl	80009a8 <__aeabi_dcmpeq>
 8008ad0:	b918      	cbnz	r0, 8008ada <__cvt+0x86>
 8008ad2:	f1c5 0501 	rsb	r5, r5, #1
 8008ad6:	f8ca 5000 	str.w	r5, [sl]
 8008ada:	f8da 3000 	ldr.w	r3, [sl]
 8008ade:	4499      	add	r9, r3
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	4639      	mov	r1, r7
 8008ae8:	f7f7 ff5e 	bl	80009a8 <__aeabi_dcmpeq>
 8008aec:	b108      	cbz	r0, 8008af2 <__cvt+0x9e>
 8008aee:	f8cd 901c 	str.w	r9, [sp, #28]
 8008af2:	2230      	movs	r2, #48	; 0x30
 8008af4:	9b07      	ldr	r3, [sp, #28]
 8008af6:	454b      	cmp	r3, r9
 8008af8:	d307      	bcc.n	8008b0a <__cvt+0xb6>
 8008afa:	4630      	mov	r0, r6
 8008afc:	9b07      	ldr	r3, [sp, #28]
 8008afe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008b00:	1b9b      	subs	r3, r3, r6
 8008b02:	6013      	str	r3, [r2, #0]
 8008b04:	b008      	add	sp, #32
 8008b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b0a:	1c59      	adds	r1, r3, #1
 8008b0c:	9107      	str	r1, [sp, #28]
 8008b0e:	701a      	strb	r2, [r3, #0]
 8008b10:	e7f0      	b.n	8008af4 <__cvt+0xa0>

08008b12 <__exponent>:
 8008b12:	4603      	mov	r3, r0
 8008b14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b16:	2900      	cmp	r1, #0
 8008b18:	f803 2b02 	strb.w	r2, [r3], #2
 8008b1c:	bfb6      	itet	lt
 8008b1e:	222d      	movlt	r2, #45	; 0x2d
 8008b20:	222b      	movge	r2, #43	; 0x2b
 8008b22:	4249      	neglt	r1, r1
 8008b24:	2909      	cmp	r1, #9
 8008b26:	7042      	strb	r2, [r0, #1]
 8008b28:	dd2b      	ble.n	8008b82 <__exponent+0x70>
 8008b2a:	f10d 0407 	add.w	r4, sp, #7
 8008b2e:	46a4      	mov	ip, r4
 8008b30:	270a      	movs	r7, #10
 8008b32:	fb91 f6f7 	sdiv	r6, r1, r7
 8008b36:	460a      	mov	r2, r1
 8008b38:	46a6      	mov	lr, r4
 8008b3a:	fb07 1516 	mls	r5, r7, r6, r1
 8008b3e:	2a63      	cmp	r2, #99	; 0x63
 8008b40:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8008b44:	4631      	mov	r1, r6
 8008b46:	f104 34ff 	add.w	r4, r4, #4294967295
 8008b4a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008b4e:	dcf0      	bgt.n	8008b32 <__exponent+0x20>
 8008b50:	3130      	adds	r1, #48	; 0x30
 8008b52:	f1ae 0502 	sub.w	r5, lr, #2
 8008b56:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008b5a:	4629      	mov	r1, r5
 8008b5c:	1c44      	adds	r4, r0, #1
 8008b5e:	4561      	cmp	r1, ip
 8008b60:	d30a      	bcc.n	8008b78 <__exponent+0x66>
 8008b62:	f10d 0209 	add.w	r2, sp, #9
 8008b66:	eba2 020e 	sub.w	r2, r2, lr
 8008b6a:	4565      	cmp	r5, ip
 8008b6c:	bf88      	it	hi
 8008b6e:	2200      	movhi	r2, #0
 8008b70:	4413      	add	r3, r2
 8008b72:	1a18      	subs	r0, r3, r0
 8008b74:	b003      	add	sp, #12
 8008b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b78:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b7c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008b80:	e7ed      	b.n	8008b5e <__exponent+0x4c>
 8008b82:	2330      	movs	r3, #48	; 0x30
 8008b84:	3130      	adds	r1, #48	; 0x30
 8008b86:	7083      	strb	r3, [r0, #2]
 8008b88:	70c1      	strb	r1, [r0, #3]
 8008b8a:	1d03      	adds	r3, r0, #4
 8008b8c:	e7f1      	b.n	8008b72 <__exponent+0x60>
	...

08008b90 <_printf_float>:
 8008b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b94:	b091      	sub	sp, #68	; 0x44
 8008b96:	460c      	mov	r4, r1
 8008b98:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008b9c:	4616      	mov	r6, r2
 8008b9e:	461f      	mov	r7, r3
 8008ba0:	4605      	mov	r5, r0
 8008ba2:	f002 fe8d 	bl	800b8c0 <_localeconv_r>
 8008ba6:	6803      	ldr	r3, [r0, #0]
 8008ba8:	4618      	mov	r0, r3
 8008baa:	9309      	str	r3, [sp, #36]	; 0x24
 8008bac:	f7f7 fad0 	bl	8000150 <strlen>
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	930e      	str	r3, [sp, #56]	; 0x38
 8008bb4:	f8d8 3000 	ldr.w	r3, [r8]
 8008bb8:	900a      	str	r0, [sp, #40]	; 0x28
 8008bba:	3307      	adds	r3, #7
 8008bbc:	f023 0307 	bic.w	r3, r3, #7
 8008bc0:	f103 0208 	add.w	r2, r3, #8
 8008bc4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008bc8:	f8d4 b000 	ldr.w	fp, [r4]
 8008bcc:	f8c8 2000 	str.w	r2, [r8]
 8008bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008bd8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008bdc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008be0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008be2:	f04f 32ff 	mov.w	r2, #4294967295
 8008be6:	4640      	mov	r0, r8
 8008be8:	4b9c      	ldr	r3, [pc, #624]	; (8008e5c <_printf_float+0x2cc>)
 8008bea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008bec:	f7f7 ff0e 	bl	8000a0c <__aeabi_dcmpun>
 8008bf0:	bb70      	cbnz	r0, 8008c50 <_printf_float+0xc0>
 8008bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8008bf6:	4640      	mov	r0, r8
 8008bf8:	4b98      	ldr	r3, [pc, #608]	; (8008e5c <_printf_float+0x2cc>)
 8008bfa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008bfc:	f7f7 fee8 	bl	80009d0 <__aeabi_dcmple>
 8008c00:	bb30      	cbnz	r0, 8008c50 <_printf_float+0xc0>
 8008c02:	2200      	movs	r2, #0
 8008c04:	2300      	movs	r3, #0
 8008c06:	4640      	mov	r0, r8
 8008c08:	4651      	mov	r1, sl
 8008c0a:	f7f7 fed7 	bl	80009bc <__aeabi_dcmplt>
 8008c0e:	b110      	cbz	r0, 8008c16 <_printf_float+0x86>
 8008c10:	232d      	movs	r3, #45	; 0x2d
 8008c12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c16:	4b92      	ldr	r3, [pc, #584]	; (8008e60 <_printf_float+0x2d0>)
 8008c18:	4892      	ldr	r0, [pc, #584]	; (8008e64 <_printf_float+0x2d4>)
 8008c1a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008c1e:	bf94      	ite	ls
 8008c20:	4698      	movls	r8, r3
 8008c22:	4680      	movhi	r8, r0
 8008c24:	2303      	movs	r3, #3
 8008c26:	f04f 0a00 	mov.w	sl, #0
 8008c2a:	6123      	str	r3, [r4, #16]
 8008c2c:	f02b 0304 	bic.w	r3, fp, #4
 8008c30:	6023      	str	r3, [r4, #0]
 8008c32:	4633      	mov	r3, r6
 8008c34:	4621      	mov	r1, r4
 8008c36:	4628      	mov	r0, r5
 8008c38:	9700      	str	r7, [sp, #0]
 8008c3a:	aa0f      	add	r2, sp, #60	; 0x3c
 8008c3c:	f000 f9d4 	bl	8008fe8 <_printf_common>
 8008c40:	3001      	adds	r0, #1
 8008c42:	f040 8090 	bne.w	8008d66 <_printf_float+0x1d6>
 8008c46:	f04f 30ff 	mov.w	r0, #4294967295
 8008c4a:	b011      	add	sp, #68	; 0x44
 8008c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c50:	4642      	mov	r2, r8
 8008c52:	4653      	mov	r3, sl
 8008c54:	4640      	mov	r0, r8
 8008c56:	4651      	mov	r1, sl
 8008c58:	f7f7 fed8 	bl	8000a0c <__aeabi_dcmpun>
 8008c5c:	b148      	cbz	r0, 8008c72 <_printf_float+0xe2>
 8008c5e:	f1ba 0f00 	cmp.w	sl, #0
 8008c62:	bfb8      	it	lt
 8008c64:	232d      	movlt	r3, #45	; 0x2d
 8008c66:	4880      	ldr	r0, [pc, #512]	; (8008e68 <_printf_float+0x2d8>)
 8008c68:	bfb8      	it	lt
 8008c6a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008c6e:	4b7f      	ldr	r3, [pc, #508]	; (8008e6c <_printf_float+0x2dc>)
 8008c70:	e7d3      	b.n	8008c1a <_printf_float+0x8a>
 8008c72:	6863      	ldr	r3, [r4, #4]
 8008c74:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008c78:	1c5a      	adds	r2, r3, #1
 8008c7a:	d142      	bne.n	8008d02 <_printf_float+0x172>
 8008c7c:	2306      	movs	r3, #6
 8008c7e:	6063      	str	r3, [r4, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	9206      	str	r2, [sp, #24]
 8008c84:	aa0e      	add	r2, sp, #56	; 0x38
 8008c86:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008c8a:	aa0d      	add	r2, sp, #52	; 0x34
 8008c8c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008c90:	9203      	str	r2, [sp, #12]
 8008c92:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008c96:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008c9a:	6023      	str	r3, [r4, #0]
 8008c9c:	6863      	ldr	r3, [r4, #4]
 8008c9e:	4642      	mov	r2, r8
 8008ca0:	9300      	str	r3, [sp, #0]
 8008ca2:	4628      	mov	r0, r5
 8008ca4:	4653      	mov	r3, sl
 8008ca6:	910b      	str	r1, [sp, #44]	; 0x2c
 8008ca8:	f7ff fed4 	bl	8008a54 <__cvt>
 8008cac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008cae:	4680      	mov	r8, r0
 8008cb0:	2947      	cmp	r1, #71	; 0x47
 8008cb2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008cb4:	d108      	bne.n	8008cc8 <_printf_float+0x138>
 8008cb6:	1cc8      	adds	r0, r1, #3
 8008cb8:	db02      	blt.n	8008cc0 <_printf_float+0x130>
 8008cba:	6863      	ldr	r3, [r4, #4]
 8008cbc:	4299      	cmp	r1, r3
 8008cbe:	dd40      	ble.n	8008d42 <_printf_float+0x1b2>
 8008cc0:	f1a9 0902 	sub.w	r9, r9, #2
 8008cc4:	fa5f f989 	uxtb.w	r9, r9
 8008cc8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008ccc:	d81f      	bhi.n	8008d0e <_printf_float+0x17e>
 8008cce:	464a      	mov	r2, r9
 8008cd0:	3901      	subs	r1, #1
 8008cd2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008cd6:	910d      	str	r1, [sp, #52]	; 0x34
 8008cd8:	f7ff ff1b 	bl	8008b12 <__exponent>
 8008cdc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008cde:	4682      	mov	sl, r0
 8008ce0:	1813      	adds	r3, r2, r0
 8008ce2:	2a01      	cmp	r2, #1
 8008ce4:	6123      	str	r3, [r4, #16]
 8008ce6:	dc02      	bgt.n	8008cee <_printf_float+0x15e>
 8008ce8:	6822      	ldr	r2, [r4, #0]
 8008cea:	07d2      	lsls	r2, r2, #31
 8008cec:	d501      	bpl.n	8008cf2 <_printf_float+0x162>
 8008cee:	3301      	adds	r3, #1
 8008cf0:	6123      	str	r3, [r4, #16]
 8008cf2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d09b      	beq.n	8008c32 <_printf_float+0xa2>
 8008cfa:	232d      	movs	r3, #45	; 0x2d
 8008cfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d00:	e797      	b.n	8008c32 <_printf_float+0xa2>
 8008d02:	2947      	cmp	r1, #71	; 0x47
 8008d04:	d1bc      	bne.n	8008c80 <_printf_float+0xf0>
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d1ba      	bne.n	8008c80 <_printf_float+0xf0>
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	e7b7      	b.n	8008c7e <_printf_float+0xee>
 8008d0e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008d12:	d118      	bne.n	8008d46 <_printf_float+0x1b6>
 8008d14:	2900      	cmp	r1, #0
 8008d16:	6863      	ldr	r3, [r4, #4]
 8008d18:	dd0b      	ble.n	8008d32 <_printf_float+0x1a2>
 8008d1a:	6121      	str	r1, [r4, #16]
 8008d1c:	b913      	cbnz	r3, 8008d24 <_printf_float+0x194>
 8008d1e:	6822      	ldr	r2, [r4, #0]
 8008d20:	07d0      	lsls	r0, r2, #31
 8008d22:	d502      	bpl.n	8008d2a <_printf_float+0x19a>
 8008d24:	3301      	adds	r3, #1
 8008d26:	440b      	add	r3, r1
 8008d28:	6123      	str	r3, [r4, #16]
 8008d2a:	f04f 0a00 	mov.w	sl, #0
 8008d2e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008d30:	e7df      	b.n	8008cf2 <_printf_float+0x162>
 8008d32:	b913      	cbnz	r3, 8008d3a <_printf_float+0x1aa>
 8008d34:	6822      	ldr	r2, [r4, #0]
 8008d36:	07d2      	lsls	r2, r2, #31
 8008d38:	d501      	bpl.n	8008d3e <_printf_float+0x1ae>
 8008d3a:	3302      	adds	r3, #2
 8008d3c:	e7f4      	b.n	8008d28 <_printf_float+0x198>
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e7f2      	b.n	8008d28 <_printf_float+0x198>
 8008d42:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008d46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d48:	4299      	cmp	r1, r3
 8008d4a:	db05      	blt.n	8008d58 <_printf_float+0x1c8>
 8008d4c:	6823      	ldr	r3, [r4, #0]
 8008d4e:	6121      	str	r1, [r4, #16]
 8008d50:	07d8      	lsls	r0, r3, #31
 8008d52:	d5ea      	bpl.n	8008d2a <_printf_float+0x19a>
 8008d54:	1c4b      	adds	r3, r1, #1
 8008d56:	e7e7      	b.n	8008d28 <_printf_float+0x198>
 8008d58:	2900      	cmp	r1, #0
 8008d5a:	bfcc      	ite	gt
 8008d5c:	2201      	movgt	r2, #1
 8008d5e:	f1c1 0202 	rsble	r2, r1, #2
 8008d62:	4413      	add	r3, r2
 8008d64:	e7e0      	b.n	8008d28 <_printf_float+0x198>
 8008d66:	6823      	ldr	r3, [r4, #0]
 8008d68:	055a      	lsls	r2, r3, #21
 8008d6a:	d407      	bmi.n	8008d7c <_printf_float+0x1ec>
 8008d6c:	6923      	ldr	r3, [r4, #16]
 8008d6e:	4642      	mov	r2, r8
 8008d70:	4631      	mov	r1, r6
 8008d72:	4628      	mov	r0, r5
 8008d74:	47b8      	blx	r7
 8008d76:	3001      	adds	r0, #1
 8008d78:	d12b      	bne.n	8008dd2 <_printf_float+0x242>
 8008d7a:	e764      	b.n	8008c46 <_printf_float+0xb6>
 8008d7c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008d80:	f240 80dd 	bls.w	8008f3e <_printf_float+0x3ae>
 8008d84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d88:	2200      	movs	r2, #0
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	f7f7 fe0c 	bl	80009a8 <__aeabi_dcmpeq>
 8008d90:	2800      	cmp	r0, #0
 8008d92:	d033      	beq.n	8008dfc <_printf_float+0x26c>
 8008d94:	2301      	movs	r3, #1
 8008d96:	4631      	mov	r1, r6
 8008d98:	4628      	mov	r0, r5
 8008d9a:	4a35      	ldr	r2, [pc, #212]	; (8008e70 <_printf_float+0x2e0>)
 8008d9c:	47b8      	blx	r7
 8008d9e:	3001      	adds	r0, #1
 8008da0:	f43f af51 	beq.w	8008c46 <_printf_float+0xb6>
 8008da4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008da8:	429a      	cmp	r2, r3
 8008daa:	db02      	blt.n	8008db2 <_printf_float+0x222>
 8008dac:	6823      	ldr	r3, [r4, #0]
 8008dae:	07d8      	lsls	r0, r3, #31
 8008db0:	d50f      	bpl.n	8008dd2 <_printf_float+0x242>
 8008db2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008db6:	4631      	mov	r1, r6
 8008db8:	4628      	mov	r0, r5
 8008dba:	47b8      	blx	r7
 8008dbc:	3001      	adds	r0, #1
 8008dbe:	f43f af42 	beq.w	8008c46 <_printf_float+0xb6>
 8008dc2:	f04f 0800 	mov.w	r8, #0
 8008dc6:	f104 091a 	add.w	r9, r4, #26
 8008dca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008dcc:	3b01      	subs	r3, #1
 8008dce:	4543      	cmp	r3, r8
 8008dd0:	dc09      	bgt.n	8008de6 <_printf_float+0x256>
 8008dd2:	6823      	ldr	r3, [r4, #0]
 8008dd4:	079b      	lsls	r3, r3, #30
 8008dd6:	f100 8102 	bmi.w	8008fde <_printf_float+0x44e>
 8008dda:	68e0      	ldr	r0, [r4, #12]
 8008ddc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008dde:	4298      	cmp	r0, r3
 8008de0:	bfb8      	it	lt
 8008de2:	4618      	movlt	r0, r3
 8008de4:	e731      	b.n	8008c4a <_printf_float+0xba>
 8008de6:	2301      	movs	r3, #1
 8008de8:	464a      	mov	r2, r9
 8008dea:	4631      	mov	r1, r6
 8008dec:	4628      	mov	r0, r5
 8008dee:	47b8      	blx	r7
 8008df0:	3001      	adds	r0, #1
 8008df2:	f43f af28 	beq.w	8008c46 <_printf_float+0xb6>
 8008df6:	f108 0801 	add.w	r8, r8, #1
 8008dfa:	e7e6      	b.n	8008dca <_printf_float+0x23a>
 8008dfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	dc38      	bgt.n	8008e74 <_printf_float+0x2e4>
 8008e02:	2301      	movs	r3, #1
 8008e04:	4631      	mov	r1, r6
 8008e06:	4628      	mov	r0, r5
 8008e08:	4a19      	ldr	r2, [pc, #100]	; (8008e70 <_printf_float+0x2e0>)
 8008e0a:	47b8      	blx	r7
 8008e0c:	3001      	adds	r0, #1
 8008e0e:	f43f af1a 	beq.w	8008c46 <_printf_float+0xb6>
 8008e12:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008e16:	4313      	orrs	r3, r2
 8008e18:	d102      	bne.n	8008e20 <_printf_float+0x290>
 8008e1a:	6823      	ldr	r3, [r4, #0]
 8008e1c:	07d9      	lsls	r1, r3, #31
 8008e1e:	d5d8      	bpl.n	8008dd2 <_printf_float+0x242>
 8008e20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e24:	4631      	mov	r1, r6
 8008e26:	4628      	mov	r0, r5
 8008e28:	47b8      	blx	r7
 8008e2a:	3001      	adds	r0, #1
 8008e2c:	f43f af0b 	beq.w	8008c46 <_printf_float+0xb6>
 8008e30:	f04f 0900 	mov.w	r9, #0
 8008e34:	f104 0a1a 	add.w	sl, r4, #26
 8008e38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e3a:	425b      	negs	r3, r3
 8008e3c:	454b      	cmp	r3, r9
 8008e3e:	dc01      	bgt.n	8008e44 <_printf_float+0x2b4>
 8008e40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e42:	e794      	b.n	8008d6e <_printf_float+0x1de>
 8008e44:	2301      	movs	r3, #1
 8008e46:	4652      	mov	r2, sl
 8008e48:	4631      	mov	r1, r6
 8008e4a:	4628      	mov	r0, r5
 8008e4c:	47b8      	blx	r7
 8008e4e:	3001      	adds	r0, #1
 8008e50:	f43f aef9 	beq.w	8008c46 <_printf_float+0xb6>
 8008e54:	f109 0901 	add.w	r9, r9, #1
 8008e58:	e7ee      	b.n	8008e38 <_printf_float+0x2a8>
 8008e5a:	bf00      	nop
 8008e5c:	7fefffff 	.word	0x7fefffff
 8008e60:	0800e560 	.word	0x0800e560
 8008e64:	0800e564 	.word	0x0800e564
 8008e68:	0800e56c 	.word	0x0800e56c
 8008e6c:	0800e568 	.word	0x0800e568
 8008e70:	0800e570 	.word	0x0800e570
 8008e74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	bfa8      	it	ge
 8008e7c:	461a      	movge	r2, r3
 8008e7e:	2a00      	cmp	r2, #0
 8008e80:	4691      	mov	r9, r2
 8008e82:	dc37      	bgt.n	8008ef4 <_printf_float+0x364>
 8008e84:	f04f 0b00 	mov.w	fp, #0
 8008e88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e8c:	f104 021a 	add.w	r2, r4, #26
 8008e90:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008e94:	ebaa 0309 	sub.w	r3, sl, r9
 8008e98:	455b      	cmp	r3, fp
 8008e9a:	dc33      	bgt.n	8008f04 <_printf_float+0x374>
 8008e9c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	db3b      	blt.n	8008f1c <_printf_float+0x38c>
 8008ea4:	6823      	ldr	r3, [r4, #0]
 8008ea6:	07da      	lsls	r2, r3, #31
 8008ea8:	d438      	bmi.n	8008f1c <_printf_float+0x38c>
 8008eaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008eac:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008eae:	eba3 020a 	sub.w	r2, r3, sl
 8008eb2:	eba3 0901 	sub.w	r9, r3, r1
 8008eb6:	4591      	cmp	r9, r2
 8008eb8:	bfa8      	it	ge
 8008eba:	4691      	movge	r9, r2
 8008ebc:	f1b9 0f00 	cmp.w	r9, #0
 8008ec0:	dc34      	bgt.n	8008f2c <_printf_float+0x39c>
 8008ec2:	f04f 0800 	mov.w	r8, #0
 8008ec6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008eca:	f104 0a1a 	add.w	sl, r4, #26
 8008ece:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008ed2:	1a9b      	subs	r3, r3, r2
 8008ed4:	eba3 0309 	sub.w	r3, r3, r9
 8008ed8:	4543      	cmp	r3, r8
 8008eda:	f77f af7a 	ble.w	8008dd2 <_printf_float+0x242>
 8008ede:	2301      	movs	r3, #1
 8008ee0:	4652      	mov	r2, sl
 8008ee2:	4631      	mov	r1, r6
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	47b8      	blx	r7
 8008ee8:	3001      	adds	r0, #1
 8008eea:	f43f aeac 	beq.w	8008c46 <_printf_float+0xb6>
 8008eee:	f108 0801 	add.w	r8, r8, #1
 8008ef2:	e7ec      	b.n	8008ece <_printf_float+0x33e>
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	4631      	mov	r1, r6
 8008ef8:	4642      	mov	r2, r8
 8008efa:	4628      	mov	r0, r5
 8008efc:	47b8      	blx	r7
 8008efe:	3001      	adds	r0, #1
 8008f00:	d1c0      	bne.n	8008e84 <_printf_float+0x2f4>
 8008f02:	e6a0      	b.n	8008c46 <_printf_float+0xb6>
 8008f04:	2301      	movs	r3, #1
 8008f06:	4631      	mov	r1, r6
 8008f08:	4628      	mov	r0, r5
 8008f0a:	920b      	str	r2, [sp, #44]	; 0x2c
 8008f0c:	47b8      	blx	r7
 8008f0e:	3001      	adds	r0, #1
 8008f10:	f43f ae99 	beq.w	8008c46 <_printf_float+0xb6>
 8008f14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f16:	f10b 0b01 	add.w	fp, fp, #1
 8008f1a:	e7b9      	b.n	8008e90 <_printf_float+0x300>
 8008f1c:	4631      	mov	r1, r6
 8008f1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f22:	4628      	mov	r0, r5
 8008f24:	47b8      	blx	r7
 8008f26:	3001      	adds	r0, #1
 8008f28:	d1bf      	bne.n	8008eaa <_printf_float+0x31a>
 8008f2a:	e68c      	b.n	8008c46 <_printf_float+0xb6>
 8008f2c:	464b      	mov	r3, r9
 8008f2e:	4631      	mov	r1, r6
 8008f30:	4628      	mov	r0, r5
 8008f32:	eb08 020a 	add.w	r2, r8, sl
 8008f36:	47b8      	blx	r7
 8008f38:	3001      	adds	r0, #1
 8008f3a:	d1c2      	bne.n	8008ec2 <_printf_float+0x332>
 8008f3c:	e683      	b.n	8008c46 <_printf_float+0xb6>
 8008f3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f40:	2a01      	cmp	r2, #1
 8008f42:	dc01      	bgt.n	8008f48 <_printf_float+0x3b8>
 8008f44:	07db      	lsls	r3, r3, #31
 8008f46:	d537      	bpl.n	8008fb8 <_printf_float+0x428>
 8008f48:	2301      	movs	r3, #1
 8008f4a:	4642      	mov	r2, r8
 8008f4c:	4631      	mov	r1, r6
 8008f4e:	4628      	mov	r0, r5
 8008f50:	47b8      	blx	r7
 8008f52:	3001      	adds	r0, #1
 8008f54:	f43f ae77 	beq.w	8008c46 <_printf_float+0xb6>
 8008f58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f5c:	4631      	mov	r1, r6
 8008f5e:	4628      	mov	r0, r5
 8008f60:	47b8      	blx	r7
 8008f62:	3001      	adds	r0, #1
 8008f64:	f43f ae6f 	beq.w	8008c46 <_printf_float+0xb6>
 8008f68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	2300      	movs	r3, #0
 8008f70:	f7f7 fd1a 	bl	80009a8 <__aeabi_dcmpeq>
 8008f74:	b9d8      	cbnz	r0, 8008fae <_printf_float+0x41e>
 8008f76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f78:	f108 0201 	add.w	r2, r8, #1
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	4631      	mov	r1, r6
 8008f80:	4628      	mov	r0, r5
 8008f82:	47b8      	blx	r7
 8008f84:	3001      	adds	r0, #1
 8008f86:	d10e      	bne.n	8008fa6 <_printf_float+0x416>
 8008f88:	e65d      	b.n	8008c46 <_printf_float+0xb6>
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	464a      	mov	r2, r9
 8008f8e:	4631      	mov	r1, r6
 8008f90:	4628      	mov	r0, r5
 8008f92:	47b8      	blx	r7
 8008f94:	3001      	adds	r0, #1
 8008f96:	f43f ae56 	beq.w	8008c46 <_printf_float+0xb6>
 8008f9a:	f108 0801 	add.w	r8, r8, #1
 8008f9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fa0:	3b01      	subs	r3, #1
 8008fa2:	4543      	cmp	r3, r8
 8008fa4:	dcf1      	bgt.n	8008f8a <_printf_float+0x3fa>
 8008fa6:	4653      	mov	r3, sl
 8008fa8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008fac:	e6e0      	b.n	8008d70 <_printf_float+0x1e0>
 8008fae:	f04f 0800 	mov.w	r8, #0
 8008fb2:	f104 091a 	add.w	r9, r4, #26
 8008fb6:	e7f2      	b.n	8008f9e <_printf_float+0x40e>
 8008fb8:	2301      	movs	r3, #1
 8008fba:	4642      	mov	r2, r8
 8008fbc:	e7df      	b.n	8008f7e <_printf_float+0x3ee>
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	464a      	mov	r2, r9
 8008fc2:	4631      	mov	r1, r6
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	47b8      	blx	r7
 8008fc8:	3001      	adds	r0, #1
 8008fca:	f43f ae3c 	beq.w	8008c46 <_printf_float+0xb6>
 8008fce:	f108 0801 	add.w	r8, r8, #1
 8008fd2:	68e3      	ldr	r3, [r4, #12]
 8008fd4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008fd6:	1a5b      	subs	r3, r3, r1
 8008fd8:	4543      	cmp	r3, r8
 8008fda:	dcf0      	bgt.n	8008fbe <_printf_float+0x42e>
 8008fdc:	e6fd      	b.n	8008dda <_printf_float+0x24a>
 8008fde:	f04f 0800 	mov.w	r8, #0
 8008fe2:	f104 0919 	add.w	r9, r4, #25
 8008fe6:	e7f4      	b.n	8008fd2 <_printf_float+0x442>

08008fe8 <_printf_common>:
 8008fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fec:	4616      	mov	r6, r2
 8008fee:	4699      	mov	r9, r3
 8008ff0:	688a      	ldr	r2, [r1, #8]
 8008ff2:	690b      	ldr	r3, [r1, #16]
 8008ff4:	4607      	mov	r7, r0
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	bfb8      	it	lt
 8008ffa:	4613      	movlt	r3, r2
 8008ffc:	6033      	str	r3, [r6, #0]
 8008ffe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009002:	460c      	mov	r4, r1
 8009004:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009008:	b10a      	cbz	r2, 800900e <_printf_common+0x26>
 800900a:	3301      	adds	r3, #1
 800900c:	6033      	str	r3, [r6, #0]
 800900e:	6823      	ldr	r3, [r4, #0]
 8009010:	0699      	lsls	r1, r3, #26
 8009012:	bf42      	ittt	mi
 8009014:	6833      	ldrmi	r3, [r6, #0]
 8009016:	3302      	addmi	r3, #2
 8009018:	6033      	strmi	r3, [r6, #0]
 800901a:	6825      	ldr	r5, [r4, #0]
 800901c:	f015 0506 	ands.w	r5, r5, #6
 8009020:	d106      	bne.n	8009030 <_printf_common+0x48>
 8009022:	f104 0a19 	add.w	sl, r4, #25
 8009026:	68e3      	ldr	r3, [r4, #12]
 8009028:	6832      	ldr	r2, [r6, #0]
 800902a:	1a9b      	subs	r3, r3, r2
 800902c:	42ab      	cmp	r3, r5
 800902e:	dc28      	bgt.n	8009082 <_printf_common+0x9a>
 8009030:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009034:	1e13      	subs	r3, r2, #0
 8009036:	6822      	ldr	r2, [r4, #0]
 8009038:	bf18      	it	ne
 800903a:	2301      	movne	r3, #1
 800903c:	0692      	lsls	r2, r2, #26
 800903e:	d42d      	bmi.n	800909c <_printf_common+0xb4>
 8009040:	4649      	mov	r1, r9
 8009042:	4638      	mov	r0, r7
 8009044:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009048:	47c0      	blx	r8
 800904a:	3001      	adds	r0, #1
 800904c:	d020      	beq.n	8009090 <_printf_common+0xa8>
 800904e:	6823      	ldr	r3, [r4, #0]
 8009050:	68e5      	ldr	r5, [r4, #12]
 8009052:	f003 0306 	and.w	r3, r3, #6
 8009056:	2b04      	cmp	r3, #4
 8009058:	bf18      	it	ne
 800905a:	2500      	movne	r5, #0
 800905c:	6832      	ldr	r2, [r6, #0]
 800905e:	f04f 0600 	mov.w	r6, #0
 8009062:	68a3      	ldr	r3, [r4, #8]
 8009064:	bf08      	it	eq
 8009066:	1aad      	subeq	r5, r5, r2
 8009068:	6922      	ldr	r2, [r4, #16]
 800906a:	bf08      	it	eq
 800906c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009070:	4293      	cmp	r3, r2
 8009072:	bfc4      	itt	gt
 8009074:	1a9b      	subgt	r3, r3, r2
 8009076:	18ed      	addgt	r5, r5, r3
 8009078:	341a      	adds	r4, #26
 800907a:	42b5      	cmp	r5, r6
 800907c:	d11a      	bne.n	80090b4 <_printf_common+0xcc>
 800907e:	2000      	movs	r0, #0
 8009080:	e008      	b.n	8009094 <_printf_common+0xac>
 8009082:	2301      	movs	r3, #1
 8009084:	4652      	mov	r2, sl
 8009086:	4649      	mov	r1, r9
 8009088:	4638      	mov	r0, r7
 800908a:	47c0      	blx	r8
 800908c:	3001      	adds	r0, #1
 800908e:	d103      	bne.n	8009098 <_printf_common+0xb0>
 8009090:	f04f 30ff 	mov.w	r0, #4294967295
 8009094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009098:	3501      	adds	r5, #1
 800909a:	e7c4      	b.n	8009026 <_printf_common+0x3e>
 800909c:	2030      	movs	r0, #48	; 0x30
 800909e:	18e1      	adds	r1, r4, r3
 80090a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80090a4:	1c5a      	adds	r2, r3, #1
 80090a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80090aa:	4422      	add	r2, r4
 80090ac:	3302      	adds	r3, #2
 80090ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80090b2:	e7c5      	b.n	8009040 <_printf_common+0x58>
 80090b4:	2301      	movs	r3, #1
 80090b6:	4622      	mov	r2, r4
 80090b8:	4649      	mov	r1, r9
 80090ba:	4638      	mov	r0, r7
 80090bc:	47c0      	blx	r8
 80090be:	3001      	adds	r0, #1
 80090c0:	d0e6      	beq.n	8009090 <_printf_common+0xa8>
 80090c2:	3601      	adds	r6, #1
 80090c4:	e7d9      	b.n	800907a <_printf_common+0x92>
	...

080090c8 <_printf_i>:
 80090c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090cc:	7e0f      	ldrb	r7, [r1, #24]
 80090ce:	4691      	mov	r9, r2
 80090d0:	2f78      	cmp	r7, #120	; 0x78
 80090d2:	4680      	mov	r8, r0
 80090d4:	460c      	mov	r4, r1
 80090d6:	469a      	mov	sl, r3
 80090d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80090da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80090de:	d807      	bhi.n	80090f0 <_printf_i+0x28>
 80090e0:	2f62      	cmp	r7, #98	; 0x62
 80090e2:	d80a      	bhi.n	80090fa <_printf_i+0x32>
 80090e4:	2f00      	cmp	r7, #0
 80090e6:	f000 80d9 	beq.w	800929c <_printf_i+0x1d4>
 80090ea:	2f58      	cmp	r7, #88	; 0x58
 80090ec:	f000 80a4 	beq.w	8009238 <_printf_i+0x170>
 80090f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80090f8:	e03a      	b.n	8009170 <_printf_i+0xa8>
 80090fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80090fe:	2b15      	cmp	r3, #21
 8009100:	d8f6      	bhi.n	80090f0 <_printf_i+0x28>
 8009102:	a101      	add	r1, pc, #4	; (adr r1, 8009108 <_printf_i+0x40>)
 8009104:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009108:	08009161 	.word	0x08009161
 800910c:	08009175 	.word	0x08009175
 8009110:	080090f1 	.word	0x080090f1
 8009114:	080090f1 	.word	0x080090f1
 8009118:	080090f1 	.word	0x080090f1
 800911c:	080090f1 	.word	0x080090f1
 8009120:	08009175 	.word	0x08009175
 8009124:	080090f1 	.word	0x080090f1
 8009128:	080090f1 	.word	0x080090f1
 800912c:	080090f1 	.word	0x080090f1
 8009130:	080090f1 	.word	0x080090f1
 8009134:	08009283 	.word	0x08009283
 8009138:	080091a5 	.word	0x080091a5
 800913c:	08009265 	.word	0x08009265
 8009140:	080090f1 	.word	0x080090f1
 8009144:	080090f1 	.word	0x080090f1
 8009148:	080092a5 	.word	0x080092a5
 800914c:	080090f1 	.word	0x080090f1
 8009150:	080091a5 	.word	0x080091a5
 8009154:	080090f1 	.word	0x080090f1
 8009158:	080090f1 	.word	0x080090f1
 800915c:	0800926d 	.word	0x0800926d
 8009160:	682b      	ldr	r3, [r5, #0]
 8009162:	1d1a      	adds	r2, r3, #4
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	602a      	str	r2, [r5, #0]
 8009168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800916c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009170:	2301      	movs	r3, #1
 8009172:	e0a4      	b.n	80092be <_printf_i+0x1f6>
 8009174:	6820      	ldr	r0, [r4, #0]
 8009176:	6829      	ldr	r1, [r5, #0]
 8009178:	0606      	lsls	r6, r0, #24
 800917a:	f101 0304 	add.w	r3, r1, #4
 800917e:	d50a      	bpl.n	8009196 <_printf_i+0xce>
 8009180:	680e      	ldr	r6, [r1, #0]
 8009182:	602b      	str	r3, [r5, #0]
 8009184:	2e00      	cmp	r6, #0
 8009186:	da03      	bge.n	8009190 <_printf_i+0xc8>
 8009188:	232d      	movs	r3, #45	; 0x2d
 800918a:	4276      	negs	r6, r6
 800918c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009190:	230a      	movs	r3, #10
 8009192:	485e      	ldr	r0, [pc, #376]	; (800930c <_printf_i+0x244>)
 8009194:	e019      	b.n	80091ca <_printf_i+0x102>
 8009196:	680e      	ldr	r6, [r1, #0]
 8009198:	f010 0f40 	tst.w	r0, #64	; 0x40
 800919c:	602b      	str	r3, [r5, #0]
 800919e:	bf18      	it	ne
 80091a0:	b236      	sxthne	r6, r6
 80091a2:	e7ef      	b.n	8009184 <_printf_i+0xbc>
 80091a4:	682b      	ldr	r3, [r5, #0]
 80091a6:	6820      	ldr	r0, [r4, #0]
 80091a8:	1d19      	adds	r1, r3, #4
 80091aa:	6029      	str	r1, [r5, #0]
 80091ac:	0601      	lsls	r1, r0, #24
 80091ae:	d501      	bpl.n	80091b4 <_printf_i+0xec>
 80091b0:	681e      	ldr	r6, [r3, #0]
 80091b2:	e002      	b.n	80091ba <_printf_i+0xf2>
 80091b4:	0646      	lsls	r6, r0, #25
 80091b6:	d5fb      	bpl.n	80091b0 <_printf_i+0xe8>
 80091b8:	881e      	ldrh	r6, [r3, #0]
 80091ba:	2f6f      	cmp	r7, #111	; 0x6f
 80091bc:	bf0c      	ite	eq
 80091be:	2308      	moveq	r3, #8
 80091c0:	230a      	movne	r3, #10
 80091c2:	4852      	ldr	r0, [pc, #328]	; (800930c <_printf_i+0x244>)
 80091c4:	2100      	movs	r1, #0
 80091c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80091ca:	6865      	ldr	r5, [r4, #4]
 80091cc:	2d00      	cmp	r5, #0
 80091ce:	bfa8      	it	ge
 80091d0:	6821      	ldrge	r1, [r4, #0]
 80091d2:	60a5      	str	r5, [r4, #8]
 80091d4:	bfa4      	itt	ge
 80091d6:	f021 0104 	bicge.w	r1, r1, #4
 80091da:	6021      	strge	r1, [r4, #0]
 80091dc:	b90e      	cbnz	r6, 80091e2 <_printf_i+0x11a>
 80091de:	2d00      	cmp	r5, #0
 80091e0:	d04d      	beq.n	800927e <_printf_i+0x1b6>
 80091e2:	4615      	mov	r5, r2
 80091e4:	fbb6 f1f3 	udiv	r1, r6, r3
 80091e8:	fb03 6711 	mls	r7, r3, r1, r6
 80091ec:	5dc7      	ldrb	r7, [r0, r7]
 80091ee:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80091f2:	4637      	mov	r7, r6
 80091f4:	42bb      	cmp	r3, r7
 80091f6:	460e      	mov	r6, r1
 80091f8:	d9f4      	bls.n	80091e4 <_printf_i+0x11c>
 80091fa:	2b08      	cmp	r3, #8
 80091fc:	d10b      	bne.n	8009216 <_printf_i+0x14e>
 80091fe:	6823      	ldr	r3, [r4, #0]
 8009200:	07de      	lsls	r6, r3, #31
 8009202:	d508      	bpl.n	8009216 <_printf_i+0x14e>
 8009204:	6923      	ldr	r3, [r4, #16]
 8009206:	6861      	ldr	r1, [r4, #4]
 8009208:	4299      	cmp	r1, r3
 800920a:	bfde      	ittt	le
 800920c:	2330      	movle	r3, #48	; 0x30
 800920e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009212:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009216:	1b52      	subs	r2, r2, r5
 8009218:	6122      	str	r2, [r4, #16]
 800921a:	464b      	mov	r3, r9
 800921c:	4621      	mov	r1, r4
 800921e:	4640      	mov	r0, r8
 8009220:	f8cd a000 	str.w	sl, [sp]
 8009224:	aa03      	add	r2, sp, #12
 8009226:	f7ff fedf 	bl	8008fe8 <_printf_common>
 800922a:	3001      	adds	r0, #1
 800922c:	d14c      	bne.n	80092c8 <_printf_i+0x200>
 800922e:	f04f 30ff 	mov.w	r0, #4294967295
 8009232:	b004      	add	sp, #16
 8009234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009238:	4834      	ldr	r0, [pc, #208]	; (800930c <_printf_i+0x244>)
 800923a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800923e:	6829      	ldr	r1, [r5, #0]
 8009240:	6823      	ldr	r3, [r4, #0]
 8009242:	f851 6b04 	ldr.w	r6, [r1], #4
 8009246:	6029      	str	r1, [r5, #0]
 8009248:	061d      	lsls	r5, r3, #24
 800924a:	d514      	bpl.n	8009276 <_printf_i+0x1ae>
 800924c:	07df      	lsls	r7, r3, #31
 800924e:	bf44      	itt	mi
 8009250:	f043 0320 	orrmi.w	r3, r3, #32
 8009254:	6023      	strmi	r3, [r4, #0]
 8009256:	b91e      	cbnz	r6, 8009260 <_printf_i+0x198>
 8009258:	6823      	ldr	r3, [r4, #0]
 800925a:	f023 0320 	bic.w	r3, r3, #32
 800925e:	6023      	str	r3, [r4, #0]
 8009260:	2310      	movs	r3, #16
 8009262:	e7af      	b.n	80091c4 <_printf_i+0xfc>
 8009264:	6823      	ldr	r3, [r4, #0]
 8009266:	f043 0320 	orr.w	r3, r3, #32
 800926a:	6023      	str	r3, [r4, #0]
 800926c:	2378      	movs	r3, #120	; 0x78
 800926e:	4828      	ldr	r0, [pc, #160]	; (8009310 <_printf_i+0x248>)
 8009270:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009274:	e7e3      	b.n	800923e <_printf_i+0x176>
 8009276:	0659      	lsls	r1, r3, #25
 8009278:	bf48      	it	mi
 800927a:	b2b6      	uxthmi	r6, r6
 800927c:	e7e6      	b.n	800924c <_printf_i+0x184>
 800927e:	4615      	mov	r5, r2
 8009280:	e7bb      	b.n	80091fa <_printf_i+0x132>
 8009282:	682b      	ldr	r3, [r5, #0]
 8009284:	6826      	ldr	r6, [r4, #0]
 8009286:	1d18      	adds	r0, r3, #4
 8009288:	6961      	ldr	r1, [r4, #20]
 800928a:	6028      	str	r0, [r5, #0]
 800928c:	0635      	lsls	r5, r6, #24
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	d501      	bpl.n	8009296 <_printf_i+0x1ce>
 8009292:	6019      	str	r1, [r3, #0]
 8009294:	e002      	b.n	800929c <_printf_i+0x1d4>
 8009296:	0670      	lsls	r0, r6, #25
 8009298:	d5fb      	bpl.n	8009292 <_printf_i+0x1ca>
 800929a:	8019      	strh	r1, [r3, #0]
 800929c:	2300      	movs	r3, #0
 800929e:	4615      	mov	r5, r2
 80092a0:	6123      	str	r3, [r4, #16]
 80092a2:	e7ba      	b.n	800921a <_printf_i+0x152>
 80092a4:	682b      	ldr	r3, [r5, #0]
 80092a6:	2100      	movs	r1, #0
 80092a8:	1d1a      	adds	r2, r3, #4
 80092aa:	602a      	str	r2, [r5, #0]
 80092ac:	681d      	ldr	r5, [r3, #0]
 80092ae:	6862      	ldr	r2, [r4, #4]
 80092b0:	4628      	mov	r0, r5
 80092b2:	f002 fb23 	bl	800b8fc <memchr>
 80092b6:	b108      	cbz	r0, 80092bc <_printf_i+0x1f4>
 80092b8:	1b40      	subs	r0, r0, r5
 80092ba:	6060      	str	r0, [r4, #4]
 80092bc:	6863      	ldr	r3, [r4, #4]
 80092be:	6123      	str	r3, [r4, #16]
 80092c0:	2300      	movs	r3, #0
 80092c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092c6:	e7a8      	b.n	800921a <_printf_i+0x152>
 80092c8:	462a      	mov	r2, r5
 80092ca:	4649      	mov	r1, r9
 80092cc:	4640      	mov	r0, r8
 80092ce:	6923      	ldr	r3, [r4, #16]
 80092d0:	47d0      	blx	sl
 80092d2:	3001      	adds	r0, #1
 80092d4:	d0ab      	beq.n	800922e <_printf_i+0x166>
 80092d6:	6823      	ldr	r3, [r4, #0]
 80092d8:	079b      	lsls	r3, r3, #30
 80092da:	d413      	bmi.n	8009304 <_printf_i+0x23c>
 80092dc:	68e0      	ldr	r0, [r4, #12]
 80092de:	9b03      	ldr	r3, [sp, #12]
 80092e0:	4298      	cmp	r0, r3
 80092e2:	bfb8      	it	lt
 80092e4:	4618      	movlt	r0, r3
 80092e6:	e7a4      	b.n	8009232 <_printf_i+0x16a>
 80092e8:	2301      	movs	r3, #1
 80092ea:	4632      	mov	r2, r6
 80092ec:	4649      	mov	r1, r9
 80092ee:	4640      	mov	r0, r8
 80092f0:	47d0      	blx	sl
 80092f2:	3001      	adds	r0, #1
 80092f4:	d09b      	beq.n	800922e <_printf_i+0x166>
 80092f6:	3501      	adds	r5, #1
 80092f8:	68e3      	ldr	r3, [r4, #12]
 80092fa:	9903      	ldr	r1, [sp, #12]
 80092fc:	1a5b      	subs	r3, r3, r1
 80092fe:	42ab      	cmp	r3, r5
 8009300:	dcf2      	bgt.n	80092e8 <_printf_i+0x220>
 8009302:	e7eb      	b.n	80092dc <_printf_i+0x214>
 8009304:	2500      	movs	r5, #0
 8009306:	f104 0619 	add.w	r6, r4, #25
 800930a:	e7f5      	b.n	80092f8 <_printf_i+0x230>
 800930c:	0800e572 	.word	0x0800e572
 8009310:	0800e583 	.word	0x0800e583

08009314 <_scanf_float>:
 8009314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009318:	b087      	sub	sp, #28
 800931a:	9303      	str	r3, [sp, #12]
 800931c:	688b      	ldr	r3, [r1, #8]
 800931e:	4617      	mov	r7, r2
 8009320:	1e5a      	subs	r2, r3, #1
 8009322:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009326:	bf85      	ittet	hi
 8009328:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800932c:	195b      	addhi	r3, r3, r5
 800932e:	2300      	movls	r3, #0
 8009330:	9302      	strhi	r3, [sp, #8]
 8009332:	bf88      	it	hi
 8009334:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009338:	468b      	mov	fp, r1
 800933a:	f04f 0500 	mov.w	r5, #0
 800933e:	bf8c      	ite	hi
 8009340:	608b      	strhi	r3, [r1, #8]
 8009342:	9302      	strls	r3, [sp, #8]
 8009344:	680b      	ldr	r3, [r1, #0]
 8009346:	4680      	mov	r8, r0
 8009348:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800934c:	f84b 3b1c 	str.w	r3, [fp], #28
 8009350:	460c      	mov	r4, r1
 8009352:	465e      	mov	r6, fp
 8009354:	46aa      	mov	sl, r5
 8009356:	46a9      	mov	r9, r5
 8009358:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800935c:	9501      	str	r5, [sp, #4]
 800935e:	68a2      	ldr	r2, [r4, #8]
 8009360:	b152      	cbz	r2, 8009378 <_scanf_float+0x64>
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	2b4e      	cmp	r3, #78	; 0x4e
 8009368:	d864      	bhi.n	8009434 <_scanf_float+0x120>
 800936a:	2b40      	cmp	r3, #64	; 0x40
 800936c:	d83c      	bhi.n	80093e8 <_scanf_float+0xd4>
 800936e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009372:	b2c8      	uxtb	r0, r1
 8009374:	280e      	cmp	r0, #14
 8009376:	d93a      	bls.n	80093ee <_scanf_float+0xda>
 8009378:	f1b9 0f00 	cmp.w	r9, #0
 800937c:	d003      	beq.n	8009386 <_scanf_float+0x72>
 800937e:	6823      	ldr	r3, [r4, #0]
 8009380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009384:	6023      	str	r3, [r4, #0]
 8009386:	f10a 3aff 	add.w	sl, sl, #4294967295
 800938a:	f1ba 0f01 	cmp.w	sl, #1
 800938e:	f200 8113 	bhi.w	80095b8 <_scanf_float+0x2a4>
 8009392:	455e      	cmp	r6, fp
 8009394:	f200 8105 	bhi.w	80095a2 <_scanf_float+0x28e>
 8009398:	2501      	movs	r5, #1
 800939a:	4628      	mov	r0, r5
 800939c:	b007      	add	sp, #28
 800939e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80093a6:	2a0d      	cmp	r2, #13
 80093a8:	d8e6      	bhi.n	8009378 <_scanf_float+0x64>
 80093aa:	a101      	add	r1, pc, #4	; (adr r1, 80093b0 <_scanf_float+0x9c>)
 80093ac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80093b0:	080094ef 	.word	0x080094ef
 80093b4:	08009379 	.word	0x08009379
 80093b8:	08009379 	.word	0x08009379
 80093bc:	08009379 	.word	0x08009379
 80093c0:	0800954f 	.word	0x0800954f
 80093c4:	08009527 	.word	0x08009527
 80093c8:	08009379 	.word	0x08009379
 80093cc:	08009379 	.word	0x08009379
 80093d0:	080094fd 	.word	0x080094fd
 80093d4:	08009379 	.word	0x08009379
 80093d8:	08009379 	.word	0x08009379
 80093dc:	08009379 	.word	0x08009379
 80093e0:	08009379 	.word	0x08009379
 80093e4:	080094b5 	.word	0x080094b5
 80093e8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80093ec:	e7db      	b.n	80093a6 <_scanf_float+0x92>
 80093ee:	290e      	cmp	r1, #14
 80093f0:	d8c2      	bhi.n	8009378 <_scanf_float+0x64>
 80093f2:	a001      	add	r0, pc, #4	; (adr r0, 80093f8 <_scanf_float+0xe4>)
 80093f4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80093f8:	080094a7 	.word	0x080094a7
 80093fc:	08009379 	.word	0x08009379
 8009400:	080094a7 	.word	0x080094a7
 8009404:	0800953b 	.word	0x0800953b
 8009408:	08009379 	.word	0x08009379
 800940c:	08009455 	.word	0x08009455
 8009410:	08009491 	.word	0x08009491
 8009414:	08009491 	.word	0x08009491
 8009418:	08009491 	.word	0x08009491
 800941c:	08009491 	.word	0x08009491
 8009420:	08009491 	.word	0x08009491
 8009424:	08009491 	.word	0x08009491
 8009428:	08009491 	.word	0x08009491
 800942c:	08009491 	.word	0x08009491
 8009430:	08009491 	.word	0x08009491
 8009434:	2b6e      	cmp	r3, #110	; 0x6e
 8009436:	d809      	bhi.n	800944c <_scanf_float+0x138>
 8009438:	2b60      	cmp	r3, #96	; 0x60
 800943a:	d8b2      	bhi.n	80093a2 <_scanf_float+0x8e>
 800943c:	2b54      	cmp	r3, #84	; 0x54
 800943e:	d077      	beq.n	8009530 <_scanf_float+0x21c>
 8009440:	2b59      	cmp	r3, #89	; 0x59
 8009442:	d199      	bne.n	8009378 <_scanf_float+0x64>
 8009444:	2d07      	cmp	r5, #7
 8009446:	d197      	bne.n	8009378 <_scanf_float+0x64>
 8009448:	2508      	movs	r5, #8
 800944a:	e029      	b.n	80094a0 <_scanf_float+0x18c>
 800944c:	2b74      	cmp	r3, #116	; 0x74
 800944e:	d06f      	beq.n	8009530 <_scanf_float+0x21c>
 8009450:	2b79      	cmp	r3, #121	; 0x79
 8009452:	e7f6      	b.n	8009442 <_scanf_float+0x12e>
 8009454:	6821      	ldr	r1, [r4, #0]
 8009456:	05c8      	lsls	r0, r1, #23
 8009458:	d51a      	bpl.n	8009490 <_scanf_float+0x17c>
 800945a:	9b02      	ldr	r3, [sp, #8]
 800945c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009460:	6021      	str	r1, [r4, #0]
 8009462:	f109 0901 	add.w	r9, r9, #1
 8009466:	b11b      	cbz	r3, 8009470 <_scanf_float+0x15c>
 8009468:	3b01      	subs	r3, #1
 800946a:	3201      	adds	r2, #1
 800946c:	9302      	str	r3, [sp, #8]
 800946e:	60a2      	str	r2, [r4, #8]
 8009470:	68a3      	ldr	r3, [r4, #8]
 8009472:	3b01      	subs	r3, #1
 8009474:	60a3      	str	r3, [r4, #8]
 8009476:	6923      	ldr	r3, [r4, #16]
 8009478:	3301      	adds	r3, #1
 800947a:	6123      	str	r3, [r4, #16]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	3b01      	subs	r3, #1
 8009480:	2b00      	cmp	r3, #0
 8009482:	607b      	str	r3, [r7, #4]
 8009484:	f340 8084 	ble.w	8009590 <_scanf_float+0x27c>
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	3301      	adds	r3, #1
 800948c:	603b      	str	r3, [r7, #0]
 800948e:	e766      	b.n	800935e <_scanf_float+0x4a>
 8009490:	eb1a 0f05 	cmn.w	sl, r5
 8009494:	f47f af70 	bne.w	8009378 <_scanf_float+0x64>
 8009498:	6822      	ldr	r2, [r4, #0]
 800949a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800949e:	6022      	str	r2, [r4, #0]
 80094a0:	f806 3b01 	strb.w	r3, [r6], #1
 80094a4:	e7e4      	b.n	8009470 <_scanf_float+0x15c>
 80094a6:	6822      	ldr	r2, [r4, #0]
 80094a8:	0610      	lsls	r0, r2, #24
 80094aa:	f57f af65 	bpl.w	8009378 <_scanf_float+0x64>
 80094ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80094b2:	e7f4      	b.n	800949e <_scanf_float+0x18a>
 80094b4:	f1ba 0f00 	cmp.w	sl, #0
 80094b8:	d10e      	bne.n	80094d8 <_scanf_float+0x1c4>
 80094ba:	f1b9 0f00 	cmp.w	r9, #0
 80094be:	d10e      	bne.n	80094de <_scanf_float+0x1ca>
 80094c0:	6822      	ldr	r2, [r4, #0]
 80094c2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80094c6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80094ca:	d108      	bne.n	80094de <_scanf_float+0x1ca>
 80094cc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80094d0:	f04f 0a01 	mov.w	sl, #1
 80094d4:	6022      	str	r2, [r4, #0]
 80094d6:	e7e3      	b.n	80094a0 <_scanf_float+0x18c>
 80094d8:	f1ba 0f02 	cmp.w	sl, #2
 80094dc:	d055      	beq.n	800958a <_scanf_float+0x276>
 80094de:	2d01      	cmp	r5, #1
 80094e0:	d002      	beq.n	80094e8 <_scanf_float+0x1d4>
 80094e2:	2d04      	cmp	r5, #4
 80094e4:	f47f af48 	bne.w	8009378 <_scanf_float+0x64>
 80094e8:	3501      	adds	r5, #1
 80094ea:	b2ed      	uxtb	r5, r5
 80094ec:	e7d8      	b.n	80094a0 <_scanf_float+0x18c>
 80094ee:	f1ba 0f01 	cmp.w	sl, #1
 80094f2:	f47f af41 	bne.w	8009378 <_scanf_float+0x64>
 80094f6:	f04f 0a02 	mov.w	sl, #2
 80094fa:	e7d1      	b.n	80094a0 <_scanf_float+0x18c>
 80094fc:	b97d      	cbnz	r5, 800951e <_scanf_float+0x20a>
 80094fe:	f1b9 0f00 	cmp.w	r9, #0
 8009502:	f47f af3c 	bne.w	800937e <_scanf_float+0x6a>
 8009506:	6822      	ldr	r2, [r4, #0]
 8009508:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800950c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009510:	f47f af39 	bne.w	8009386 <_scanf_float+0x72>
 8009514:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009518:	2501      	movs	r5, #1
 800951a:	6022      	str	r2, [r4, #0]
 800951c:	e7c0      	b.n	80094a0 <_scanf_float+0x18c>
 800951e:	2d03      	cmp	r5, #3
 8009520:	d0e2      	beq.n	80094e8 <_scanf_float+0x1d4>
 8009522:	2d05      	cmp	r5, #5
 8009524:	e7de      	b.n	80094e4 <_scanf_float+0x1d0>
 8009526:	2d02      	cmp	r5, #2
 8009528:	f47f af26 	bne.w	8009378 <_scanf_float+0x64>
 800952c:	2503      	movs	r5, #3
 800952e:	e7b7      	b.n	80094a0 <_scanf_float+0x18c>
 8009530:	2d06      	cmp	r5, #6
 8009532:	f47f af21 	bne.w	8009378 <_scanf_float+0x64>
 8009536:	2507      	movs	r5, #7
 8009538:	e7b2      	b.n	80094a0 <_scanf_float+0x18c>
 800953a:	6822      	ldr	r2, [r4, #0]
 800953c:	0591      	lsls	r1, r2, #22
 800953e:	f57f af1b 	bpl.w	8009378 <_scanf_float+0x64>
 8009542:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009546:	6022      	str	r2, [r4, #0]
 8009548:	f8cd 9004 	str.w	r9, [sp, #4]
 800954c:	e7a8      	b.n	80094a0 <_scanf_float+0x18c>
 800954e:	6822      	ldr	r2, [r4, #0]
 8009550:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009554:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009558:	d006      	beq.n	8009568 <_scanf_float+0x254>
 800955a:	0550      	lsls	r0, r2, #21
 800955c:	f57f af0c 	bpl.w	8009378 <_scanf_float+0x64>
 8009560:	f1b9 0f00 	cmp.w	r9, #0
 8009564:	f43f af0f 	beq.w	8009386 <_scanf_float+0x72>
 8009568:	0591      	lsls	r1, r2, #22
 800956a:	bf58      	it	pl
 800956c:	9901      	ldrpl	r1, [sp, #4]
 800956e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009572:	bf58      	it	pl
 8009574:	eba9 0101 	subpl.w	r1, r9, r1
 8009578:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800957c:	f04f 0900 	mov.w	r9, #0
 8009580:	bf58      	it	pl
 8009582:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009586:	6022      	str	r2, [r4, #0]
 8009588:	e78a      	b.n	80094a0 <_scanf_float+0x18c>
 800958a:	f04f 0a03 	mov.w	sl, #3
 800958e:	e787      	b.n	80094a0 <_scanf_float+0x18c>
 8009590:	4639      	mov	r1, r7
 8009592:	4640      	mov	r0, r8
 8009594:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009598:	4798      	blx	r3
 800959a:	2800      	cmp	r0, #0
 800959c:	f43f aedf 	beq.w	800935e <_scanf_float+0x4a>
 80095a0:	e6ea      	b.n	8009378 <_scanf_float+0x64>
 80095a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80095a6:	463a      	mov	r2, r7
 80095a8:	4640      	mov	r0, r8
 80095aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80095ae:	4798      	blx	r3
 80095b0:	6923      	ldr	r3, [r4, #16]
 80095b2:	3b01      	subs	r3, #1
 80095b4:	6123      	str	r3, [r4, #16]
 80095b6:	e6ec      	b.n	8009392 <_scanf_float+0x7e>
 80095b8:	1e6b      	subs	r3, r5, #1
 80095ba:	2b06      	cmp	r3, #6
 80095bc:	d825      	bhi.n	800960a <_scanf_float+0x2f6>
 80095be:	2d02      	cmp	r5, #2
 80095c0:	d836      	bhi.n	8009630 <_scanf_float+0x31c>
 80095c2:	455e      	cmp	r6, fp
 80095c4:	f67f aee8 	bls.w	8009398 <_scanf_float+0x84>
 80095c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80095cc:	463a      	mov	r2, r7
 80095ce:	4640      	mov	r0, r8
 80095d0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80095d4:	4798      	blx	r3
 80095d6:	6923      	ldr	r3, [r4, #16]
 80095d8:	3b01      	subs	r3, #1
 80095da:	6123      	str	r3, [r4, #16]
 80095dc:	e7f1      	b.n	80095c2 <_scanf_float+0x2ae>
 80095de:	9802      	ldr	r0, [sp, #8]
 80095e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80095e4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80095e8:	463a      	mov	r2, r7
 80095ea:	9002      	str	r0, [sp, #8]
 80095ec:	4640      	mov	r0, r8
 80095ee:	4798      	blx	r3
 80095f0:	6923      	ldr	r3, [r4, #16]
 80095f2:	3b01      	subs	r3, #1
 80095f4:	6123      	str	r3, [r4, #16]
 80095f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80095fa:	fa5f fa8a 	uxtb.w	sl, sl
 80095fe:	f1ba 0f02 	cmp.w	sl, #2
 8009602:	d1ec      	bne.n	80095de <_scanf_float+0x2ca>
 8009604:	3d03      	subs	r5, #3
 8009606:	b2ed      	uxtb	r5, r5
 8009608:	1b76      	subs	r6, r6, r5
 800960a:	6823      	ldr	r3, [r4, #0]
 800960c:	05da      	lsls	r2, r3, #23
 800960e:	d52f      	bpl.n	8009670 <_scanf_float+0x35c>
 8009610:	055b      	lsls	r3, r3, #21
 8009612:	d510      	bpl.n	8009636 <_scanf_float+0x322>
 8009614:	455e      	cmp	r6, fp
 8009616:	f67f aebf 	bls.w	8009398 <_scanf_float+0x84>
 800961a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800961e:	463a      	mov	r2, r7
 8009620:	4640      	mov	r0, r8
 8009622:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009626:	4798      	blx	r3
 8009628:	6923      	ldr	r3, [r4, #16]
 800962a:	3b01      	subs	r3, #1
 800962c:	6123      	str	r3, [r4, #16]
 800962e:	e7f1      	b.n	8009614 <_scanf_float+0x300>
 8009630:	46aa      	mov	sl, r5
 8009632:	9602      	str	r6, [sp, #8]
 8009634:	e7df      	b.n	80095f6 <_scanf_float+0x2e2>
 8009636:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800963a:	6923      	ldr	r3, [r4, #16]
 800963c:	2965      	cmp	r1, #101	; 0x65
 800963e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009642:	f106 35ff 	add.w	r5, r6, #4294967295
 8009646:	6123      	str	r3, [r4, #16]
 8009648:	d00c      	beq.n	8009664 <_scanf_float+0x350>
 800964a:	2945      	cmp	r1, #69	; 0x45
 800964c:	d00a      	beq.n	8009664 <_scanf_float+0x350>
 800964e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009652:	463a      	mov	r2, r7
 8009654:	4640      	mov	r0, r8
 8009656:	4798      	blx	r3
 8009658:	6923      	ldr	r3, [r4, #16]
 800965a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800965e:	3b01      	subs	r3, #1
 8009660:	1eb5      	subs	r5, r6, #2
 8009662:	6123      	str	r3, [r4, #16]
 8009664:	463a      	mov	r2, r7
 8009666:	4640      	mov	r0, r8
 8009668:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800966c:	4798      	blx	r3
 800966e:	462e      	mov	r6, r5
 8009670:	6825      	ldr	r5, [r4, #0]
 8009672:	f015 0510 	ands.w	r5, r5, #16
 8009676:	d155      	bne.n	8009724 <_scanf_float+0x410>
 8009678:	7035      	strb	r5, [r6, #0]
 800967a:	6823      	ldr	r3, [r4, #0]
 800967c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009684:	d11b      	bne.n	80096be <_scanf_float+0x3aa>
 8009686:	9b01      	ldr	r3, [sp, #4]
 8009688:	454b      	cmp	r3, r9
 800968a:	eba3 0209 	sub.w	r2, r3, r9
 800968e:	d123      	bne.n	80096d8 <_scanf_float+0x3c4>
 8009690:	2200      	movs	r2, #0
 8009692:	4659      	mov	r1, fp
 8009694:	4640      	mov	r0, r8
 8009696:	f000 feaf 	bl	800a3f8 <_strtod_r>
 800969a:	6822      	ldr	r2, [r4, #0]
 800969c:	9b03      	ldr	r3, [sp, #12]
 800969e:	f012 0f02 	tst.w	r2, #2
 80096a2:	4606      	mov	r6, r0
 80096a4:	460f      	mov	r7, r1
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	d021      	beq.n	80096ee <_scanf_float+0x3da>
 80096aa:	1d1a      	adds	r2, r3, #4
 80096ac:	9903      	ldr	r1, [sp, #12]
 80096ae:	600a      	str	r2, [r1, #0]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	e9c3 6700 	strd	r6, r7, [r3]
 80096b6:	68e3      	ldr	r3, [r4, #12]
 80096b8:	3301      	adds	r3, #1
 80096ba:	60e3      	str	r3, [r4, #12]
 80096bc:	e66d      	b.n	800939a <_scanf_float+0x86>
 80096be:	9b04      	ldr	r3, [sp, #16]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d0e5      	beq.n	8009690 <_scanf_float+0x37c>
 80096c4:	9905      	ldr	r1, [sp, #20]
 80096c6:	230a      	movs	r3, #10
 80096c8:	462a      	mov	r2, r5
 80096ca:	4640      	mov	r0, r8
 80096cc:	3101      	adds	r1, #1
 80096ce:	f000 ff15 	bl	800a4fc <_strtol_r>
 80096d2:	9b04      	ldr	r3, [sp, #16]
 80096d4:	9e05      	ldr	r6, [sp, #20]
 80096d6:	1ac2      	subs	r2, r0, r3
 80096d8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80096dc:	429e      	cmp	r6, r3
 80096de:	bf28      	it	cs
 80096e0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80096e4:	4630      	mov	r0, r6
 80096e6:	4910      	ldr	r1, [pc, #64]	; (8009728 <_scanf_float+0x414>)
 80096e8:	f000 f85a 	bl	80097a0 <siprintf>
 80096ec:	e7d0      	b.n	8009690 <_scanf_float+0x37c>
 80096ee:	f012 0f04 	tst.w	r2, #4
 80096f2:	f103 0204 	add.w	r2, r3, #4
 80096f6:	d1d9      	bne.n	80096ac <_scanf_float+0x398>
 80096f8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80096fc:	f8cc 2000 	str.w	r2, [ip]
 8009700:	f8d3 8000 	ldr.w	r8, [r3]
 8009704:	4602      	mov	r2, r0
 8009706:	460b      	mov	r3, r1
 8009708:	f7f7 f980 	bl	8000a0c <__aeabi_dcmpun>
 800970c:	b128      	cbz	r0, 800971a <_scanf_float+0x406>
 800970e:	4807      	ldr	r0, [pc, #28]	; (800972c <_scanf_float+0x418>)
 8009710:	f000 f80e 	bl	8009730 <nanf>
 8009714:	f8c8 0000 	str.w	r0, [r8]
 8009718:	e7cd      	b.n	80096b6 <_scanf_float+0x3a2>
 800971a:	4630      	mov	r0, r6
 800971c:	4639      	mov	r1, r7
 800971e:	f7f7 f9d3 	bl	8000ac8 <__aeabi_d2f>
 8009722:	e7f7      	b.n	8009714 <_scanf_float+0x400>
 8009724:	2500      	movs	r5, #0
 8009726:	e638      	b.n	800939a <_scanf_float+0x86>
 8009728:	0800e594 	.word	0x0800e594
 800972c:	0800e9a0 	.word	0x0800e9a0

08009730 <nanf>:
 8009730:	4800      	ldr	r0, [pc, #0]	; (8009734 <nanf+0x4>)
 8009732:	4770      	bx	lr
 8009734:	7fc00000 	.word	0x7fc00000

08009738 <sniprintf>:
 8009738:	b40c      	push	{r2, r3}
 800973a:	b530      	push	{r4, r5, lr}
 800973c:	4b17      	ldr	r3, [pc, #92]	; (800979c <sniprintf+0x64>)
 800973e:	1e0c      	subs	r4, r1, #0
 8009740:	681d      	ldr	r5, [r3, #0]
 8009742:	b09d      	sub	sp, #116	; 0x74
 8009744:	da08      	bge.n	8009758 <sniprintf+0x20>
 8009746:	238b      	movs	r3, #139	; 0x8b
 8009748:	f04f 30ff 	mov.w	r0, #4294967295
 800974c:	602b      	str	r3, [r5, #0]
 800974e:	b01d      	add	sp, #116	; 0x74
 8009750:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009754:	b002      	add	sp, #8
 8009756:	4770      	bx	lr
 8009758:	f44f 7302 	mov.w	r3, #520	; 0x208
 800975c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009760:	bf0c      	ite	eq
 8009762:	4623      	moveq	r3, r4
 8009764:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009768:	9304      	str	r3, [sp, #16]
 800976a:	9307      	str	r3, [sp, #28]
 800976c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009770:	9002      	str	r0, [sp, #8]
 8009772:	9006      	str	r0, [sp, #24]
 8009774:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009778:	4628      	mov	r0, r5
 800977a:	ab21      	add	r3, sp, #132	; 0x84
 800977c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800977e:	a902      	add	r1, sp, #8
 8009780:	9301      	str	r3, [sp, #4]
 8009782:	f002 fedb 	bl	800c53c <_svfiprintf_r>
 8009786:	1c43      	adds	r3, r0, #1
 8009788:	bfbc      	itt	lt
 800978a:	238b      	movlt	r3, #139	; 0x8b
 800978c:	602b      	strlt	r3, [r5, #0]
 800978e:	2c00      	cmp	r4, #0
 8009790:	d0dd      	beq.n	800974e <sniprintf+0x16>
 8009792:	2200      	movs	r2, #0
 8009794:	9b02      	ldr	r3, [sp, #8]
 8009796:	701a      	strb	r2, [r3, #0]
 8009798:	e7d9      	b.n	800974e <sniprintf+0x16>
 800979a:	bf00      	nop
 800979c:	20000018 	.word	0x20000018

080097a0 <siprintf>:
 80097a0:	b40e      	push	{r1, r2, r3}
 80097a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80097a6:	b500      	push	{lr}
 80097a8:	b09c      	sub	sp, #112	; 0x70
 80097aa:	ab1d      	add	r3, sp, #116	; 0x74
 80097ac:	9002      	str	r0, [sp, #8]
 80097ae:	9006      	str	r0, [sp, #24]
 80097b0:	9107      	str	r1, [sp, #28]
 80097b2:	9104      	str	r1, [sp, #16]
 80097b4:	4808      	ldr	r0, [pc, #32]	; (80097d8 <siprintf+0x38>)
 80097b6:	4909      	ldr	r1, [pc, #36]	; (80097dc <siprintf+0x3c>)
 80097b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80097bc:	9105      	str	r1, [sp, #20]
 80097be:	6800      	ldr	r0, [r0, #0]
 80097c0:	a902      	add	r1, sp, #8
 80097c2:	9301      	str	r3, [sp, #4]
 80097c4:	f002 feba 	bl	800c53c <_svfiprintf_r>
 80097c8:	2200      	movs	r2, #0
 80097ca:	9b02      	ldr	r3, [sp, #8]
 80097cc:	701a      	strb	r2, [r3, #0]
 80097ce:	b01c      	add	sp, #112	; 0x70
 80097d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80097d4:	b003      	add	sp, #12
 80097d6:	4770      	bx	lr
 80097d8:	20000018 	.word	0x20000018
 80097dc:	ffff0208 	.word	0xffff0208

080097e0 <sulp>:
 80097e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097e4:	460f      	mov	r7, r1
 80097e6:	4690      	mov	r8, r2
 80097e8:	f002 fc14 	bl	800c014 <__ulp>
 80097ec:	4604      	mov	r4, r0
 80097ee:	460d      	mov	r5, r1
 80097f0:	f1b8 0f00 	cmp.w	r8, #0
 80097f4:	d011      	beq.n	800981a <sulp+0x3a>
 80097f6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80097fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80097fe:	2b00      	cmp	r3, #0
 8009800:	dd0b      	ble.n	800981a <sulp+0x3a>
 8009802:	2400      	movs	r4, #0
 8009804:	051b      	lsls	r3, r3, #20
 8009806:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800980a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800980e:	4622      	mov	r2, r4
 8009810:	462b      	mov	r3, r5
 8009812:	f7f6 fe61 	bl	80004d8 <__aeabi_dmul>
 8009816:	4604      	mov	r4, r0
 8009818:	460d      	mov	r5, r1
 800981a:	4620      	mov	r0, r4
 800981c:	4629      	mov	r1, r5
 800981e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009822:	0000      	movs	r0, r0
 8009824:	0000      	movs	r0, r0
	...

08009828 <_strtod_l>:
 8009828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800982c:	469b      	mov	fp, r3
 800982e:	2300      	movs	r3, #0
 8009830:	b09f      	sub	sp, #124	; 0x7c
 8009832:	931a      	str	r3, [sp, #104]	; 0x68
 8009834:	4b9e      	ldr	r3, [pc, #632]	; (8009ab0 <_strtod_l+0x288>)
 8009836:	4682      	mov	sl, r0
 8009838:	681f      	ldr	r7, [r3, #0]
 800983a:	460e      	mov	r6, r1
 800983c:	4638      	mov	r0, r7
 800983e:	9215      	str	r2, [sp, #84]	; 0x54
 8009840:	f7f6 fc86 	bl	8000150 <strlen>
 8009844:	f04f 0800 	mov.w	r8, #0
 8009848:	4604      	mov	r4, r0
 800984a:	f04f 0900 	mov.w	r9, #0
 800984e:	9619      	str	r6, [sp, #100]	; 0x64
 8009850:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009852:	781a      	ldrb	r2, [r3, #0]
 8009854:	2a2b      	cmp	r2, #43	; 0x2b
 8009856:	d04c      	beq.n	80098f2 <_strtod_l+0xca>
 8009858:	d83a      	bhi.n	80098d0 <_strtod_l+0xa8>
 800985a:	2a0d      	cmp	r2, #13
 800985c:	d833      	bhi.n	80098c6 <_strtod_l+0x9e>
 800985e:	2a08      	cmp	r2, #8
 8009860:	d833      	bhi.n	80098ca <_strtod_l+0xa2>
 8009862:	2a00      	cmp	r2, #0
 8009864:	d03d      	beq.n	80098e2 <_strtod_l+0xba>
 8009866:	2300      	movs	r3, #0
 8009868:	930a      	str	r3, [sp, #40]	; 0x28
 800986a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800986c:	782b      	ldrb	r3, [r5, #0]
 800986e:	2b30      	cmp	r3, #48	; 0x30
 8009870:	f040 80aa 	bne.w	80099c8 <_strtod_l+0x1a0>
 8009874:	786b      	ldrb	r3, [r5, #1]
 8009876:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800987a:	2b58      	cmp	r3, #88	; 0x58
 800987c:	d166      	bne.n	800994c <_strtod_l+0x124>
 800987e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009880:	4650      	mov	r0, sl
 8009882:	9301      	str	r3, [sp, #4]
 8009884:	ab1a      	add	r3, sp, #104	; 0x68
 8009886:	9300      	str	r3, [sp, #0]
 8009888:	4a8a      	ldr	r2, [pc, #552]	; (8009ab4 <_strtod_l+0x28c>)
 800988a:	f8cd b008 	str.w	fp, [sp, #8]
 800988e:	ab1b      	add	r3, sp, #108	; 0x6c
 8009890:	a919      	add	r1, sp, #100	; 0x64
 8009892:	f001 fd17 	bl	800b2c4 <__gethex>
 8009896:	f010 0607 	ands.w	r6, r0, #7
 800989a:	4604      	mov	r4, r0
 800989c:	d005      	beq.n	80098aa <_strtod_l+0x82>
 800989e:	2e06      	cmp	r6, #6
 80098a0:	d129      	bne.n	80098f6 <_strtod_l+0xce>
 80098a2:	2300      	movs	r3, #0
 80098a4:	3501      	adds	r5, #1
 80098a6:	9519      	str	r5, [sp, #100]	; 0x64
 80098a8:	930a      	str	r3, [sp, #40]	; 0x28
 80098aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	f040 858a 	bne.w	800a3c6 <_strtod_l+0xb9e>
 80098b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098b4:	b1d3      	cbz	r3, 80098ec <_strtod_l+0xc4>
 80098b6:	4642      	mov	r2, r8
 80098b8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80098bc:	4610      	mov	r0, r2
 80098be:	4619      	mov	r1, r3
 80098c0:	b01f      	add	sp, #124	; 0x7c
 80098c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098c6:	2a20      	cmp	r2, #32
 80098c8:	d1cd      	bne.n	8009866 <_strtod_l+0x3e>
 80098ca:	3301      	adds	r3, #1
 80098cc:	9319      	str	r3, [sp, #100]	; 0x64
 80098ce:	e7bf      	b.n	8009850 <_strtod_l+0x28>
 80098d0:	2a2d      	cmp	r2, #45	; 0x2d
 80098d2:	d1c8      	bne.n	8009866 <_strtod_l+0x3e>
 80098d4:	2201      	movs	r2, #1
 80098d6:	920a      	str	r2, [sp, #40]	; 0x28
 80098d8:	1c5a      	adds	r2, r3, #1
 80098da:	9219      	str	r2, [sp, #100]	; 0x64
 80098dc:	785b      	ldrb	r3, [r3, #1]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d1c3      	bne.n	800986a <_strtod_l+0x42>
 80098e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80098e4:	9619      	str	r6, [sp, #100]	; 0x64
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	f040 856b 	bne.w	800a3c2 <_strtod_l+0xb9a>
 80098ec:	4642      	mov	r2, r8
 80098ee:	464b      	mov	r3, r9
 80098f0:	e7e4      	b.n	80098bc <_strtod_l+0x94>
 80098f2:	2200      	movs	r2, #0
 80098f4:	e7ef      	b.n	80098d6 <_strtod_l+0xae>
 80098f6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80098f8:	b13a      	cbz	r2, 800990a <_strtod_l+0xe2>
 80098fa:	2135      	movs	r1, #53	; 0x35
 80098fc:	a81c      	add	r0, sp, #112	; 0x70
 80098fe:	f002 fc8d 	bl	800c21c <__copybits>
 8009902:	4650      	mov	r0, sl
 8009904:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009906:	f002 f855 	bl	800b9b4 <_Bfree>
 800990a:	3e01      	subs	r6, #1
 800990c:	2e04      	cmp	r6, #4
 800990e:	d806      	bhi.n	800991e <_strtod_l+0xf6>
 8009910:	e8df f006 	tbb	[pc, r6]
 8009914:	1714030a 	.word	0x1714030a
 8009918:	0a          	.byte	0x0a
 8009919:	00          	.byte	0x00
 800991a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800991e:	0721      	lsls	r1, r4, #28
 8009920:	d5c3      	bpl.n	80098aa <_strtod_l+0x82>
 8009922:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009926:	e7c0      	b.n	80098aa <_strtod_l+0x82>
 8009928:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800992a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800992e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009932:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009936:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800993a:	e7f0      	b.n	800991e <_strtod_l+0xf6>
 800993c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009ab8 <_strtod_l+0x290>
 8009940:	e7ed      	b.n	800991e <_strtod_l+0xf6>
 8009942:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009946:	f04f 38ff 	mov.w	r8, #4294967295
 800994a:	e7e8      	b.n	800991e <_strtod_l+0xf6>
 800994c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800994e:	1c5a      	adds	r2, r3, #1
 8009950:	9219      	str	r2, [sp, #100]	; 0x64
 8009952:	785b      	ldrb	r3, [r3, #1]
 8009954:	2b30      	cmp	r3, #48	; 0x30
 8009956:	d0f9      	beq.n	800994c <_strtod_l+0x124>
 8009958:	2b00      	cmp	r3, #0
 800995a:	d0a6      	beq.n	80098aa <_strtod_l+0x82>
 800995c:	2301      	movs	r3, #1
 800995e:	9307      	str	r3, [sp, #28]
 8009960:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009962:	220a      	movs	r2, #10
 8009964:	9308      	str	r3, [sp, #32]
 8009966:	2300      	movs	r3, #0
 8009968:	469b      	mov	fp, r3
 800996a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800996e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8009970:	7805      	ldrb	r5, [r0, #0]
 8009972:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8009976:	b2d9      	uxtb	r1, r3
 8009978:	2909      	cmp	r1, #9
 800997a:	d927      	bls.n	80099cc <_strtod_l+0x1a4>
 800997c:	4622      	mov	r2, r4
 800997e:	4639      	mov	r1, r7
 8009980:	f002 fef2 	bl	800c768 <strncmp>
 8009984:	2800      	cmp	r0, #0
 8009986:	d033      	beq.n	80099f0 <_strtod_l+0x1c8>
 8009988:	2000      	movs	r0, #0
 800998a:	462a      	mov	r2, r5
 800998c:	465c      	mov	r4, fp
 800998e:	4603      	mov	r3, r0
 8009990:	9004      	str	r0, [sp, #16]
 8009992:	2a65      	cmp	r2, #101	; 0x65
 8009994:	d001      	beq.n	800999a <_strtod_l+0x172>
 8009996:	2a45      	cmp	r2, #69	; 0x45
 8009998:	d114      	bne.n	80099c4 <_strtod_l+0x19c>
 800999a:	b91c      	cbnz	r4, 80099a4 <_strtod_l+0x17c>
 800999c:	9a07      	ldr	r2, [sp, #28]
 800999e:	4302      	orrs	r2, r0
 80099a0:	d09f      	beq.n	80098e2 <_strtod_l+0xba>
 80099a2:	2400      	movs	r4, #0
 80099a4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80099a6:	1c72      	adds	r2, r6, #1
 80099a8:	9219      	str	r2, [sp, #100]	; 0x64
 80099aa:	7872      	ldrb	r2, [r6, #1]
 80099ac:	2a2b      	cmp	r2, #43	; 0x2b
 80099ae:	d079      	beq.n	8009aa4 <_strtod_l+0x27c>
 80099b0:	2a2d      	cmp	r2, #45	; 0x2d
 80099b2:	f000 8083 	beq.w	8009abc <_strtod_l+0x294>
 80099b6:	2700      	movs	r7, #0
 80099b8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80099bc:	2909      	cmp	r1, #9
 80099be:	f240 8083 	bls.w	8009ac8 <_strtod_l+0x2a0>
 80099c2:	9619      	str	r6, [sp, #100]	; 0x64
 80099c4:	2500      	movs	r5, #0
 80099c6:	e09f      	b.n	8009b08 <_strtod_l+0x2e0>
 80099c8:	2300      	movs	r3, #0
 80099ca:	e7c8      	b.n	800995e <_strtod_l+0x136>
 80099cc:	f1bb 0f08 	cmp.w	fp, #8
 80099d0:	bfd5      	itete	le
 80099d2:	9906      	ldrle	r1, [sp, #24]
 80099d4:	9905      	ldrgt	r1, [sp, #20]
 80099d6:	fb02 3301 	mlale	r3, r2, r1, r3
 80099da:	fb02 3301 	mlagt	r3, r2, r1, r3
 80099de:	f100 0001 	add.w	r0, r0, #1
 80099e2:	bfd4      	ite	le
 80099e4:	9306      	strle	r3, [sp, #24]
 80099e6:	9305      	strgt	r3, [sp, #20]
 80099e8:	f10b 0b01 	add.w	fp, fp, #1
 80099ec:	9019      	str	r0, [sp, #100]	; 0x64
 80099ee:	e7be      	b.n	800996e <_strtod_l+0x146>
 80099f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80099f2:	191a      	adds	r2, r3, r4
 80099f4:	9219      	str	r2, [sp, #100]	; 0x64
 80099f6:	5d1a      	ldrb	r2, [r3, r4]
 80099f8:	f1bb 0f00 	cmp.w	fp, #0
 80099fc:	d036      	beq.n	8009a6c <_strtod_l+0x244>
 80099fe:	465c      	mov	r4, fp
 8009a00:	9004      	str	r0, [sp, #16]
 8009a02:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009a06:	2b09      	cmp	r3, #9
 8009a08:	d912      	bls.n	8009a30 <_strtod_l+0x208>
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	e7c1      	b.n	8009992 <_strtod_l+0x16a>
 8009a0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009a10:	3001      	adds	r0, #1
 8009a12:	1c5a      	adds	r2, r3, #1
 8009a14:	9219      	str	r2, [sp, #100]	; 0x64
 8009a16:	785a      	ldrb	r2, [r3, #1]
 8009a18:	2a30      	cmp	r2, #48	; 0x30
 8009a1a:	d0f8      	beq.n	8009a0e <_strtod_l+0x1e6>
 8009a1c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009a20:	2b08      	cmp	r3, #8
 8009a22:	f200 84d5 	bhi.w	800a3d0 <_strtod_l+0xba8>
 8009a26:	9004      	str	r0, [sp, #16]
 8009a28:	2000      	movs	r0, #0
 8009a2a:	4604      	mov	r4, r0
 8009a2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009a2e:	9308      	str	r3, [sp, #32]
 8009a30:	3a30      	subs	r2, #48	; 0x30
 8009a32:	f100 0301 	add.w	r3, r0, #1
 8009a36:	d013      	beq.n	8009a60 <_strtod_l+0x238>
 8009a38:	9904      	ldr	r1, [sp, #16]
 8009a3a:	1905      	adds	r5, r0, r4
 8009a3c:	4419      	add	r1, r3
 8009a3e:	9104      	str	r1, [sp, #16]
 8009a40:	4623      	mov	r3, r4
 8009a42:	210a      	movs	r1, #10
 8009a44:	42ab      	cmp	r3, r5
 8009a46:	d113      	bne.n	8009a70 <_strtod_l+0x248>
 8009a48:	1823      	adds	r3, r4, r0
 8009a4a:	2b08      	cmp	r3, #8
 8009a4c:	f104 0401 	add.w	r4, r4, #1
 8009a50:	4404      	add	r4, r0
 8009a52:	dc1b      	bgt.n	8009a8c <_strtod_l+0x264>
 8009a54:	230a      	movs	r3, #10
 8009a56:	9906      	ldr	r1, [sp, #24]
 8009a58:	fb03 2301 	mla	r3, r3, r1, r2
 8009a5c:	9306      	str	r3, [sp, #24]
 8009a5e:	2300      	movs	r3, #0
 8009a60:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009a62:	4618      	mov	r0, r3
 8009a64:	1c51      	adds	r1, r2, #1
 8009a66:	9119      	str	r1, [sp, #100]	; 0x64
 8009a68:	7852      	ldrb	r2, [r2, #1]
 8009a6a:	e7ca      	b.n	8009a02 <_strtod_l+0x1da>
 8009a6c:	4658      	mov	r0, fp
 8009a6e:	e7d3      	b.n	8009a18 <_strtod_l+0x1f0>
 8009a70:	2b08      	cmp	r3, #8
 8009a72:	dc04      	bgt.n	8009a7e <_strtod_l+0x256>
 8009a74:	9f06      	ldr	r7, [sp, #24]
 8009a76:	434f      	muls	r7, r1
 8009a78:	9706      	str	r7, [sp, #24]
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	e7e2      	b.n	8009a44 <_strtod_l+0x21c>
 8009a7e:	1c5f      	adds	r7, r3, #1
 8009a80:	2f10      	cmp	r7, #16
 8009a82:	bfde      	ittt	le
 8009a84:	9f05      	ldrle	r7, [sp, #20]
 8009a86:	434f      	mulle	r7, r1
 8009a88:	9705      	strle	r7, [sp, #20]
 8009a8a:	e7f6      	b.n	8009a7a <_strtod_l+0x252>
 8009a8c:	2c10      	cmp	r4, #16
 8009a8e:	bfdf      	itttt	le
 8009a90:	230a      	movle	r3, #10
 8009a92:	9905      	ldrle	r1, [sp, #20]
 8009a94:	fb03 2301 	mlale	r3, r3, r1, r2
 8009a98:	9305      	strle	r3, [sp, #20]
 8009a9a:	e7e0      	b.n	8009a5e <_strtod_l+0x236>
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	9304      	str	r3, [sp, #16]
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	e77b      	b.n	800999c <_strtod_l+0x174>
 8009aa4:	2700      	movs	r7, #0
 8009aa6:	1cb2      	adds	r2, r6, #2
 8009aa8:	9219      	str	r2, [sp, #100]	; 0x64
 8009aaa:	78b2      	ldrb	r2, [r6, #2]
 8009aac:	e784      	b.n	80099b8 <_strtod_l+0x190>
 8009aae:	bf00      	nop
 8009ab0:	0800e7e8 	.word	0x0800e7e8
 8009ab4:	0800e59c 	.word	0x0800e59c
 8009ab8:	7ff00000 	.word	0x7ff00000
 8009abc:	2701      	movs	r7, #1
 8009abe:	e7f2      	b.n	8009aa6 <_strtod_l+0x27e>
 8009ac0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009ac2:	1c51      	adds	r1, r2, #1
 8009ac4:	9119      	str	r1, [sp, #100]	; 0x64
 8009ac6:	7852      	ldrb	r2, [r2, #1]
 8009ac8:	2a30      	cmp	r2, #48	; 0x30
 8009aca:	d0f9      	beq.n	8009ac0 <_strtod_l+0x298>
 8009acc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009ad0:	2908      	cmp	r1, #8
 8009ad2:	f63f af77 	bhi.w	80099c4 <_strtod_l+0x19c>
 8009ad6:	f04f 0e0a 	mov.w	lr, #10
 8009ada:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8009ade:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009ae0:	9209      	str	r2, [sp, #36]	; 0x24
 8009ae2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009ae4:	1c51      	adds	r1, r2, #1
 8009ae6:	9119      	str	r1, [sp, #100]	; 0x64
 8009ae8:	7852      	ldrb	r2, [r2, #1]
 8009aea:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8009aee:	2d09      	cmp	r5, #9
 8009af0:	d935      	bls.n	8009b5e <_strtod_l+0x336>
 8009af2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009af4:	1b49      	subs	r1, r1, r5
 8009af6:	2908      	cmp	r1, #8
 8009af8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8009afc:	dc02      	bgt.n	8009b04 <_strtod_l+0x2dc>
 8009afe:	4565      	cmp	r5, ip
 8009b00:	bfa8      	it	ge
 8009b02:	4665      	movge	r5, ip
 8009b04:	b107      	cbz	r7, 8009b08 <_strtod_l+0x2e0>
 8009b06:	426d      	negs	r5, r5
 8009b08:	2c00      	cmp	r4, #0
 8009b0a:	d14c      	bne.n	8009ba6 <_strtod_l+0x37e>
 8009b0c:	9907      	ldr	r1, [sp, #28]
 8009b0e:	4301      	orrs	r1, r0
 8009b10:	f47f aecb 	bne.w	80098aa <_strtod_l+0x82>
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	f47f aee4 	bne.w	80098e2 <_strtod_l+0xba>
 8009b1a:	2a69      	cmp	r2, #105	; 0x69
 8009b1c:	d026      	beq.n	8009b6c <_strtod_l+0x344>
 8009b1e:	dc23      	bgt.n	8009b68 <_strtod_l+0x340>
 8009b20:	2a49      	cmp	r2, #73	; 0x49
 8009b22:	d023      	beq.n	8009b6c <_strtod_l+0x344>
 8009b24:	2a4e      	cmp	r2, #78	; 0x4e
 8009b26:	f47f aedc 	bne.w	80098e2 <_strtod_l+0xba>
 8009b2a:	499d      	ldr	r1, [pc, #628]	; (8009da0 <_strtod_l+0x578>)
 8009b2c:	a819      	add	r0, sp, #100	; 0x64
 8009b2e:	f001 fe17 	bl	800b760 <__match>
 8009b32:	2800      	cmp	r0, #0
 8009b34:	f43f aed5 	beq.w	80098e2 <_strtod_l+0xba>
 8009b38:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	2b28      	cmp	r3, #40	; 0x28
 8009b3e:	d12c      	bne.n	8009b9a <_strtod_l+0x372>
 8009b40:	4998      	ldr	r1, [pc, #608]	; (8009da4 <_strtod_l+0x57c>)
 8009b42:	aa1c      	add	r2, sp, #112	; 0x70
 8009b44:	a819      	add	r0, sp, #100	; 0x64
 8009b46:	f001 fe1f 	bl	800b788 <__hexnan>
 8009b4a:	2805      	cmp	r0, #5
 8009b4c:	d125      	bne.n	8009b9a <_strtod_l+0x372>
 8009b4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009b50:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8009b54:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009b58:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009b5c:	e6a5      	b.n	80098aa <_strtod_l+0x82>
 8009b5e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8009b62:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8009b66:	e7bc      	b.n	8009ae2 <_strtod_l+0x2ba>
 8009b68:	2a6e      	cmp	r2, #110	; 0x6e
 8009b6a:	e7dc      	b.n	8009b26 <_strtod_l+0x2fe>
 8009b6c:	498e      	ldr	r1, [pc, #568]	; (8009da8 <_strtod_l+0x580>)
 8009b6e:	a819      	add	r0, sp, #100	; 0x64
 8009b70:	f001 fdf6 	bl	800b760 <__match>
 8009b74:	2800      	cmp	r0, #0
 8009b76:	f43f aeb4 	beq.w	80098e2 <_strtod_l+0xba>
 8009b7a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b7c:	498b      	ldr	r1, [pc, #556]	; (8009dac <_strtod_l+0x584>)
 8009b7e:	3b01      	subs	r3, #1
 8009b80:	a819      	add	r0, sp, #100	; 0x64
 8009b82:	9319      	str	r3, [sp, #100]	; 0x64
 8009b84:	f001 fdec 	bl	800b760 <__match>
 8009b88:	b910      	cbnz	r0, 8009b90 <_strtod_l+0x368>
 8009b8a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	9319      	str	r3, [sp, #100]	; 0x64
 8009b90:	f04f 0800 	mov.w	r8, #0
 8009b94:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8009db0 <_strtod_l+0x588>
 8009b98:	e687      	b.n	80098aa <_strtod_l+0x82>
 8009b9a:	4886      	ldr	r0, [pc, #536]	; (8009db4 <_strtod_l+0x58c>)
 8009b9c:	f002 fdce 	bl	800c73c <nan>
 8009ba0:	4680      	mov	r8, r0
 8009ba2:	4689      	mov	r9, r1
 8009ba4:	e681      	b.n	80098aa <_strtod_l+0x82>
 8009ba6:	9b04      	ldr	r3, [sp, #16]
 8009ba8:	f1bb 0f00 	cmp.w	fp, #0
 8009bac:	bf08      	it	eq
 8009bae:	46a3      	moveq	fp, r4
 8009bb0:	1aeb      	subs	r3, r5, r3
 8009bb2:	2c10      	cmp	r4, #16
 8009bb4:	9806      	ldr	r0, [sp, #24]
 8009bb6:	4626      	mov	r6, r4
 8009bb8:	9307      	str	r3, [sp, #28]
 8009bba:	bfa8      	it	ge
 8009bbc:	2610      	movge	r6, #16
 8009bbe:	f7f6 fc11 	bl	80003e4 <__aeabi_ui2d>
 8009bc2:	2c09      	cmp	r4, #9
 8009bc4:	4680      	mov	r8, r0
 8009bc6:	4689      	mov	r9, r1
 8009bc8:	dd13      	ble.n	8009bf2 <_strtod_l+0x3ca>
 8009bca:	4b7b      	ldr	r3, [pc, #492]	; (8009db8 <_strtod_l+0x590>)
 8009bcc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009bd0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009bd4:	f7f6 fc80 	bl	80004d8 <__aeabi_dmul>
 8009bd8:	4680      	mov	r8, r0
 8009bda:	9805      	ldr	r0, [sp, #20]
 8009bdc:	4689      	mov	r9, r1
 8009bde:	f7f6 fc01 	bl	80003e4 <__aeabi_ui2d>
 8009be2:	4602      	mov	r2, r0
 8009be4:	460b      	mov	r3, r1
 8009be6:	4640      	mov	r0, r8
 8009be8:	4649      	mov	r1, r9
 8009bea:	f7f6 fabf 	bl	800016c <__adddf3>
 8009bee:	4680      	mov	r8, r0
 8009bf0:	4689      	mov	r9, r1
 8009bf2:	2c0f      	cmp	r4, #15
 8009bf4:	dc36      	bgt.n	8009c64 <_strtod_l+0x43c>
 8009bf6:	9b07      	ldr	r3, [sp, #28]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	f43f ae56 	beq.w	80098aa <_strtod_l+0x82>
 8009bfe:	dd22      	ble.n	8009c46 <_strtod_l+0x41e>
 8009c00:	2b16      	cmp	r3, #22
 8009c02:	dc09      	bgt.n	8009c18 <_strtod_l+0x3f0>
 8009c04:	496c      	ldr	r1, [pc, #432]	; (8009db8 <_strtod_l+0x590>)
 8009c06:	4642      	mov	r2, r8
 8009c08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009c0c:	464b      	mov	r3, r9
 8009c0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c12:	f7f6 fc61 	bl	80004d8 <__aeabi_dmul>
 8009c16:	e7c3      	b.n	8009ba0 <_strtod_l+0x378>
 8009c18:	9a07      	ldr	r2, [sp, #28]
 8009c1a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	db20      	blt.n	8009c64 <_strtod_l+0x43c>
 8009c22:	4d65      	ldr	r5, [pc, #404]	; (8009db8 <_strtod_l+0x590>)
 8009c24:	f1c4 040f 	rsb	r4, r4, #15
 8009c28:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009c2c:	4642      	mov	r2, r8
 8009c2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c32:	464b      	mov	r3, r9
 8009c34:	f7f6 fc50 	bl	80004d8 <__aeabi_dmul>
 8009c38:	9b07      	ldr	r3, [sp, #28]
 8009c3a:	1b1c      	subs	r4, r3, r4
 8009c3c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009c40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009c44:	e7e5      	b.n	8009c12 <_strtod_l+0x3ea>
 8009c46:	9b07      	ldr	r3, [sp, #28]
 8009c48:	3316      	adds	r3, #22
 8009c4a:	db0b      	blt.n	8009c64 <_strtod_l+0x43c>
 8009c4c:	9b04      	ldr	r3, [sp, #16]
 8009c4e:	4640      	mov	r0, r8
 8009c50:	1b5d      	subs	r5, r3, r5
 8009c52:	4b59      	ldr	r3, [pc, #356]	; (8009db8 <_strtod_l+0x590>)
 8009c54:	4649      	mov	r1, r9
 8009c56:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009c5a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009c5e:	f7f6 fd65 	bl	800072c <__aeabi_ddiv>
 8009c62:	e79d      	b.n	8009ba0 <_strtod_l+0x378>
 8009c64:	9b07      	ldr	r3, [sp, #28]
 8009c66:	1ba6      	subs	r6, r4, r6
 8009c68:	441e      	add	r6, r3
 8009c6a:	2e00      	cmp	r6, #0
 8009c6c:	dd74      	ble.n	8009d58 <_strtod_l+0x530>
 8009c6e:	f016 030f 	ands.w	r3, r6, #15
 8009c72:	d00a      	beq.n	8009c8a <_strtod_l+0x462>
 8009c74:	4950      	ldr	r1, [pc, #320]	; (8009db8 <_strtod_l+0x590>)
 8009c76:	4642      	mov	r2, r8
 8009c78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009c7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c80:	464b      	mov	r3, r9
 8009c82:	f7f6 fc29 	bl	80004d8 <__aeabi_dmul>
 8009c86:	4680      	mov	r8, r0
 8009c88:	4689      	mov	r9, r1
 8009c8a:	f036 060f 	bics.w	r6, r6, #15
 8009c8e:	d052      	beq.n	8009d36 <_strtod_l+0x50e>
 8009c90:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8009c94:	dd27      	ble.n	8009ce6 <_strtod_l+0x4be>
 8009c96:	f04f 0b00 	mov.w	fp, #0
 8009c9a:	f8cd b010 	str.w	fp, [sp, #16]
 8009c9e:	f8cd b020 	str.w	fp, [sp, #32]
 8009ca2:	f8cd b018 	str.w	fp, [sp, #24]
 8009ca6:	2322      	movs	r3, #34	; 0x22
 8009ca8:	f04f 0800 	mov.w	r8, #0
 8009cac:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8009db0 <_strtod_l+0x588>
 8009cb0:	f8ca 3000 	str.w	r3, [sl]
 8009cb4:	9b08      	ldr	r3, [sp, #32]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	f43f adf7 	beq.w	80098aa <_strtod_l+0x82>
 8009cbc:	4650      	mov	r0, sl
 8009cbe:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009cc0:	f001 fe78 	bl	800b9b4 <_Bfree>
 8009cc4:	4650      	mov	r0, sl
 8009cc6:	9906      	ldr	r1, [sp, #24]
 8009cc8:	f001 fe74 	bl	800b9b4 <_Bfree>
 8009ccc:	4650      	mov	r0, sl
 8009cce:	9904      	ldr	r1, [sp, #16]
 8009cd0:	f001 fe70 	bl	800b9b4 <_Bfree>
 8009cd4:	4650      	mov	r0, sl
 8009cd6:	9908      	ldr	r1, [sp, #32]
 8009cd8:	f001 fe6c 	bl	800b9b4 <_Bfree>
 8009cdc:	4659      	mov	r1, fp
 8009cde:	4650      	mov	r0, sl
 8009ce0:	f001 fe68 	bl	800b9b4 <_Bfree>
 8009ce4:	e5e1      	b.n	80098aa <_strtod_l+0x82>
 8009ce6:	4b35      	ldr	r3, [pc, #212]	; (8009dbc <_strtod_l+0x594>)
 8009ce8:	4640      	mov	r0, r8
 8009cea:	9305      	str	r3, [sp, #20]
 8009cec:	2300      	movs	r3, #0
 8009cee:	4649      	mov	r1, r9
 8009cf0:	461f      	mov	r7, r3
 8009cf2:	1136      	asrs	r6, r6, #4
 8009cf4:	2e01      	cmp	r6, #1
 8009cf6:	dc21      	bgt.n	8009d3c <_strtod_l+0x514>
 8009cf8:	b10b      	cbz	r3, 8009cfe <_strtod_l+0x4d6>
 8009cfa:	4680      	mov	r8, r0
 8009cfc:	4689      	mov	r9, r1
 8009cfe:	4b2f      	ldr	r3, [pc, #188]	; (8009dbc <_strtod_l+0x594>)
 8009d00:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009d04:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009d08:	4642      	mov	r2, r8
 8009d0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d0e:	464b      	mov	r3, r9
 8009d10:	f7f6 fbe2 	bl	80004d8 <__aeabi_dmul>
 8009d14:	4b26      	ldr	r3, [pc, #152]	; (8009db0 <_strtod_l+0x588>)
 8009d16:	460a      	mov	r2, r1
 8009d18:	400b      	ands	r3, r1
 8009d1a:	4929      	ldr	r1, [pc, #164]	; (8009dc0 <_strtod_l+0x598>)
 8009d1c:	4680      	mov	r8, r0
 8009d1e:	428b      	cmp	r3, r1
 8009d20:	d8b9      	bhi.n	8009c96 <_strtod_l+0x46e>
 8009d22:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009d26:	428b      	cmp	r3, r1
 8009d28:	bf86      	itte	hi
 8009d2a:	f04f 38ff 	movhi.w	r8, #4294967295
 8009d2e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8009dc4 <_strtod_l+0x59c>
 8009d32:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009d36:	2300      	movs	r3, #0
 8009d38:	9305      	str	r3, [sp, #20]
 8009d3a:	e07f      	b.n	8009e3c <_strtod_l+0x614>
 8009d3c:	07f2      	lsls	r2, r6, #31
 8009d3e:	d505      	bpl.n	8009d4c <_strtod_l+0x524>
 8009d40:	9b05      	ldr	r3, [sp, #20]
 8009d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d46:	f7f6 fbc7 	bl	80004d8 <__aeabi_dmul>
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	9a05      	ldr	r2, [sp, #20]
 8009d4e:	3701      	adds	r7, #1
 8009d50:	3208      	adds	r2, #8
 8009d52:	1076      	asrs	r6, r6, #1
 8009d54:	9205      	str	r2, [sp, #20]
 8009d56:	e7cd      	b.n	8009cf4 <_strtod_l+0x4cc>
 8009d58:	d0ed      	beq.n	8009d36 <_strtod_l+0x50e>
 8009d5a:	4276      	negs	r6, r6
 8009d5c:	f016 020f 	ands.w	r2, r6, #15
 8009d60:	d00a      	beq.n	8009d78 <_strtod_l+0x550>
 8009d62:	4b15      	ldr	r3, [pc, #84]	; (8009db8 <_strtod_l+0x590>)
 8009d64:	4640      	mov	r0, r8
 8009d66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d6a:	4649      	mov	r1, r9
 8009d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d70:	f7f6 fcdc 	bl	800072c <__aeabi_ddiv>
 8009d74:	4680      	mov	r8, r0
 8009d76:	4689      	mov	r9, r1
 8009d78:	1136      	asrs	r6, r6, #4
 8009d7a:	d0dc      	beq.n	8009d36 <_strtod_l+0x50e>
 8009d7c:	2e1f      	cmp	r6, #31
 8009d7e:	dd23      	ble.n	8009dc8 <_strtod_l+0x5a0>
 8009d80:	f04f 0b00 	mov.w	fp, #0
 8009d84:	f8cd b010 	str.w	fp, [sp, #16]
 8009d88:	f8cd b020 	str.w	fp, [sp, #32]
 8009d8c:	f8cd b018 	str.w	fp, [sp, #24]
 8009d90:	2322      	movs	r3, #34	; 0x22
 8009d92:	f04f 0800 	mov.w	r8, #0
 8009d96:	f04f 0900 	mov.w	r9, #0
 8009d9a:	f8ca 3000 	str.w	r3, [sl]
 8009d9e:	e789      	b.n	8009cb4 <_strtod_l+0x48c>
 8009da0:	0800e56d 	.word	0x0800e56d
 8009da4:	0800e5b0 	.word	0x0800e5b0
 8009da8:	0800e565 	.word	0x0800e565
 8009dac:	0800e6f4 	.word	0x0800e6f4
 8009db0:	7ff00000 	.word	0x7ff00000
 8009db4:	0800e9a0 	.word	0x0800e9a0
 8009db8:	0800e880 	.word	0x0800e880
 8009dbc:	0800e858 	.word	0x0800e858
 8009dc0:	7ca00000 	.word	0x7ca00000
 8009dc4:	7fefffff 	.word	0x7fefffff
 8009dc8:	f016 0310 	ands.w	r3, r6, #16
 8009dcc:	bf18      	it	ne
 8009dce:	236a      	movne	r3, #106	; 0x6a
 8009dd0:	4640      	mov	r0, r8
 8009dd2:	9305      	str	r3, [sp, #20]
 8009dd4:	4649      	mov	r1, r9
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	4fb0      	ldr	r7, [pc, #704]	; (800a09c <_strtod_l+0x874>)
 8009dda:	07f2      	lsls	r2, r6, #31
 8009ddc:	d504      	bpl.n	8009de8 <_strtod_l+0x5c0>
 8009dde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009de2:	f7f6 fb79 	bl	80004d8 <__aeabi_dmul>
 8009de6:	2301      	movs	r3, #1
 8009de8:	1076      	asrs	r6, r6, #1
 8009dea:	f107 0708 	add.w	r7, r7, #8
 8009dee:	d1f4      	bne.n	8009dda <_strtod_l+0x5b2>
 8009df0:	b10b      	cbz	r3, 8009df6 <_strtod_l+0x5ce>
 8009df2:	4680      	mov	r8, r0
 8009df4:	4689      	mov	r9, r1
 8009df6:	9b05      	ldr	r3, [sp, #20]
 8009df8:	b1c3      	cbz	r3, 8009e2c <_strtod_l+0x604>
 8009dfa:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009dfe:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	4649      	mov	r1, r9
 8009e06:	dd11      	ble.n	8009e2c <_strtod_l+0x604>
 8009e08:	2b1f      	cmp	r3, #31
 8009e0a:	f340 8127 	ble.w	800a05c <_strtod_l+0x834>
 8009e0e:	2b34      	cmp	r3, #52	; 0x34
 8009e10:	bfd8      	it	le
 8009e12:	f04f 33ff 	movle.w	r3, #4294967295
 8009e16:	f04f 0800 	mov.w	r8, #0
 8009e1a:	bfcf      	iteee	gt
 8009e1c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009e20:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009e24:	fa03 f202 	lslle.w	r2, r3, r2
 8009e28:	ea02 0901 	andle.w	r9, r2, r1
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	2300      	movs	r3, #0
 8009e30:	4640      	mov	r0, r8
 8009e32:	4649      	mov	r1, r9
 8009e34:	f7f6 fdb8 	bl	80009a8 <__aeabi_dcmpeq>
 8009e38:	2800      	cmp	r0, #0
 8009e3a:	d1a1      	bne.n	8009d80 <_strtod_l+0x558>
 8009e3c:	9b06      	ldr	r3, [sp, #24]
 8009e3e:	465a      	mov	r2, fp
 8009e40:	9300      	str	r3, [sp, #0]
 8009e42:	4650      	mov	r0, sl
 8009e44:	4623      	mov	r3, r4
 8009e46:	9908      	ldr	r1, [sp, #32]
 8009e48:	f001 fe1c 	bl	800ba84 <__s2b>
 8009e4c:	9008      	str	r0, [sp, #32]
 8009e4e:	2800      	cmp	r0, #0
 8009e50:	f43f af21 	beq.w	8009c96 <_strtod_l+0x46e>
 8009e54:	9b04      	ldr	r3, [sp, #16]
 8009e56:	f04f 0b00 	mov.w	fp, #0
 8009e5a:	1b5d      	subs	r5, r3, r5
 8009e5c:	9b07      	ldr	r3, [sp, #28]
 8009e5e:	f8cd b010 	str.w	fp, [sp, #16]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	bfb4      	ite	lt
 8009e66:	462b      	movlt	r3, r5
 8009e68:	2300      	movge	r3, #0
 8009e6a:	930e      	str	r3, [sp, #56]	; 0x38
 8009e6c:	9b07      	ldr	r3, [sp, #28]
 8009e6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009e72:	9314      	str	r3, [sp, #80]	; 0x50
 8009e74:	9b08      	ldr	r3, [sp, #32]
 8009e76:	4650      	mov	r0, sl
 8009e78:	6859      	ldr	r1, [r3, #4]
 8009e7a:	f001 fd5b 	bl	800b934 <_Balloc>
 8009e7e:	9006      	str	r0, [sp, #24]
 8009e80:	2800      	cmp	r0, #0
 8009e82:	f43f af10 	beq.w	8009ca6 <_strtod_l+0x47e>
 8009e86:	9b08      	ldr	r3, [sp, #32]
 8009e88:	300c      	adds	r0, #12
 8009e8a:	691a      	ldr	r2, [r3, #16]
 8009e8c:	f103 010c 	add.w	r1, r3, #12
 8009e90:	3202      	adds	r2, #2
 8009e92:	0092      	lsls	r2, r2, #2
 8009e94:	f001 fd40 	bl	800b918 <memcpy>
 8009e98:	ab1c      	add	r3, sp, #112	; 0x70
 8009e9a:	9301      	str	r3, [sp, #4]
 8009e9c:	ab1b      	add	r3, sp, #108	; 0x6c
 8009e9e:	9300      	str	r3, [sp, #0]
 8009ea0:	4642      	mov	r2, r8
 8009ea2:	464b      	mov	r3, r9
 8009ea4:	4650      	mov	r0, sl
 8009ea6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8009eaa:	f002 f92d 	bl	800c108 <__d2b>
 8009eae:	901a      	str	r0, [sp, #104]	; 0x68
 8009eb0:	2800      	cmp	r0, #0
 8009eb2:	f43f aef8 	beq.w	8009ca6 <_strtod_l+0x47e>
 8009eb6:	2101      	movs	r1, #1
 8009eb8:	4650      	mov	r0, sl
 8009eba:	f001 fe7b 	bl	800bbb4 <__i2b>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	9004      	str	r0, [sp, #16]
 8009ec2:	2800      	cmp	r0, #0
 8009ec4:	f43f aeef 	beq.w	8009ca6 <_strtod_l+0x47e>
 8009ec8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009eca:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009ecc:	2d00      	cmp	r5, #0
 8009ece:	bfab      	itete	ge
 8009ed0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009ed2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8009ed4:	18ee      	addge	r6, r5, r3
 8009ed6:	1b5c      	sublt	r4, r3, r5
 8009ed8:	9b05      	ldr	r3, [sp, #20]
 8009eda:	bfa8      	it	ge
 8009edc:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8009ede:	eba5 0503 	sub.w	r5, r5, r3
 8009ee2:	4415      	add	r5, r2
 8009ee4:	4b6e      	ldr	r3, [pc, #440]	; (800a0a0 <_strtod_l+0x878>)
 8009ee6:	f105 35ff 	add.w	r5, r5, #4294967295
 8009eea:	bfb8      	it	lt
 8009eec:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8009eee:	429d      	cmp	r5, r3
 8009ef0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009ef4:	f280 80c4 	bge.w	800a080 <_strtod_l+0x858>
 8009ef8:	1b5b      	subs	r3, r3, r5
 8009efa:	2b1f      	cmp	r3, #31
 8009efc:	f04f 0701 	mov.w	r7, #1
 8009f00:	eba2 0203 	sub.w	r2, r2, r3
 8009f04:	f300 80b1 	bgt.w	800a06a <_strtod_l+0x842>
 8009f08:	2500      	movs	r5, #0
 8009f0a:	fa07 f303 	lsl.w	r3, r7, r3
 8009f0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f10:	18b7      	adds	r7, r6, r2
 8009f12:	9b05      	ldr	r3, [sp, #20]
 8009f14:	42be      	cmp	r6, r7
 8009f16:	4414      	add	r4, r2
 8009f18:	441c      	add	r4, r3
 8009f1a:	4633      	mov	r3, r6
 8009f1c:	bfa8      	it	ge
 8009f1e:	463b      	movge	r3, r7
 8009f20:	42a3      	cmp	r3, r4
 8009f22:	bfa8      	it	ge
 8009f24:	4623      	movge	r3, r4
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	bfc2      	ittt	gt
 8009f2a:	1aff      	subgt	r7, r7, r3
 8009f2c:	1ae4      	subgt	r4, r4, r3
 8009f2e:	1af6      	subgt	r6, r6, r3
 8009f30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	dd17      	ble.n	8009f66 <_strtod_l+0x73e>
 8009f36:	461a      	mov	r2, r3
 8009f38:	4650      	mov	r0, sl
 8009f3a:	9904      	ldr	r1, [sp, #16]
 8009f3c:	f001 fef8 	bl	800bd30 <__pow5mult>
 8009f40:	9004      	str	r0, [sp, #16]
 8009f42:	2800      	cmp	r0, #0
 8009f44:	f43f aeaf 	beq.w	8009ca6 <_strtod_l+0x47e>
 8009f48:	4601      	mov	r1, r0
 8009f4a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009f4c:	4650      	mov	r0, sl
 8009f4e:	f001 fe47 	bl	800bbe0 <__multiply>
 8009f52:	9009      	str	r0, [sp, #36]	; 0x24
 8009f54:	2800      	cmp	r0, #0
 8009f56:	f43f aea6 	beq.w	8009ca6 <_strtod_l+0x47e>
 8009f5a:	4650      	mov	r0, sl
 8009f5c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009f5e:	f001 fd29 	bl	800b9b4 <_Bfree>
 8009f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f64:	931a      	str	r3, [sp, #104]	; 0x68
 8009f66:	2f00      	cmp	r7, #0
 8009f68:	f300 808e 	bgt.w	800a088 <_strtod_l+0x860>
 8009f6c:	9b07      	ldr	r3, [sp, #28]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	dd08      	ble.n	8009f84 <_strtod_l+0x75c>
 8009f72:	4650      	mov	r0, sl
 8009f74:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009f76:	9906      	ldr	r1, [sp, #24]
 8009f78:	f001 feda 	bl	800bd30 <__pow5mult>
 8009f7c:	9006      	str	r0, [sp, #24]
 8009f7e:	2800      	cmp	r0, #0
 8009f80:	f43f ae91 	beq.w	8009ca6 <_strtod_l+0x47e>
 8009f84:	2c00      	cmp	r4, #0
 8009f86:	dd08      	ble.n	8009f9a <_strtod_l+0x772>
 8009f88:	4622      	mov	r2, r4
 8009f8a:	4650      	mov	r0, sl
 8009f8c:	9906      	ldr	r1, [sp, #24]
 8009f8e:	f001 ff29 	bl	800bde4 <__lshift>
 8009f92:	9006      	str	r0, [sp, #24]
 8009f94:	2800      	cmp	r0, #0
 8009f96:	f43f ae86 	beq.w	8009ca6 <_strtod_l+0x47e>
 8009f9a:	2e00      	cmp	r6, #0
 8009f9c:	dd08      	ble.n	8009fb0 <_strtod_l+0x788>
 8009f9e:	4632      	mov	r2, r6
 8009fa0:	4650      	mov	r0, sl
 8009fa2:	9904      	ldr	r1, [sp, #16]
 8009fa4:	f001 ff1e 	bl	800bde4 <__lshift>
 8009fa8:	9004      	str	r0, [sp, #16]
 8009faa:	2800      	cmp	r0, #0
 8009fac:	f43f ae7b 	beq.w	8009ca6 <_strtod_l+0x47e>
 8009fb0:	4650      	mov	r0, sl
 8009fb2:	9a06      	ldr	r2, [sp, #24]
 8009fb4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009fb6:	f001 ffa1 	bl	800befc <__mdiff>
 8009fba:	4683      	mov	fp, r0
 8009fbc:	2800      	cmp	r0, #0
 8009fbe:	f43f ae72 	beq.w	8009ca6 <_strtod_l+0x47e>
 8009fc2:	2400      	movs	r4, #0
 8009fc4:	68c3      	ldr	r3, [r0, #12]
 8009fc6:	9904      	ldr	r1, [sp, #16]
 8009fc8:	60c4      	str	r4, [r0, #12]
 8009fca:	930b      	str	r3, [sp, #44]	; 0x2c
 8009fcc:	f001 ff7a 	bl	800bec4 <__mcmp>
 8009fd0:	42a0      	cmp	r0, r4
 8009fd2:	da6b      	bge.n	800a0ac <_strtod_l+0x884>
 8009fd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fd6:	ea53 0308 	orrs.w	r3, r3, r8
 8009fda:	f040 8091 	bne.w	800a100 <_strtod_l+0x8d8>
 8009fde:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	f040 808c 	bne.w	800a100 <_strtod_l+0x8d8>
 8009fe8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009fec:	0d1b      	lsrs	r3, r3, #20
 8009fee:	051b      	lsls	r3, r3, #20
 8009ff0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009ff4:	f240 8084 	bls.w	800a100 <_strtod_l+0x8d8>
 8009ff8:	f8db 3014 	ldr.w	r3, [fp, #20]
 8009ffc:	b91b      	cbnz	r3, 800a006 <_strtod_l+0x7de>
 8009ffe:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a002:	2b01      	cmp	r3, #1
 800a004:	dd7c      	ble.n	800a100 <_strtod_l+0x8d8>
 800a006:	4659      	mov	r1, fp
 800a008:	2201      	movs	r2, #1
 800a00a:	4650      	mov	r0, sl
 800a00c:	f001 feea 	bl	800bde4 <__lshift>
 800a010:	9904      	ldr	r1, [sp, #16]
 800a012:	4683      	mov	fp, r0
 800a014:	f001 ff56 	bl	800bec4 <__mcmp>
 800a018:	2800      	cmp	r0, #0
 800a01a:	dd71      	ble.n	800a100 <_strtod_l+0x8d8>
 800a01c:	9905      	ldr	r1, [sp, #20]
 800a01e:	464b      	mov	r3, r9
 800a020:	4a20      	ldr	r2, [pc, #128]	; (800a0a4 <_strtod_l+0x87c>)
 800a022:	2900      	cmp	r1, #0
 800a024:	f000 808c 	beq.w	800a140 <_strtod_l+0x918>
 800a028:	ea02 0109 	and.w	r1, r2, r9
 800a02c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a030:	f300 8086 	bgt.w	800a140 <_strtod_l+0x918>
 800a034:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a038:	f77f aeaa 	ble.w	8009d90 <_strtod_l+0x568>
 800a03c:	4640      	mov	r0, r8
 800a03e:	4649      	mov	r1, r9
 800a040:	4b19      	ldr	r3, [pc, #100]	; (800a0a8 <_strtod_l+0x880>)
 800a042:	2200      	movs	r2, #0
 800a044:	f7f6 fa48 	bl	80004d8 <__aeabi_dmul>
 800a048:	460b      	mov	r3, r1
 800a04a:	4303      	orrs	r3, r0
 800a04c:	bf08      	it	eq
 800a04e:	2322      	moveq	r3, #34	; 0x22
 800a050:	4680      	mov	r8, r0
 800a052:	4689      	mov	r9, r1
 800a054:	bf08      	it	eq
 800a056:	f8ca 3000 	streq.w	r3, [sl]
 800a05a:	e62f      	b.n	8009cbc <_strtod_l+0x494>
 800a05c:	f04f 32ff 	mov.w	r2, #4294967295
 800a060:	fa02 f303 	lsl.w	r3, r2, r3
 800a064:	ea03 0808 	and.w	r8, r3, r8
 800a068:	e6e0      	b.n	8009e2c <_strtod_l+0x604>
 800a06a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800a06e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800a072:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800a076:	35e2      	adds	r5, #226	; 0xe2
 800a078:	fa07 f505 	lsl.w	r5, r7, r5
 800a07c:	970f      	str	r7, [sp, #60]	; 0x3c
 800a07e:	e747      	b.n	8009f10 <_strtod_l+0x6e8>
 800a080:	2301      	movs	r3, #1
 800a082:	2500      	movs	r5, #0
 800a084:	930f      	str	r3, [sp, #60]	; 0x3c
 800a086:	e743      	b.n	8009f10 <_strtod_l+0x6e8>
 800a088:	463a      	mov	r2, r7
 800a08a:	4650      	mov	r0, sl
 800a08c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a08e:	f001 fea9 	bl	800bde4 <__lshift>
 800a092:	901a      	str	r0, [sp, #104]	; 0x68
 800a094:	2800      	cmp	r0, #0
 800a096:	f47f af69 	bne.w	8009f6c <_strtod_l+0x744>
 800a09a:	e604      	b.n	8009ca6 <_strtod_l+0x47e>
 800a09c:	0800e5c8 	.word	0x0800e5c8
 800a0a0:	fffffc02 	.word	0xfffffc02
 800a0a4:	7ff00000 	.word	0x7ff00000
 800a0a8:	39500000 	.word	0x39500000
 800a0ac:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a0b0:	d165      	bne.n	800a17e <_strtod_l+0x956>
 800a0b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a0b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a0b8:	b35a      	cbz	r2, 800a112 <_strtod_l+0x8ea>
 800a0ba:	4a99      	ldr	r2, [pc, #612]	; (800a320 <_strtod_l+0xaf8>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d12b      	bne.n	800a118 <_strtod_l+0x8f0>
 800a0c0:	9b05      	ldr	r3, [sp, #20]
 800a0c2:	4641      	mov	r1, r8
 800a0c4:	b303      	cbz	r3, 800a108 <_strtod_l+0x8e0>
 800a0c6:	464a      	mov	r2, r9
 800a0c8:	4b96      	ldr	r3, [pc, #600]	; (800a324 <_strtod_l+0xafc>)
 800a0ca:	4013      	ands	r3, r2
 800a0cc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a0d0:	f04f 32ff 	mov.w	r2, #4294967295
 800a0d4:	d81b      	bhi.n	800a10e <_strtod_l+0x8e6>
 800a0d6:	0d1b      	lsrs	r3, r3, #20
 800a0d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a0dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a0e0:	4299      	cmp	r1, r3
 800a0e2:	d119      	bne.n	800a118 <_strtod_l+0x8f0>
 800a0e4:	4b90      	ldr	r3, [pc, #576]	; (800a328 <_strtod_l+0xb00>)
 800a0e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	d102      	bne.n	800a0f2 <_strtod_l+0x8ca>
 800a0ec:	3101      	adds	r1, #1
 800a0ee:	f43f adda 	beq.w	8009ca6 <_strtod_l+0x47e>
 800a0f2:	f04f 0800 	mov.w	r8, #0
 800a0f6:	4b8b      	ldr	r3, [pc, #556]	; (800a324 <_strtod_l+0xafc>)
 800a0f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0fa:	401a      	ands	r2, r3
 800a0fc:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800a100:	9b05      	ldr	r3, [sp, #20]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d19a      	bne.n	800a03c <_strtod_l+0x814>
 800a106:	e5d9      	b.n	8009cbc <_strtod_l+0x494>
 800a108:	f04f 33ff 	mov.w	r3, #4294967295
 800a10c:	e7e8      	b.n	800a0e0 <_strtod_l+0x8b8>
 800a10e:	4613      	mov	r3, r2
 800a110:	e7e6      	b.n	800a0e0 <_strtod_l+0x8b8>
 800a112:	ea53 0308 	orrs.w	r3, r3, r8
 800a116:	d081      	beq.n	800a01c <_strtod_l+0x7f4>
 800a118:	b1e5      	cbz	r5, 800a154 <_strtod_l+0x92c>
 800a11a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a11c:	421d      	tst	r5, r3
 800a11e:	d0ef      	beq.n	800a100 <_strtod_l+0x8d8>
 800a120:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a122:	4640      	mov	r0, r8
 800a124:	4649      	mov	r1, r9
 800a126:	9a05      	ldr	r2, [sp, #20]
 800a128:	b1c3      	cbz	r3, 800a15c <_strtod_l+0x934>
 800a12a:	f7ff fb59 	bl	80097e0 <sulp>
 800a12e:	4602      	mov	r2, r0
 800a130:	460b      	mov	r3, r1
 800a132:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a136:	f7f6 f819 	bl	800016c <__adddf3>
 800a13a:	4680      	mov	r8, r0
 800a13c:	4689      	mov	r9, r1
 800a13e:	e7df      	b.n	800a100 <_strtod_l+0x8d8>
 800a140:	4013      	ands	r3, r2
 800a142:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a146:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a14a:	f04f 38ff 	mov.w	r8, #4294967295
 800a14e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a152:	e7d5      	b.n	800a100 <_strtod_l+0x8d8>
 800a154:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a156:	ea13 0f08 	tst.w	r3, r8
 800a15a:	e7e0      	b.n	800a11e <_strtod_l+0x8f6>
 800a15c:	f7ff fb40 	bl	80097e0 <sulp>
 800a160:	4602      	mov	r2, r0
 800a162:	460b      	mov	r3, r1
 800a164:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a168:	f7f5 fffe 	bl	8000168 <__aeabi_dsub>
 800a16c:	2200      	movs	r2, #0
 800a16e:	2300      	movs	r3, #0
 800a170:	4680      	mov	r8, r0
 800a172:	4689      	mov	r9, r1
 800a174:	f7f6 fc18 	bl	80009a8 <__aeabi_dcmpeq>
 800a178:	2800      	cmp	r0, #0
 800a17a:	d0c1      	beq.n	800a100 <_strtod_l+0x8d8>
 800a17c:	e608      	b.n	8009d90 <_strtod_l+0x568>
 800a17e:	4658      	mov	r0, fp
 800a180:	9904      	ldr	r1, [sp, #16]
 800a182:	f002 f81d 	bl	800c1c0 <__ratio>
 800a186:	2200      	movs	r2, #0
 800a188:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a18c:	4606      	mov	r6, r0
 800a18e:	460f      	mov	r7, r1
 800a190:	f7f6 fc1e 	bl	80009d0 <__aeabi_dcmple>
 800a194:	2800      	cmp	r0, #0
 800a196:	d070      	beq.n	800a27a <_strtod_l+0xa52>
 800a198:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d042      	beq.n	800a224 <_strtod_l+0x9fc>
 800a19e:	2600      	movs	r6, #0
 800a1a0:	4f62      	ldr	r7, [pc, #392]	; (800a32c <_strtod_l+0xb04>)
 800a1a2:	4d62      	ldr	r5, [pc, #392]	; (800a32c <_strtod_l+0xb04>)
 800a1a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a1aa:	0d1b      	lsrs	r3, r3, #20
 800a1ac:	051b      	lsls	r3, r3, #20
 800a1ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a1b2:	4b5f      	ldr	r3, [pc, #380]	; (800a330 <_strtod_l+0xb08>)
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	f040 80c3 	bne.w	800a340 <_strtod_l+0xb18>
 800a1ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1bc:	4640      	mov	r0, r8
 800a1be:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800a1c2:	4649      	mov	r1, r9
 800a1c4:	f001 ff26 	bl	800c014 <__ulp>
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	460b      	mov	r3, r1
 800a1cc:	4630      	mov	r0, r6
 800a1ce:	4639      	mov	r1, r7
 800a1d0:	f7f6 f982 	bl	80004d8 <__aeabi_dmul>
 800a1d4:	4642      	mov	r2, r8
 800a1d6:	464b      	mov	r3, r9
 800a1d8:	f7f5 ffc8 	bl	800016c <__adddf3>
 800a1dc:	460b      	mov	r3, r1
 800a1de:	4951      	ldr	r1, [pc, #324]	; (800a324 <_strtod_l+0xafc>)
 800a1e0:	4a54      	ldr	r2, [pc, #336]	; (800a334 <_strtod_l+0xb0c>)
 800a1e2:	4019      	ands	r1, r3
 800a1e4:	4291      	cmp	r1, r2
 800a1e6:	4680      	mov	r8, r0
 800a1e8:	d95d      	bls.n	800a2a6 <_strtod_l+0xa7e>
 800a1ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a1ec:	4b4e      	ldr	r3, [pc, #312]	; (800a328 <_strtod_l+0xb00>)
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d103      	bne.n	800a1fa <_strtod_l+0x9d2>
 800a1f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1f4:	3301      	adds	r3, #1
 800a1f6:	f43f ad56 	beq.w	8009ca6 <_strtod_l+0x47e>
 800a1fa:	f04f 38ff 	mov.w	r8, #4294967295
 800a1fe:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800a328 <_strtod_l+0xb00>
 800a202:	4650      	mov	r0, sl
 800a204:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a206:	f001 fbd5 	bl	800b9b4 <_Bfree>
 800a20a:	4650      	mov	r0, sl
 800a20c:	9906      	ldr	r1, [sp, #24]
 800a20e:	f001 fbd1 	bl	800b9b4 <_Bfree>
 800a212:	4650      	mov	r0, sl
 800a214:	9904      	ldr	r1, [sp, #16]
 800a216:	f001 fbcd 	bl	800b9b4 <_Bfree>
 800a21a:	4659      	mov	r1, fp
 800a21c:	4650      	mov	r0, sl
 800a21e:	f001 fbc9 	bl	800b9b4 <_Bfree>
 800a222:	e627      	b.n	8009e74 <_strtod_l+0x64c>
 800a224:	f1b8 0f00 	cmp.w	r8, #0
 800a228:	d119      	bne.n	800a25e <_strtod_l+0xa36>
 800a22a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a22c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a230:	b9e3      	cbnz	r3, 800a26c <_strtod_l+0xa44>
 800a232:	2200      	movs	r2, #0
 800a234:	4630      	mov	r0, r6
 800a236:	4639      	mov	r1, r7
 800a238:	4b3c      	ldr	r3, [pc, #240]	; (800a32c <_strtod_l+0xb04>)
 800a23a:	f7f6 fbbf 	bl	80009bc <__aeabi_dcmplt>
 800a23e:	b9c8      	cbnz	r0, 800a274 <_strtod_l+0xa4c>
 800a240:	2200      	movs	r2, #0
 800a242:	4630      	mov	r0, r6
 800a244:	4639      	mov	r1, r7
 800a246:	4b3c      	ldr	r3, [pc, #240]	; (800a338 <_strtod_l+0xb10>)
 800a248:	f7f6 f946 	bl	80004d8 <__aeabi_dmul>
 800a24c:	4604      	mov	r4, r0
 800a24e:	460d      	mov	r5, r1
 800a250:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a254:	9416      	str	r4, [sp, #88]	; 0x58
 800a256:	9317      	str	r3, [sp, #92]	; 0x5c
 800a258:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800a25c:	e7a2      	b.n	800a1a4 <_strtod_l+0x97c>
 800a25e:	f1b8 0f01 	cmp.w	r8, #1
 800a262:	d103      	bne.n	800a26c <_strtod_l+0xa44>
 800a264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a266:	2b00      	cmp	r3, #0
 800a268:	f43f ad92 	beq.w	8009d90 <_strtod_l+0x568>
 800a26c:	2600      	movs	r6, #0
 800a26e:	2400      	movs	r4, #0
 800a270:	4f32      	ldr	r7, [pc, #200]	; (800a33c <_strtod_l+0xb14>)
 800a272:	e796      	b.n	800a1a2 <_strtod_l+0x97a>
 800a274:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a276:	4d30      	ldr	r5, [pc, #192]	; (800a338 <_strtod_l+0xb10>)
 800a278:	e7ea      	b.n	800a250 <_strtod_l+0xa28>
 800a27a:	4b2f      	ldr	r3, [pc, #188]	; (800a338 <_strtod_l+0xb10>)
 800a27c:	2200      	movs	r2, #0
 800a27e:	4630      	mov	r0, r6
 800a280:	4639      	mov	r1, r7
 800a282:	f7f6 f929 	bl	80004d8 <__aeabi_dmul>
 800a286:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a288:	4604      	mov	r4, r0
 800a28a:	460d      	mov	r5, r1
 800a28c:	b933      	cbnz	r3, 800a29c <_strtod_l+0xa74>
 800a28e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a292:	9010      	str	r0, [sp, #64]	; 0x40
 800a294:	9311      	str	r3, [sp, #68]	; 0x44
 800a296:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a29a:	e783      	b.n	800a1a4 <_strtod_l+0x97c>
 800a29c:	4602      	mov	r2, r0
 800a29e:	460b      	mov	r3, r1
 800a2a0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a2a4:	e7f7      	b.n	800a296 <_strtod_l+0xa6e>
 800a2a6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a2aa:	9b05      	ldr	r3, [sp, #20]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d1a8      	bne.n	800a202 <_strtod_l+0x9da>
 800a2b0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a2b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a2b6:	0d1b      	lsrs	r3, r3, #20
 800a2b8:	051b      	lsls	r3, r3, #20
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d1a1      	bne.n	800a202 <_strtod_l+0x9da>
 800a2be:	4620      	mov	r0, r4
 800a2c0:	4629      	mov	r1, r5
 800a2c2:	f7f6 ff4b 	bl	800115c <__aeabi_d2lz>
 800a2c6:	f7f6 f8d9 	bl	800047c <__aeabi_l2d>
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	460b      	mov	r3, r1
 800a2ce:	4620      	mov	r0, r4
 800a2d0:	4629      	mov	r1, r5
 800a2d2:	f7f5 ff49 	bl	8000168 <__aeabi_dsub>
 800a2d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a2d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a2dc:	ea43 0308 	orr.w	r3, r3, r8
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	4604      	mov	r4, r0
 800a2e4:	460d      	mov	r5, r1
 800a2e6:	d066      	beq.n	800a3b6 <_strtod_l+0xb8e>
 800a2e8:	a309      	add	r3, pc, #36	; (adr r3, 800a310 <_strtod_l+0xae8>)
 800a2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ee:	f7f6 fb65 	bl	80009bc <__aeabi_dcmplt>
 800a2f2:	2800      	cmp	r0, #0
 800a2f4:	f47f ace2 	bne.w	8009cbc <_strtod_l+0x494>
 800a2f8:	a307      	add	r3, pc, #28	; (adr r3, 800a318 <_strtod_l+0xaf0>)
 800a2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fe:	4620      	mov	r0, r4
 800a300:	4629      	mov	r1, r5
 800a302:	f7f6 fb79 	bl	80009f8 <__aeabi_dcmpgt>
 800a306:	2800      	cmp	r0, #0
 800a308:	f43f af7b 	beq.w	800a202 <_strtod_l+0x9da>
 800a30c:	e4d6      	b.n	8009cbc <_strtod_l+0x494>
 800a30e:	bf00      	nop
 800a310:	94a03595 	.word	0x94a03595
 800a314:	3fdfffff 	.word	0x3fdfffff
 800a318:	35afe535 	.word	0x35afe535
 800a31c:	3fe00000 	.word	0x3fe00000
 800a320:	000fffff 	.word	0x000fffff
 800a324:	7ff00000 	.word	0x7ff00000
 800a328:	7fefffff 	.word	0x7fefffff
 800a32c:	3ff00000 	.word	0x3ff00000
 800a330:	7fe00000 	.word	0x7fe00000
 800a334:	7c9fffff 	.word	0x7c9fffff
 800a338:	3fe00000 	.word	0x3fe00000
 800a33c:	bff00000 	.word	0xbff00000
 800a340:	9b05      	ldr	r3, [sp, #20]
 800a342:	b313      	cbz	r3, 800a38a <_strtod_l+0xb62>
 800a344:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a346:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a34a:	d81e      	bhi.n	800a38a <_strtod_l+0xb62>
 800a34c:	a326      	add	r3, pc, #152	; (adr r3, 800a3e8 <_strtod_l+0xbc0>)
 800a34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a352:	4620      	mov	r0, r4
 800a354:	4629      	mov	r1, r5
 800a356:	f7f6 fb3b 	bl	80009d0 <__aeabi_dcmple>
 800a35a:	b190      	cbz	r0, 800a382 <_strtod_l+0xb5a>
 800a35c:	4629      	mov	r1, r5
 800a35e:	4620      	mov	r0, r4
 800a360:	f7f6 fb92 	bl	8000a88 <__aeabi_d2uiz>
 800a364:	2801      	cmp	r0, #1
 800a366:	bf38      	it	cc
 800a368:	2001      	movcc	r0, #1
 800a36a:	f7f6 f83b 	bl	80003e4 <__aeabi_ui2d>
 800a36e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a370:	4604      	mov	r4, r0
 800a372:	460d      	mov	r5, r1
 800a374:	b9d3      	cbnz	r3, 800a3ac <_strtod_l+0xb84>
 800a376:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a37a:	9012      	str	r0, [sp, #72]	; 0x48
 800a37c:	9313      	str	r3, [sp, #76]	; 0x4c
 800a37e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800a382:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a384:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800a388:	1a9f      	subs	r7, r3, r2
 800a38a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a38e:	f001 fe41 	bl	800c014 <__ulp>
 800a392:	4602      	mov	r2, r0
 800a394:	460b      	mov	r3, r1
 800a396:	4630      	mov	r0, r6
 800a398:	4639      	mov	r1, r7
 800a39a:	f7f6 f89d 	bl	80004d8 <__aeabi_dmul>
 800a39e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a3a2:	f7f5 fee3 	bl	800016c <__adddf3>
 800a3a6:	4680      	mov	r8, r0
 800a3a8:	4689      	mov	r9, r1
 800a3aa:	e77e      	b.n	800a2aa <_strtod_l+0xa82>
 800a3ac:	4602      	mov	r2, r0
 800a3ae:	460b      	mov	r3, r1
 800a3b0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800a3b4:	e7e3      	b.n	800a37e <_strtod_l+0xb56>
 800a3b6:	a30e      	add	r3, pc, #56	; (adr r3, 800a3f0 <_strtod_l+0xbc8>)
 800a3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3bc:	f7f6 fafe 	bl	80009bc <__aeabi_dcmplt>
 800a3c0:	e7a1      	b.n	800a306 <_strtod_l+0xade>
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	930a      	str	r3, [sp, #40]	; 0x28
 800a3c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a3c8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a3ca:	6013      	str	r3, [r2, #0]
 800a3cc:	f7ff ba71 	b.w	80098b2 <_strtod_l+0x8a>
 800a3d0:	2a65      	cmp	r2, #101	; 0x65
 800a3d2:	f43f ab63 	beq.w	8009a9c <_strtod_l+0x274>
 800a3d6:	2a45      	cmp	r2, #69	; 0x45
 800a3d8:	f43f ab60 	beq.w	8009a9c <_strtod_l+0x274>
 800a3dc:	2301      	movs	r3, #1
 800a3de:	f7ff bb95 	b.w	8009b0c <_strtod_l+0x2e4>
 800a3e2:	bf00      	nop
 800a3e4:	f3af 8000 	nop.w
 800a3e8:	ffc00000 	.word	0xffc00000
 800a3ec:	41dfffff 	.word	0x41dfffff
 800a3f0:	94a03595 	.word	0x94a03595
 800a3f4:	3fcfffff 	.word	0x3fcfffff

0800a3f8 <_strtod_r>:
 800a3f8:	4b01      	ldr	r3, [pc, #4]	; (800a400 <_strtod_r+0x8>)
 800a3fa:	f7ff ba15 	b.w	8009828 <_strtod_l>
 800a3fe:	bf00      	nop
 800a400:	20000080 	.word	0x20000080

0800a404 <_strtol_l.constprop.0>:
 800a404:	2b01      	cmp	r3, #1
 800a406:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a40a:	4680      	mov	r8, r0
 800a40c:	d001      	beq.n	800a412 <_strtol_l.constprop.0+0xe>
 800a40e:	2b24      	cmp	r3, #36	; 0x24
 800a410:	d906      	bls.n	800a420 <_strtol_l.constprop.0+0x1c>
 800a412:	f7fe faed 	bl	80089f0 <__errno>
 800a416:	2316      	movs	r3, #22
 800a418:	6003      	str	r3, [r0, #0]
 800a41a:	2000      	movs	r0, #0
 800a41c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a420:	460d      	mov	r5, r1
 800a422:	4f35      	ldr	r7, [pc, #212]	; (800a4f8 <_strtol_l.constprop.0+0xf4>)
 800a424:	4628      	mov	r0, r5
 800a426:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a42a:	5de6      	ldrb	r6, [r4, r7]
 800a42c:	f016 0608 	ands.w	r6, r6, #8
 800a430:	d1f8      	bne.n	800a424 <_strtol_l.constprop.0+0x20>
 800a432:	2c2d      	cmp	r4, #45	; 0x2d
 800a434:	d12f      	bne.n	800a496 <_strtol_l.constprop.0+0x92>
 800a436:	2601      	movs	r6, #1
 800a438:	782c      	ldrb	r4, [r5, #0]
 800a43a:	1c85      	adds	r5, r0, #2
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d057      	beq.n	800a4f0 <_strtol_l.constprop.0+0xec>
 800a440:	2b10      	cmp	r3, #16
 800a442:	d109      	bne.n	800a458 <_strtol_l.constprop.0+0x54>
 800a444:	2c30      	cmp	r4, #48	; 0x30
 800a446:	d107      	bne.n	800a458 <_strtol_l.constprop.0+0x54>
 800a448:	7828      	ldrb	r0, [r5, #0]
 800a44a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a44e:	2858      	cmp	r0, #88	; 0x58
 800a450:	d149      	bne.n	800a4e6 <_strtol_l.constprop.0+0xe2>
 800a452:	2310      	movs	r3, #16
 800a454:	786c      	ldrb	r4, [r5, #1]
 800a456:	3502      	adds	r5, #2
 800a458:	2700      	movs	r7, #0
 800a45a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800a45e:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a462:	fbbe f9f3 	udiv	r9, lr, r3
 800a466:	4638      	mov	r0, r7
 800a468:	fb03 ea19 	mls	sl, r3, r9, lr
 800a46c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a470:	f1bc 0f09 	cmp.w	ip, #9
 800a474:	d814      	bhi.n	800a4a0 <_strtol_l.constprop.0+0x9c>
 800a476:	4664      	mov	r4, ip
 800a478:	42a3      	cmp	r3, r4
 800a47a:	dd22      	ble.n	800a4c2 <_strtol_l.constprop.0+0xbe>
 800a47c:	2f00      	cmp	r7, #0
 800a47e:	db1d      	blt.n	800a4bc <_strtol_l.constprop.0+0xb8>
 800a480:	4581      	cmp	r9, r0
 800a482:	d31b      	bcc.n	800a4bc <_strtol_l.constprop.0+0xb8>
 800a484:	d101      	bne.n	800a48a <_strtol_l.constprop.0+0x86>
 800a486:	45a2      	cmp	sl, r4
 800a488:	db18      	blt.n	800a4bc <_strtol_l.constprop.0+0xb8>
 800a48a:	2701      	movs	r7, #1
 800a48c:	fb00 4003 	mla	r0, r0, r3, r4
 800a490:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a494:	e7ea      	b.n	800a46c <_strtol_l.constprop.0+0x68>
 800a496:	2c2b      	cmp	r4, #43	; 0x2b
 800a498:	bf04      	itt	eq
 800a49a:	782c      	ldrbeq	r4, [r5, #0]
 800a49c:	1c85      	addeq	r5, r0, #2
 800a49e:	e7cd      	b.n	800a43c <_strtol_l.constprop.0+0x38>
 800a4a0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a4a4:	f1bc 0f19 	cmp.w	ip, #25
 800a4a8:	d801      	bhi.n	800a4ae <_strtol_l.constprop.0+0xaa>
 800a4aa:	3c37      	subs	r4, #55	; 0x37
 800a4ac:	e7e4      	b.n	800a478 <_strtol_l.constprop.0+0x74>
 800a4ae:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a4b2:	f1bc 0f19 	cmp.w	ip, #25
 800a4b6:	d804      	bhi.n	800a4c2 <_strtol_l.constprop.0+0xbe>
 800a4b8:	3c57      	subs	r4, #87	; 0x57
 800a4ba:	e7dd      	b.n	800a478 <_strtol_l.constprop.0+0x74>
 800a4bc:	f04f 37ff 	mov.w	r7, #4294967295
 800a4c0:	e7e6      	b.n	800a490 <_strtol_l.constprop.0+0x8c>
 800a4c2:	2f00      	cmp	r7, #0
 800a4c4:	da07      	bge.n	800a4d6 <_strtol_l.constprop.0+0xd2>
 800a4c6:	2322      	movs	r3, #34	; 0x22
 800a4c8:	4670      	mov	r0, lr
 800a4ca:	f8c8 3000 	str.w	r3, [r8]
 800a4ce:	2a00      	cmp	r2, #0
 800a4d0:	d0a4      	beq.n	800a41c <_strtol_l.constprop.0+0x18>
 800a4d2:	1e69      	subs	r1, r5, #1
 800a4d4:	e005      	b.n	800a4e2 <_strtol_l.constprop.0+0xde>
 800a4d6:	b106      	cbz	r6, 800a4da <_strtol_l.constprop.0+0xd6>
 800a4d8:	4240      	negs	r0, r0
 800a4da:	2a00      	cmp	r2, #0
 800a4dc:	d09e      	beq.n	800a41c <_strtol_l.constprop.0+0x18>
 800a4de:	2f00      	cmp	r7, #0
 800a4e0:	d1f7      	bne.n	800a4d2 <_strtol_l.constprop.0+0xce>
 800a4e2:	6011      	str	r1, [r2, #0]
 800a4e4:	e79a      	b.n	800a41c <_strtol_l.constprop.0+0x18>
 800a4e6:	2430      	movs	r4, #48	; 0x30
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d1b5      	bne.n	800a458 <_strtol_l.constprop.0+0x54>
 800a4ec:	2308      	movs	r3, #8
 800a4ee:	e7b3      	b.n	800a458 <_strtol_l.constprop.0+0x54>
 800a4f0:	2c30      	cmp	r4, #48	; 0x30
 800a4f2:	d0a9      	beq.n	800a448 <_strtol_l.constprop.0+0x44>
 800a4f4:	230a      	movs	r3, #10
 800a4f6:	e7af      	b.n	800a458 <_strtol_l.constprop.0+0x54>
 800a4f8:	0800e5f1 	.word	0x0800e5f1

0800a4fc <_strtol_r>:
 800a4fc:	f7ff bf82 	b.w	800a404 <_strtol_l.constprop.0>

0800a500 <quorem>:
 800a500:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a504:	6903      	ldr	r3, [r0, #16]
 800a506:	690c      	ldr	r4, [r1, #16]
 800a508:	4607      	mov	r7, r0
 800a50a:	42a3      	cmp	r3, r4
 800a50c:	f2c0 8082 	blt.w	800a614 <quorem+0x114>
 800a510:	3c01      	subs	r4, #1
 800a512:	f100 0514 	add.w	r5, r0, #20
 800a516:	f101 0814 	add.w	r8, r1, #20
 800a51a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a51e:	9301      	str	r3, [sp, #4]
 800a520:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a524:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a528:	3301      	adds	r3, #1
 800a52a:	429a      	cmp	r2, r3
 800a52c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a530:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a534:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a538:	d331      	bcc.n	800a59e <quorem+0x9e>
 800a53a:	f04f 0e00 	mov.w	lr, #0
 800a53e:	4640      	mov	r0, r8
 800a540:	46ac      	mov	ip, r5
 800a542:	46f2      	mov	sl, lr
 800a544:	f850 2b04 	ldr.w	r2, [r0], #4
 800a548:	b293      	uxth	r3, r2
 800a54a:	fb06 e303 	mla	r3, r6, r3, lr
 800a54e:	0c12      	lsrs	r2, r2, #16
 800a550:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a554:	b29b      	uxth	r3, r3
 800a556:	fb06 e202 	mla	r2, r6, r2, lr
 800a55a:	ebaa 0303 	sub.w	r3, sl, r3
 800a55e:	f8dc a000 	ldr.w	sl, [ip]
 800a562:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a566:	fa1f fa8a 	uxth.w	sl, sl
 800a56a:	4453      	add	r3, sl
 800a56c:	f8dc a000 	ldr.w	sl, [ip]
 800a570:	b292      	uxth	r2, r2
 800a572:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a576:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a580:	4581      	cmp	r9, r0
 800a582:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a586:	f84c 3b04 	str.w	r3, [ip], #4
 800a58a:	d2db      	bcs.n	800a544 <quorem+0x44>
 800a58c:	f855 300b 	ldr.w	r3, [r5, fp]
 800a590:	b92b      	cbnz	r3, 800a59e <quorem+0x9e>
 800a592:	9b01      	ldr	r3, [sp, #4]
 800a594:	3b04      	subs	r3, #4
 800a596:	429d      	cmp	r5, r3
 800a598:	461a      	mov	r2, r3
 800a59a:	d32f      	bcc.n	800a5fc <quorem+0xfc>
 800a59c:	613c      	str	r4, [r7, #16]
 800a59e:	4638      	mov	r0, r7
 800a5a0:	f001 fc90 	bl	800bec4 <__mcmp>
 800a5a4:	2800      	cmp	r0, #0
 800a5a6:	db25      	blt.n	800a5f4 <quorem+0xf4>
 800a5a8:	4628      	mov	r0, r5
 800a5aa:	f04f 0c00 	mov.w	ip, #0
 800a5ae:	3601      	adds	r6, #1
 800a5b0:	f858 1b04 	ldr.w	r1, [r8], #4
 800a5b4:	f8d0 e000 	ldr.w	lr, [r0]
 800a5b8:	b28b      	uxth	r3, r1
 800a5ba:	ebac 0303 	sub.w	r3, ip, r3
 800a5be:	fa1f f28e 	uxth.w	r2, lr
 800a5c2:	4413      	add	r3, r2
 800a5c4:	0c0a      	lsrs	r2, r1, #16
 800a5c6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a5ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a5d4:	45c1      	cmp	r9, r8
 800a5d6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a5da:	f840 3b04 	str.w	r3, [r0], #4
 800a5de:	d2e7      	bcs.n	800a5b0 <quorem+0xb0>
 800a5e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a5e8:	b922      	cbnz	r2, 800a5f4 <quorem+0xf4>
 800a5ea:	3b04      	subs	r3, #4
 800a5ec:	429d      	cmp	r5, r3
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	d30a      	bcc.n	800a608 <quorem+0x108>
 800a5f2:	613c      	str	r4, [r7, #16]
 800a5f4:	4630      	mov	r0, r6
 800a5f6:	b003      	add	sp, #12
 800a5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5fc:	6812      	ldr	r2, [r2, #0]
 800a5fe:	3b04      	subs	r3, #4
 800a600:	2a00      	cmp	r2, #0
 800a602:	d1cb      	bne.n	800a59c <quorem+0x9c>
 800a604:	3c01      	subs	r4, #1
 800a606:	e7c6      	b.n	800a596 <quorem+0x96>
 800a608:	6812      	ldr	r2, [r2, #0]
 800a60a:	3b04      	subs	r3, #4
 800a60c:	2a00      	cmp	r2, #0
 800a60e:	d1f0      	bne.n	800a5f2 <quorem+0xf2>
 800a610:	3c01      	subs	r4, #1
 800a612:	e7eb      	b.n	800a5ec <quorem+0xec>
 800a614:	2000      	movs	r0, #0
 800a616:	e7ee      	b.n	800a5f6 <quorem+0xf6>

0800a618 <_dtoa_r>:
 800a618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a61c:	4616      	mov	r6, r2
 800a61e:	461f      	mov	r7, r3
 800a620:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a622:	b099      	sub	sp, #100	; 0x64
 800a624:	4605      	mov	r5, r0
 800a626:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a62a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a62e:	b974      	cbnz	r4, 800a64e <_dtoa_r+0x36>
 800a630:	2010      	movs	r0, #16
 800a632:	f001 f949 	bl	800b8c8 <malloc>
 800a636:	4602      	mov	r2, r0
 800a638:	6268      	str	r0, [r5, #36]	; 0x24
 800a63a:	b920      	cbnz	r0, 800a646 <_dtoa_r+0x2e>
 800a63c:	21ea      	movs	r1, #234	; 0xea
 800a63e:	4ba8      	ldr	r3, [pc, #672]	; (800a8e0 <_dtoa_r+0x2c8>)
 800a640:	48a8      	ldr	r0, [pc, #672]	; (800a8e4 <_dtoa_r+0x2cc>)
 800a642:	f002 f8b3 	bl	800c7ac <__assert_func>
 800a646:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a64a:	6004      	str	r4, [r0, #0]
 800a64c:	60c4      	str	r4, [r0, #12]
 800a64e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a650:	6819      	ldr	r1, [r3, #0]
 800a652:	b151      	cbz	r1, 800a66a <_dtoa_r+0x52>
 800a654:	685a      	ldr	r2, [r3, #4]
 800a656:	2301      	movs	r3, #1
 800a658:	4093      	lsls	r3, r2
 800a65a:	604a      	str	r2, [r1, #4]
 800a65c:	608b      	str	r3, [r1, #8]
 800a65e:	4628      	mov	r0, r5
 800a660:	f001 f9a8 	bl	800b9b4 <_Bfree>
 800a664:	2200      	movs	r2, #0
 800a666:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a668:	601a      	str	r2, [r3, #0]
 800a66a:	1e3b      	subs	r3, r7, #0
 800a66c:	bfaf      	iteee	ge
 800a66e:	2300      	movge	r3, #0
 800a670:	2201      	movlt	r2, #1
 800a672:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a676:	9305      	strlt	r3, [sp, #20]
 800a678:	bfa8      	it	ge
 800a67a:	f8c8 3000 	strge.w	r3, [r8]
 800a67e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a682:	4b99      	ldr	r3, [pc, #612]	; (800a8e8 <_dtoa_r+0x2d0>)
 800a684:	bfb8      	it	lt
 800a686:	f8c8 2000 	strlt.w	r2, [r8]
 800a68a:	ea33 0309 	bics.w	r3, r3, r9
 800a68e:	d119      	bne.n	800a6c4 <_dtoa_r+0xac>
 800a690:	f242 730f 	movw	r3, #9999	; 0x270f
 800a694:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a696:	6013      	str	r3, [r2, #0]
 800a698:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a69c:	4333      	orrs	r3, r6
 800a69e:	f000 857f 	beq.w	800b1a0 <_dtoa_r+0xb88>
 800a6a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a6a4:	b953      	cbnz	r3, 800a6bc <_dtoa_r+0xa4>
 800a6a6:	4b91      	ldr	r3, [pc, #580]	; (800a8ec <_dtoa_r+0x2d4>)
 800a6a8:	e022      	b.n	800a6f0 <_dtoa_r+0xd8>
 800a6aa:	4b91      	ldr	r3, [pc, #580]	; (800a8f0 <_dtoa_r+0x2d8>)
 800a6ac:	9303      	str	r3, [sp, #12]
 800a6ae:	3308      	adds	r3, #8
 800a6b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a6b2:	6013      	str	r3, [r2, #0]
 800a6b4:	9803      	ldr	r0, [sp, #12]
 800a6b6:	b019      	add	sp, #100	; 0x64
 800a6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6bc:	4b8b      	ldr	r3, [pc, #556]	; (800a8ec <_dtoa_r+0x2d4>)
 800a6be:	9303      	str	r3, [sp, #12]
 800a6c0:	3303      	adds	r3, #3
 800a6c2:	e7f5      	b.n	800a6b0 <_dtoa_r+0x98>
 800a6c4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a6c8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a6cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	f7f6 f968 	bl	80009a8 <__aeabi_dcmpeq>
 800a6d8:	4680      	mov	r8, r0
 800a6da:	b158      	cbz	r0, 800a6f4 <_dtoa_r+0xdc>
 800a6dc:	2301      	movs	r3, #1
 800a6de:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a6e0:	6013      	str	r3, [r2, #0]
 800a6e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	f000 8558 	beq.w	800b19a <_dtoa_r+0xb82>
 800a6ea:	4882      	ldr	r0, [pc, #520]	; (800a8f4 <_dtoa_r+0x2dc>)
 800a6ec:	6018      	str	r0, [r3, #0]
 800a6ee:	1e43      	subs	r3, r0, #1
 800a6f0:	9303      	str	r3, [sp, #12]
 800a6f2:	e7df      	b.n	800a6b4 <_dtoa_r+0x9c>
 800a6f4:	ab16      	add	r3, sp, #88	; 0x58
 800a6f6:	9301      	str	r3, [sp, #4]
 800a6f8:	ab17      	add	r3, sp, #92	; 0x5c
 800a6fa:	9300      	str	r3, [sp, #0]
 800a6fc:	4628      	mov	r0, r5
 800a6fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a702:	f001 fd01 	bl	800c108 <__d2b>
 800a706:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a70a:	4683      	mov	fp, r0
 800a70c:	2c00      	cmp	r4, #0
 800a70e:	d07f      	beq.n	800a810 <_dtoa_r+0x1f8>
 800a710:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a714:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a716:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a71a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a71e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a722:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a726:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a72a:	2200      	movs	r2, #0
 800a72c:	4b72      	ldr	r3, [pc, #456]	; (800a8f8 <_dtoa_r+0x2e0>)
 800a72e:	f7f5 fd1b 	bl	8000168 <__aeabi_dsub>
 800a732:	a365      	add	r3, pc, #404	; (adr r3, 800a8c8 <_dtoa_r+0x2b0>)
 800a734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a738:	f7f5 fece 	bl	80004d8 <__aeabi_dmul>
 800a73c:	a364      	add	r3, pc, #400	; (adr r3, 800a8d0 <_dtoa_r+0x2b8>)
 800a73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a742:	f7f5 fd13 	bl	800016c <__adddf3>
 800a746:	4606      	mov	r6, r0
 800a748:	4620      	mov	r0, r4
 800a74a:	460f      	mov	r7, r1
 800a74c:	f7f5 fe5a 	bl	8000404 <__aeabi_i2d>
 800a750:	a361      	add	r3, pc, #388	; (adr r3, 800a8d8 <_dtoa_r+0x2c0>)
 800a752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a756:	f7f5 febf 	bl	80004d8 <__aeabi_dmul>
 800a75a:	4602      	mov	r2, r0
 800a75c:	460b      	mov	r3, r1
 800a75e:	4630      	mov	r0, r6
 800a760:	4639      	mov	r1, r7
 800a762:	f7f5 fd03 	bl	800016c <__adddf3>
 800a766:	4606      	mov	r6, r0
 800a768:	460f      	mov	r7, r1
 800a76a:	f7f6 f965 	bl	8000a38 <__aeabi_d2iz>
 800a76e:	2200      	movs	r2, #0
 800a770:	4682      	mov	sl, r0
 800a772:	2300      	movs	r3, #0
 800a774:	4630      	mov	r0, r6
 800a776:	4639      	mov	r1, r7
 800a778:	f7f6 f920 	bl	80009bc <__aeabi_dcmplt>
 800a77c:	b148      	cbz	r0, 800a792 <_dtoa_r+0x17a>
 800a77e:	4650      	mov	r0, sl
 800a780:	f7f5 fe40 	bl	8000404 <__aeabi_i2d>
 800a784:	4632      	mov	r2, r6
 800a786:	463b      	mov	r3, r7
 800a788:	f7f6 f90e 	bl	80009a8 <__aeabi_dcmpeq>
 800a78c:	b908      	cbnz	r0, 800a792 <_dtoa_r+0x17a>
 800a78e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a792:	f1ba 0f16 	cmp.w	sl, #22
 800a796:	d858      	bhi.n	800a84a <_dtoa_r+0x232>
 800a798:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a79c:	4b57      	ldr	r3, [pc, #348]	; (800a8fc <_dtoa_r+0x2e4>)
 800a79e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a6:	f7f6 f909 	bl	80009bc <__aeabi_dcmplt>
 800a7aa:	2800      	cmp	r0, #0
 800a7ac:	d04f      	beq.n	800a84e <_dtoa_r+0x236>
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a7b4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a7b6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a7b8:	1b1c      	subs	r4, r3, r4
 800a7ba:	1e63      	subs	r3, r4, #1
 800a7bc:	9309      	str	r3, [sp, #36]	; 0x24
 800a7be:	bf49      	itett	mi
 800a7c0:	f1c4 0301 	rsbmi	r3, r4, #1
 800a7c4:	2300      	movpl	r3, #0
 800a7c6:	9306      	strmi	r3, [sp, #24]
 800a7c8:	2300      	movmi	r3, #0
 800a7ca:	bf54      	ite	pl
 800a7cc:	9306      	strpl	r3, [sp, #24]
 800a7ce:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a7d0:	f1ba 0f00 	cmp.w	sl, #0
 800a7d4:	db3d      	blt.n	800a852 <_dtoa_r+0x23a>
 800a7d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7d8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a7dc:	4453      	add	r3, sl
 800a7de:	9309      	str	r3, [sp, #36]	; 0x24
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	930a      	str	r3, [sp, #40]	; 0x28
 800a7e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a7e6:	2b09      	cmp	r3, #9
 800a7e8:	f200 808c 	bhi.w	800a904 <_dtoa_r+0x2ec>
 800a7ec:	2b05      	cmp	r3, #5
 800a7ee:	bfc4      	itt	gt
 800a7f0:	3b04      	subgt	r3, #4
 800a7f2:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a7f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a7f6:	bfc8      	it	gt
 800a7f8:	2400      	movgt	r4, #0
 800a7fa:	f1a3 0302 	sub.w	r3, r3, #2
 800a7fe:	bfd8      	it	le
 800a800:	2401      	movle	r4, #1
 800a802:	2b03      	cmp	r3, #3
 800a804:	f200 808a 	bhi.w	800a91c <_dtoa_r+0x304>
 800a808:	e8df f003 	tbb	[pc, r3]
 800a80c:	5b4d4f2d 	.word	0x5b4d4f2d
 800a810:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a814:	441c      	add	r4, r3
 800a816:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a81a:	2b20      	cmp	r3, #32
 800a81c:	bfc3      	ittte	gt
 800a81e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a822:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a826:	fa09 f303 	lslgt.w	r3, r9, r3
 800a82a:	f1c3 0320 	rsble	r3, r3, #32
 800a82e:	bfc6      	itte	gt
 800a830:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a834:	4318      	orrgt	r0, r3
 800a836:	fa06 f003 	lslle.w	r0, r6, r3
 800a83a:	f7f5 fdd3 	bl	80003e4 <__aeabi_ui2d>
 800a83e:	2301      	movs	r3, #1
 800a840:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a844:	3c01      	subs	r4, #1
 800a846:	9313      	str	r3, [sp, #76]	; 0x4c
 800a848:	e76f      	b.n	800a72a <_dtoa_r+0x112>
 800a84a:	2301      	movs	r3, #1
 800a84c:	e7b2      	b.n	800a7b4 <_dtoa_r+0x19c>
 800a84e:	900f      	str	r0, [sp, #60]	; 0x3c
 800a850:	e7b1      	b.n	800a7b6 <_dtoa_r+0x19e>
 800a852:	9b06      	ldr	r3, [sp, #24]
 800a854:	eba3 030a 	sub.w	r3, r3, sl
 800a858:	9306      	str	r3, [sp, #24]
 800a85a:	f1ca 0300 	rsb	r3, sl, #0
 800a85e:	930a      	str	r3, [sp, #40]	; 0x28
 800a860:	2300      	movs	r3, #0
 800a862:	930e      	str	r3, [sp, #56]	; 0x38
 800a864:	e7be      	b.n	800a7e4 <_dtoa_r+0x1cc>
 800a866:	2300      	movs	r3, #0
 800a868:	930b      	str	r3, [sp, #44]	; 0x2c
 800a86a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	dc58      	bgt.n	800a922 <_dtoa_r+0x30a>
 800a870:	f04f 0901 	mov.w	r9, #1
 800a874:	464b      	mov	r3, r9
 800a876:	f8cd 9020 	str.w	r9, [sp, #32]
 800a87a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800a87e:	2200      	movs	r2, #0
 800a880:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a882:	6042      	str	r2, [r0, #4]
 800a884:	2204      	movs	r2, #4
 800a886:	f102 0614 	add.w	r6, r2, #20
 800a88a:	429e      	cmp	r6, r3
 800a88c:	6841      	ldr	r1, [r0, #4]
 800a88e:	d94e      	bls.n	800a92e <_dtoa_r+0x316>
 800a890:	4628      	mov	r0, r5
 800a892:	f001 f84f 	bl	800b934 <_Balloc>
 800a896:	9003      	str	r0, [sp, #12]
 800a898:	2800      	cmp	r0, #0
 800a89a:	d14c      	bne.n	800a936 <_dtoa_r+0x31e>
 800a89c:	4602      	mov	r2, r0
 800a89e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a8a2:	4b17      	ldr	r3, [pc, #92]	; (800a900 <_dtoa_r+0x2e8>)
 800a8a4:	e6cc      	b.n	800a640 <_dtoa_r+0x28>
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	e7de      	b.n	800a868 <_dtoa_r+0x250>
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8ae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a8b0:	eb0a 0903 	add.w	r9, sl, r3
 800a8b4:	f109 0301 	add.w	r3, r9, #1
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	9308      	str	r3, [sp, #32]
 800a8bc:	bfb8      	it	lt
 800a8be:	2301      	movlt	r3, #1
 800a8c0:	e7dd      	b.n	800a87e <_dtoa_r+0x266>
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	e7f2      	b.n	800a8ac <_dtoa_r+0x294>
 800a8c6:	bf00      	nop
 800a8c8:	636f4361 	.word	0x636f4361
 800a8cc:	3fd287a7 	.word	0x3fd287a7
 800a8d0:	8b60c8b3 	.word	0x8b60c8b3
 800a8d4:	3fc68a28 	.word	0x3fc68a28
 800a8d8:	509f79fb 	.word	0x509f79fb
 800a8dc:	3fd34413 	.word	0x3fd34413
 800a8e0:	0800e6fe 	.word	0x0800e6fe
 800a8e4:	0800e715 	.word	0x0800e715
 800a8e8:	7ff00000 	.word	0x7ff00000
 800a8ec:	0800e6fa 	.word	0x0800e6fa
 800a8f0:	0800e6f1 	.word	0x0800e6f1
 800a8f4:	0800e571 	.word	0x0800e571
 800a8f8:	3ff80000 	.word	0x3ff80000
 800a8fc:	0800e880 	.word	0x0800e880
 800a900:	0800e770 	.word	0x0800e770
 800a904:	2401      	movs	r4, #1
 800a906:	2300      	movs	r3, #0
 800a908:	940b      	str	r4, [sp, #44]	; 0x2c
 800a90a:	9322      	str	r3, [sp, #136]	; 0x88
 800a90c:	f04f 39ff 	mov.w	r9, #4294967295
 800a910:	2200      	movs	r2, #0
 800a912:	2312      	movs	r3, #18
 800a914:	f8cd 9020 	str.w	r9, [sp, #32]
 800a918:	9223      	str	r2, [sp, #140]	; 0x8c
 800a91a:	e7b0      	b.n	800a87e <_dtoa_r+0x266>
 800a91c:	2301      	movs	r3, #1
 800a91e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a920:	e7f4      	b.n	800a90c <_dtoa_r+0x2f4>
 800a922:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800a926:	464b      	mov	r3, r9
 800a928:	f8cd 9020 	str.w	r9, [sp, #32]
 800a92c:	e7a7      	b.n	800a87e <_dtoa_r+0x266>
 800a92e:	3101      	adds	r1, #1
 800a930:	6041      	str	r1, [r0, #4]
 800a932:	0052      	lsls	r2, r2, #1
 800a934:	e7a7      	b.n	800a886 <_dtoa_r+0x26e>
 800a936:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a938:	9a03      	ldr	r2, [sp, #12]
 800a93a:	601a      	str	r2, [r3, #0]
 800a93c:	9b08      	ldr	r3, [sp, #32]
 800a93e:	2b0e      	cmp	r3, #14
 800a940:	f200 80a8 	bhi.w	800aa94 <_dtoa_r+0x47c>
 800a944:	2c00      	cmp	r4, #0
 800a946:	f000 80a5 	beq.w	800aa94 <_dtoa_r+0x47c>
 800a94a:	f1ba 0f00 	cmp.w	sl, #0
 800a94e:	dd34      	ble.n	800a9ba <_dtoa_r+0x3a2>
 800a950:	4a9a      	ldr	r2, [pc, #616]	; (800abbc <_dtoa_r+0x5a4>)
 800a952:	f00a 030f 	and.w	r3, sl, #15
 800a956:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a95a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a95e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a962:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a966:	ea4f 142a 	mov.w	r4, sl, asr #4
 800a96a:	d016      	beq.n	800a99a <_dtoa_r+0x382>
 800a96c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a970:	4b93      	ldr	r3, [pc, #588]	; (800abc0 <_dtoa_r+0x5a8>)
 800a972:	2703      	movs	r7, #3
 800a974:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a978:	f7f5 fed8 	bl	800072c <__aeabi_ddiv>
 800a97c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a980:	f004 040f 	and.w	r4, r4, #15
 800a984:	4e8e      	ldr	r6, [pc, #568]	; (800abc0 <_dtoa_r+0x5a8>)
 800a986:	b954      	cbnz	r4, 800a99e <_dtoa_r+0x386>
 800a988:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a98c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a990:	f7f5 fecc 	bl	800072c <__aeabi_ddiv>
 800a994:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a998:	e029      	b.n	800a9ee <_dtoa_r+0x3d6>
 800a99a:	2702      	movs	r7, #2
 800a99c:	e7f2      	b.n	800a984 <_dtoa_r+0x36c>
 800a99e:	07e1      	lsls	r1, r4, #31
 800a9a0:	d508      	bpl.n	800a9b4 <_dtoa_r+0x39c>
 800a9a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a9a6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a9aa:	f7f5 fd95 	bl	80004d8 <__aeabi_dmul>
 800a9ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a9b2:	3701      	adds	r7, #1
 800a9b4:	1064      	asrs	r4, r4, #1
 800a9b6:	3608      	adds	r6, #8
 800a9b8:	e7e5      	b.n	800a986 <_dtoa_r+0x36e>
 800a9ba:	f000 80a5 	beq.w	800ab08 <_dtoa_r+0x4f0>
 800a9be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a9c2:	f1ca 0400 	rsb	r4, sl, #0
 800a9c6:	4b7d      	ldr	r3, [pc, #500]	; (800abbc <_dtoa_r+0x5a4>)
 800a9c8:	f004 020f 	and.w	r2, r4, #15
 800a9cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d4:	f7f5 fd80 	bl	80004d8 <__aeabi_dmul>
 800a9d8:	2702      	movs	r7, #2
 800a9da:	2300      	movs	r3, #0
 800a9dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a9e0:	4e77      	ldr	r6, [pc, #476]	; (800abc0 <_dtoa_r+0x5a8>)
 800a9e2:	1124      	asrs	r4, r4, #4
 800a9e4:	2c00      	cmp	r4, #0
 800a9e6:	f040 8084 	bne.w	800aaf2 <_dtoa_r+0x4da>
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d1d2      	bne.n	800a994 <_dtoa_r+0x37c>
 800a9ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	f000 808b 	beq.w	800ab0c <_dtoa_r+0x4f4>
 800a9f6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a9fa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a9fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aa02:	2200      	movs	r2, #0
 800aa04:	4b6f      	ldr	r3, [pc, #444]	; (800abc4 <_dtoa_r+0x5ac>)
 800aa06:	f7f5 ffd9 	bl	80009bc <__aeabi_dcmplt>
 800aa0a:	2800      	cmp	r0, #0
 800aa0c:	d07e      	beq.n	800ab0c <_dtoa_r+0x4f4>
 800aa0e:	9b08      	ldr	r3, [sp, #32]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d07b      	beq.n	800ab0c <_dtoa_r+0x4f4>
 800aa14:	f1b9 0f00 	cmp.w	r9, #0
 800aa18:	dd38      	ble.n	800aa8c <_dtoa_r+0x474>
 800aa1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aa1e:	2200      	movs	r2, #0
 800aa20:	4b69      	ldr	r3, [pc, #420]	; (800abc8 <_dtoa_r+0x5b0>)
 800aa22:	f7f5 fd59 	bl	80004d8 <__aeabi_dmul>
 800aa26:	464c      	mov	r4, r9
 800aa28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa2c:	f10a 38ff 	add.w	r8, sl, #4294967295
 800aa30:	3701      	adds	r7, #1
 800aa32:	4638      	mov	r0, r7
 800aa34:	f7f5 fce6 	bl	8000404 <__aeabi_i2d>
 800aa38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa3c:	f7f5 fd4c 	bl	80004d8 <__aeabi_dmul>
 800aa40:	2200      	movs	r2, #0
 800aa42:	4b62      	ldr	r3, [pc, #392]	; (800abcc <_dtoa_r+0x5b4>)
 800aa44:	f7f5 fb92 	bl	800016c <__adddf3>
 800aa48:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800aa4c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800aa50:	9611      	str	r6, [sp, #68]	; 0x44
 800aa52:	2c00      	cmp	r4, #0
 800aa54:	d15d      	bne.n	800ab12 <_dtoa_r+0x4fa>
 800aa56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	4b5c      	ldr	r3, [pc, #368]	; (800abd0 <_dtoa_r+0x5b8>)
 800aa5e:	f7f5 fb83 	bl	8000168 <__aeabi_dsub>
 800aa62:	4602      	mov	r2, r0
 800aa64:	460b      	mov	r3, r1
 800aa66:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aa6a:	4633      	mov	r3, r6
 800aa6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aa6e:	f7f5 ffc3 	bl	80009f8 <__aeabi_dcmpgt>
 800aa72:	2800      	cmp	r0, #0
 800aa74:	f040 829c 	bne.w	800afb0 <_dtoa_r+0x998>
 800aa78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aa7e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800aa82:	f7f5 ff9b 	bl	80009bc <__aeabi_dcmplt>
 800aa86:	2800      	cmp	r0, #0
 800aa88:	f040 8290 	bne.w	800afac <_dtoa_r+0x994>
 800aa8c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800aa90:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800aa94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	f2c0 8152 	blt.w	800ad40 <_dtoa_r+0x728>
 800aa9c:	f1ba 0f0e 	cmp.w	sl, #14
 800aaa0:	f300 814e 	bgt.w	800ad40 <_dtoa_r+0x728>
 800aaa4:	4b45      	ldr	r3, [pc, #276]	; (800abbc <_dtoa_r+0x5a4>)
 800aaa6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800aaaa:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aaae:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800aab2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	f280 80db 	bge.w	800ac70 <_dtoa_r+0x658>
 800aaba:	9b08      	ldr	r3, [sp, #32]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	f300 80d7 	bgt.w	800ac70 <_dtoa_r+0x658>
 800aac2:	f040 8272 	bne.w	800afaa <_dtoa_r+0x992>
 800aac6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aaca:	2200      	movs	r2, #0
 800aacc:	4b40      	ldr	r3, [pc, #256]	; (800abd0 <_dtoa_r+0x5b8>)
 800aace:	f7f5 fd03 	bl	80004d8 <__aeabi_dmul>
 800aad2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aad6:	f7f5 ff85 	bl	80009e4 <__aeabi_dcmpge>
 800aada:	9c08      	ldr	r4, [sp, #32]
 800aadc:	4626      	mov	r6, r4
 800aade:	2800      	cmp	r0, #0
 800aae0:	f040 8248 	bne.w	800af74 <_dtoa_r+0x95c>
 800aae4:	2331      	movs	r3, #49	; 0x31
 800aae6:	9f03      	ldr	r7, [sp, #12]
 800aae8:	f10a 0a01 	add.w	sl, sl, #1
 800aaec:	f807 3b01 	strb.w	r3, [r7], #1
 800aaf0:	e244      	b.n	800af7c <_dtoa_r+0x964>
 800aaf2:	07e2      	lsls	r2, r4, #31
 800aaf4:	d505      	bpl.n	800ab02 <_dtoa_r+0x4ea>
 800aaf6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aafa:	f7f5 fced 	bl	80004d8 <__aeabi_dmul>
 800aafe:	2301      	movs	r3, #1
 800ab00:	3701      	adds	r7, #1
 800ab02:	1064      	asrs	r4, r4, #1
 800ab04:	3608      	adds	r6, #8
 800ab06:	e76d      	b.n	800a9e4 <_dtoa_r+0x3cc>
 800ab08:	2702      	movs	r7, #2
 800ab0a:	e770      	b.n	800a9ee <_dtoa_r+0x3d6>
 800ab0c:	46d0      	mov	r8, sl
 800ab0e:	9c08      	ldr	r4, [sp, #32]
 800ab10:	e78f      	b.n	800aa32 <_dtoa_r+0x41a>
 800ab12:	9903      	ldr	r1, [sp, #12]
 800ab14:	4b29      	ldr	r3, [pc, #164]	; (800abbc <_dtoa_r+0x5a4>)
 800ab16:	4421      	add	r1, r4
 800ab18:	9112      	str	r1, [sp, #72]	; 0x48
 800ab1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab1c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ab20:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ab24:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ab28:	2900      	cmp	r1, #0
 800ab2a:	d055      	beq.n	800abd8 <_dtoa_r+0x5c0>
 800ab2c:	2000      	movs	r0, #0
 800ab2e:	4929      	ldr	r1, [pc, #164]	; (800abd4 <_dtoa_r+0x5bc>)
 800ab30:	f7f5 fdfc 	bl	800072c <__aeabi_ddiv>
 800ab34:	463b      	mov	r3, r7
 800ab36:	4632      	mov	r2, r6
 800ab38:	f7f5 fb16 	bl	8000168 <__aeabi_dsub>
 800ab3c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ab40:	9f03      	ldr	r7, [sp, #12]
 800ab42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab46:	f7f5 ff77 	bl	8000a38 <__aeabi_d2iz>
 800ab4a:	4604      	mov	r4, r0
 800ab4c:	f7f5 fc5a 	bl	8000404 <__aeabi_i2d>
 800ab50:	4602      	mov	r2, r0
 800ab52:	460b      	mov	r3, r1
 800ab54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab58:	f7f5 fb06 	bl	8000168 <__aeabi_dsub>
 800ab5c:	4602      	mov	r2, r0
 800ab5e:	460b      	mov	r3, r1
 800ab60:	3430      	adds	r4, #48	; 0x30
 800ab62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ab66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ab6a:	f807 4b01 	strb.w	r4, [r7], #1
 800ab6e:	f7f5 ff25 	bl	80009bc <__aeabi_dcmplt>
 800ab72:	2800      	cmp	r0, #0
 800ab74:	d174      	bne.n	800ac60 <_dtoa_r+0x648>
 800ab76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab7a:	2000      	movs	r0, #0
 800ab7c:	4911      	ldr	r1, [pc, #68]	; (800abc4 <_dtoa_r+0x5ac>)
 800ab7e:	f7f5 faf3 	bl	8000168 <__aeabi_dsub>
 800ab82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ab86:	f7f5 ff19 	bl	80009bc <__aeabi_dcmplt>
 800ab8a:	2800      	cmp	r0, #0
 800ab8c:	f040 80b7 	bne.w	800acfe <_dtoa_r+0x6e6>
 800ab90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab92:	429f      	cmp	r7, r3
 800ab94:	f43f af7a 	beq.w	800aa8c <_dtoa_r+0x474>
 800ab98:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	4b0a      	ldr	r3, [pc, #40]	; (800abc8 <_dtoa_r+0x5b0>)
 800aba0:	f7f5 fc9a 	bl	80004d8 <__aeabi_dmul>
 800aba4:	2200      	movs	r2, #0
 800aba6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800abaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800abae:	4b06      	ldr	r3, [pc, #24]	; (800abc8 <_dtoa_r+0x5b0>)
 800abb0:	f7f5 fc92 	bl	80004d8 <__aeabi_dmul>
 800abb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800abb8:	e7c3      	b.n	800ab42 <_dtoa_r+0x52a>
 800abba:	bf00      	nop
 800abbc:	0800e880 	.word	0x0800e880
 800abc0:	0800e858 	.word	0x0800e858
 800abc4:	3ff00000 	.word	0x3ff00000
 800abc8:	40240000 	.word	0x40240000
 800abcc:	401c0000 	.word	0x401c0000
 800abd0:	40140000 	.word	0x40140000
 800abd4:	3fe00000 	.word	0x3fe00000
 800abd8:	4630      	mov	r0, r6
 800abda:	4639      	mov	r1, r7
 800abdc:	f7f5 fc7c 	bl	80004d8 <__aeabi_dmul>
 800abe0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800abe2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800abe6:	9c03      	ldr	r4, [sp, #12]
 800abe8:	9314      	str	r3, [sp, #80]	; 0x50
 800abea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800abee:	f7f5 ff23 	bl	8000a38 <__aeabi_d2iz>
 800abf2:	9015      	str	r0, [sp, #84]	; 0x54
 800abf4:	f7f5 fc06 	bl	8000404 <__aeabi_i2d>
 800abf8:	4602      	mov	r2, r0
 800abfa:	460b      	mov	r3, r1
 800abfc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac00:	f7f5 fab2 	bl	8000168 <__aeabi_dsub>
 800ac04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac06:	4606      	mov	r6, r0
 800ac08:	3330      	adds	r3, #48	; 0x30
 800ac0a:	f804 3b01 	strb.w	r3, [r4], #1
 800ac0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac10:	460f      	mov	r7, r1
 800ac12:	429c      	cmp	r4, r3
 800ac14:	f04f 0200 	mov.w	r2, #0
 800ac18:	d124      	bne.n	800ac64 <_dtoa_r+0x64c>
 800ac1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ac1e:	4bb0      	ldr	r3, [pc, #704]	; (800aee0 <_dtoa_r+0x8c8>)
 800ac20:	f7f5 faa4 	bl	800016c <__adddf3>
 800ac24:	4602      	mov	r2, r0
 800ac26:	460b      	mov	r3, r1
 800ac28:	4630      	mov	r0, r6
 800ac2a:	4639      	mov	r1, r7
 800ac2c:	f7f5 fee4 	bl	80009f8 <__aeabi_dcmpgt>
 800ac30:	2800      	cmp	r0, #0
 800ac32:	d163      	bne.n	800acfc <_dtoa_r+0x6e4>
 800ac34:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ac38:	2000      	movs	r0, #0
 800ac3a:	49a9      	ldr	r1, [pc, #676]	; (800aee0 <_dtoa_r+0x8c8>)
 800ac3c:	f7f5 fa94 	bl	8000168 <__aeabi_dsub>
 800ac40:	4602      	mov	r2, r0
 800ac42:	460b      	mov	r3, r1
 800ac44:	4630      	mov	r0, r6
 800ac46:	4639      	mov	r1, r7
 800ac48:	f7f5 feb8 	bl	80009bc <__aeabi_dcmplt>
 800ac4c:	2800      	cmp	r0, #0
 800ac4e:	f43f af1d 	beq.w	800aa8c <_dtoa_r+0x474>
 800ac52:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800ac54:	1e7b      	subs	r3, r7, #1
 800ac56:	9314      	str	r3, [sp, #80]	; 0x50
 800ac58:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800ac5c:	2b30      	cmp	r3, #48	; 0x30
 800ac5e:	d0f8      	beq.n	800ac52 <_dtoa_r+0x63a>
 800ac60:	46c2      	mov	sl, r8
 800ac62:	e03b      	b.n	800acdc <_dtoa_r+0x6c4>
 800ac64:	4b9f      	ldr	r3, [pc, #636]	; (800aee4 <_dtoa_r+0x8cc>)
 800ac66:	f7f5 fc37 	bl	80004d8 <__aeabi_dmul>
 800ac6a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac6e:	e7bc      	b.n	800abea <_dtoa_r+0x5d2>
 800ac70:	9f03      	ldr	r7, [sp, #12]
 800ac72:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ac76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac7a:	4640      	mov	r0, r8
 800ac7c:	4649      	mov	r1, r9
 800ac7e:	f7f5 fd55 	bl	800072c <__aeabi_ddiv>
 800ac82:	f7f5 fed9 	bl	8000a38 <__aeabi_d2iz>
 800ac86:	4604      	mov	r4, r0
 800ac88:	f7f5 fbbc 	bl	8000404 <__aeabi_i2d>
 800ac8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac90:	f7f5 fc22 	bl	80004d8 <__aeabi_dmul>
 800ac94:	4602      	mov	r2, r0
 800ac96:	460b      	mov	r3, r1
 800ac98:	4640      	mov	r0, r8
 800ac9a:	4649      	mov	r1, r9
 800ac9c:	f7f5 fa64 	bl	8000168 <__aeabi_dsub>
 800aca0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800aca4:	f807 6b01 	strb.w	r6, [r7], #1
 800aca8:	9e03      	ldr	r6, [sp, #12]
 800acaa:	f8dd c020 	ldr.w	ip, [sp, #32]
 800acae:	1bbe      	subs	r6, r7, r6
 800acb0:	45b4      	cmp	ip, r6
 800acb2:	4602      	mov	r2, r0
 800acb4:	460b      	mov	r3, r1
 800acb6:	d136      	bne.n	800ad26 <_dtoa_r+0x70e>
 800acb8:	f7f5 fa58 	bl	800016c <__adddf3>
 800acbc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800acc0:	4680      	mov	r8, r0
 800acc2:	4689      	mov	r9, r1
 800acc4:	f7f5 fe98 	bl	80009f8 <__aeabi_dcmpgt>
 800acc8:	bb58      	cbnz	r0, 800ad22 <_dtoa_r+0x70a>
 800acca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800acce:	4640      	mov	r0, r8
 800acd0:	4649      	mov	r1, r9
 800acd2:	f7f5 fe69 	bl	80009a8 <__aeabi_dcmpeq>
 800acd6:	b108      	cbz	r0, 800acdc <_dtoa_r+0x6c4>
 800acd8:	07e1      	lsls	r1, r4, #31
 800acda:	d422      	bmi.n	800ad22 <_dtoa_r+0x70a>
 800acdc:	4628      	mov	r0, r5
 800acde:	4659      	mov	r1, fp
 800ace0:	f000 fe68 	bl	800b9b4 <_Bfree>
 800ace4:	2300      	movs	r3, #0
 800ace6:	703b      	strb	r3, [r7, #0]
 800ace8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800acea:	f10a 0001 	add.w	r0, sl, #1
 800acee:	6018      	str	r0, [r3, #0]
 800acf0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	f43f acde 	beq.w	800a6b4 <_dtoa_r+0x9c>
 800acf8:	601f      	str	r7, [r3, #0]
 800acfa:	e4db      	b.n	800a6b4 <_dtoa_r+0x9c>
 800acfc:	4627      	mov	r7, r4
 800acfe:	463b      	mov	r3, r7
 800ad00:	461f      	mov	r7, r3
 800ad02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad06:	2a39      	cmp	r2, #57	; 0x39
 800ad08:	d107      	bne.n	800ad1a <_dtoa_r+0x702>
 800ad0a:	9a03      	ldr	r2, [sp, #12]
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d1f7      	bne.n	800ad00 <_dtoa_r+0x6e8>
 800ad10:	2230      	movs	r2, #48	; 0x30
 800ad12:	9903      	ldr	r1, [sp, #12]
 800ad14:	f108 0801 	add.w	r8, r8, #1
 800ad18:	700a      	strb	r2, [r1, #0]
 800ad1a:	781a      	ldrb	r2, [r3, #0]
 800ad1c:	3201      	adds	r2, #1
 800ad1e:	701a      	strb	r2, [r3, #0]
 800ad20:	e79e      	b.n	800ac60 <_dtoa_r+0x648>
 800ad22:	46d0      	mov	r8, sl
 800ad24:	e7eb      	b.n	800acfe <_dtoa_r+0x6e6>
 800ad26:	2200      	movs	r2, #0
 800ad28:	4b6e      	ldr	r3, [pc, #440]	; (800aee4 <_dtoa_r+0x8cc>)
 800ad2a:	f7f5 fbd5 	bl	80004d8 <__aeabi_dmul>
 800ad2e:	2200      	movs	r2, #0
 800ad30:	2300      	movs	r3, #0
 800ad32:	4680      	mov	r8, r0
 800ad34:	4689      	mov	r9, r1
 800ad36:	f7f5 fe37 	bl	80009a8 <__aeabi_dcmpeq>
 800ad3a:	2800      	cmp	r0, #0
 800ad3c:	d09b      	beq.n	800ac76 <_dtoa_r+0x65e>
 800ad3e:	e7cd      	b.n	800acdc <_dtoa_r+0x6c4>
 800ad40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ad42:	2a00      	cmp	r2, #0
 800ad44:	f000 80d0 	beq.w	800aee8 <_dtoa_r+0x8d0>
 800ad48:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ad4a:	2a01      	cmp	r2, #1
 800ad4c:	f300 80ae 	bgt.w	800aeac <_dtoa_r+0x894>
 800ad50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ad52:	2a00      	cmp	r2, #0
 800ad54:	f000 80a6 	beq.w	800aea4 <_dtoa_r+0x88c>
 800ad58:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ad5c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ad5e:	9f06      	ldr	r7, [sp, #24]
 800ad60:	9a06      	ldr	r2, [sp, #24]
 800ad62:	2101      	movs	r1, #1
 800ad64:	441a      	add	r2, r3
 800ad66:	9206      	str	r2, [sp, #24]
 800ad68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad6a:	4628      	mov	r0, r5
 800ad6c:	441a      	add	r2, r3
 800ad6e:	9209      	str	r2, [sp, #36]	; 0x24
 800ad70:	f000 ff20 	bl	800bbb4 <__i2b>
 800ad74:	4606      	mov	r6, r0
 800ad76:	2f00      	cmp	r7, #0
 800ad78:	dd0c      	ble.n	800ad94 <_dtoa_r+0x77c>
 800ad7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	dd09      	ble.n	800ad94 <_dtoa_r+0x77c>
 800ad80:	42bb      	cmp	r3, r7
 800ad82:	bfa8      	it	ge
 800ad84:	463b      	movge	r3, r7
 800ad86:	9a06      	ldr	r2, [sp, #24]
 800ad88:	1aff      	subs	r7, r7, r3
 800ad8a:	1ad2      	subs	r2, r2, r3
 800ad8c:	9206      	str	r2, [sp, #24]
 800ad8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad90:	1ad3      	subs	r3, r2, r3
 800ad92:	9309      	str	r3, [sp, #36]	; 0x24
 800ad94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad96:	b1f3      	cbz	r3, 800add6 <_dtoa_r+0x7be>
 800ad98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	f000 80a8 	beq.w	800aef0 <_dtoa_r+0x8d8>
 800ada0:	2c00      	cmp	r4, #0
 800ada2:	dd10      	ble.n	800adc6 <_dtoa_r+0x7ae>
 800ada4:	4631      	mov	r1, r6
 800ada6:	4622      	mov	r2, r4
 800ada8:	4628      	mov	r0, r5
 800adaa:	f000 ffc1 	bl	800bd30 <__pow5mult>
 800adae:	465a      	mov	r2, fp
 800adb0:	4601      	mov	r1, r0
 800adb2:	4606      	mov	r6, r0
 800adb4:	4628      	mov	r0, r5
 800adb6:	f000 ff13 	bl	800bbe0 <__multiply>
 800adba:	4680      	mov	r8, r0
 800adbc:	4659      	mov	r1, fp
 800adbe:	4628      	mov	r0, r5
 800adc0:	f000 fdf8 	bl	800b9b4 <_Bfree>
 800adc4:	46c3      	mov	fp, r8
 800adc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adc8:	1b1a      	subs	r2, r3, r4
 800adca:	d004      	beq.n	800add6 <_dtoa_r+0x7be>
 800adcc:	4659      	mov	r1, fp
 800adce:	4628      	mov	r0, r5
 800add0:	f000 ffae 	bl	800bd30 <__pow5mult>
 800add4:	4683      	mov	fp, r0
 800add6:	2101      	movs	r1, #1
 800add8:	4628      	mov	r0, r5
 800adda:	f000 feeb 	bl	800bbb4 <__i2b>
 800adde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ade0:	4604      	mov	r4, r0
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	f340 8086 	ble.w	800aef4 <_dtoa_r+0x8dc>
 800ade8:	461a      	mov	r2, r3
 800adea:	4601      	mov	r1, r0
 800adec:	4628      	mov	r0, r5
 800adee:	f000 ff9f 	bl	800bd30 <__pow5mult>
 800adf2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800adf4:	4604      	mov	r4, r0
 800adf6:	2b01      	cmp	r3, #1
 800adf8:	dd7f      	ble.n	800aefa <_dtoa_r+0x8e2>
 800adfa:	f04f 0800 	mov.w	r8, #0
 800adfe:	6923      	ldr	r3, [r4, #16]
 800ae00:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ae04:	6918      	ldr	r0, [r3, #16]
 800ae06:	f000 fe87 	bl	800bb18 <__hi0bits>
 800ae0a:	f1c0 0020 	rsb	r0, r0, #32
 800ae0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae10:	4418      	add	r0, r3
 800ae12:	f010 001f 	ands.w	r0, r0, #31
 800ae16:	f000 8092 	beq.w	800af3e <_dtoa_r+0x926>
 800ae1a:	f1c0 0320 	rsb	r3, r0, #32
 800ae1e:	2b04      	cmp	r3, #4
 800ae20:	f340 808a 	ble.w	800af38 <_dtoa_r+0x920>
 800ae24:	f1c0 001c 	rsb	r0, r0, #28
 800ae28:	9b06      	ldr	r3, [sp, #24]
 800ae2a:	4407      	add	r7, r0
 800ae2c:	4403      	add	r3, r0
 800ae2e:	9306      	str	r3, [sp, #24]
 800ae30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae32:	4403      	add	r3, r0
 800ae34:	9309      	str	r3, [sp, #36]	; 0x24
 800ae36:	9b06      	ldr	r3, [sp, #24]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	dd05      	ble.n	800ae48 <_dtoa_r+0x830>
 800ae3c:	4659      	mov	r1, fp
 800ae3e:	461a      	mov	r2, r3
 800ae40:	4628      	mov	r0, r5
 800ae42:	f000 ffcf 	bl	800bde4 <__lshift>
 800ae46:	4683      	mov	fp, r0
 800ae48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	dd05      	ble.n	800ae5a <_dtoa_r+0x842>
 800ae4e:	4621      	mov	r1, r4
 800ae50:	461a      	mov	r2, r3
 800ae52:	4628      	mov	r0, r5
 800ae54:	f000 ffc6 	bl	800bde4 <__lshift>
 800ae58:	4604      	mov	r4, r0
 800ae5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d070      	beq.n	800af42 <_dtoa_r+0x92a>
 800ae60:	4621      	mov	r1, r4
 800ae62:	4658      	mov	r0, fp
 800ae64:	f001 f82e 	bl	800bec4 <__mcmp>
 800ae68:	2800      	cmp	r0, #0
 800ae6a:	da6a      	bge.n	800af42 <_dtoa_r+0x92a>
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	4659      	mov	r1, fp
 800ae70:	220a      	movs	r2, #10
 800ae72:	4628      	mov	r0, r5
 800ae74:	f000 fdc0 	bl	800b9f8 <__multadd>
 800ae78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae7a:	4683      	mov	fp, r0
 800ae7c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	f000 8194 	beq.w	800b1ae <_dtoa_r+0xb96>
 800ae86:	4631      	mov	r1, r6
 800ae88:	2300      	movs	r3, #0
 800ae8a:	220a      	movs	r2, #10
 800ae8c:	4628      	mov	r0, r5
 800ae8e:	f000 fdb3 	bl	800b9f8 <__multadd>
 800ae92:	f1b9 0f00 	cmp.w	r9, #0
 800ae96:	4606      	mov	r6, r0
 800ae98:	f300 8093 	bgt.w	800afc2 <_dtoa_r+0x9aa>
 800ae9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae9e:	2b02      	cmp	r3, #2
 800aea0:	dc57      	bgt.n	800af52 <_dtoa_r+0x93a>
 800aea2:	e08e      	b.n	800afc2 <_dtoa_r+0x9aa>
 800aea4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aea6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aeaa:	e757      	b.n	800ad5c <_dtoa_r+0x744>
 800aeac:	9b08      	ldr	r3, [sp, #32]
 800aeae:	1e5c      	subs	r4, r3, #1
 800aeb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aeb2:	42a3      	cmp	r3, r4
 800aeb4:	bfb7      	itett	lt
 800aeb6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800aeb8:	1b1c      	subge	r4, r3, r4
 800aeba:	1ae2      	sublt	r2, r4, r3
 800aebc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800aebe:	bfbe      	ittt	lt
 800aec0:	940a      	strlt	r4, [sp, #40]	; 0x28
 800aec2:	189b      	addlt	r3, r3, r2
 800aec4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800aec6:	9b08      	ldr	r3, [sp, #32]
 800aec8:	bfb8      	it	lt
 800aeca:	2400      	movlt	r4, #0
 800aecc:	2b00      	cmp	r3, #0
 800aece:	bfbb      	ittet	lt
 800aed0:	9b06      	ldrlt	r3, [sp, #24]
 800aed2:	9a08      	ldrlt	r2, [sp, #32]
 800aed4:	9f06      	ldrge	r7, [sp, #24]
 800aed6:	1a9f      	sublt	r7, r3, r2
 800aed8:	bfac      	ite	ge
 800aeda:	9b08      	ldrge	r3, [sp, #32]
 800aedc:	2300      	movlt	r3, #0
 800aede:	e73f      	b.n	800ad60 <_dtoa_r+0x748>
 800aee0:	3fe00000 	.word	0x3fe00000
 800aee4:	40240000 	.word	0x40240000
 800aee8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800aeea:	9f06      	ldr	r7, [sp, #24]
 800aeec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800aeee:	e742      	b.n	800ad76 <_dtoa_r+0x75e>
 800aef0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aef2:	e76b      	b.n	800adcc <_dtoa_r+0x7b4>
 800aef4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aef6:	2b01      	cmp	r3, #1
 800aef8:	dc19      	bgt.n	800af2e <_dtoa_r+0x916>
 800aefa:	9b04      	ldr	r3, [sp, #16]
 800aefc:	b9bb      	cbnz	r3, 800af2e <_dtoa_r+0x916>
 800aefe:	9b05      	ldr	r3, [sp, #20]
 800af00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af04:	b99b      	cbnz	r3, 800af2e <_dtoa_r+0x916>
 800af06:	9b05      	ldr	r3, [sp, #20]
 800af08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af0c:	0d1b      	lsrs	r3, r3, #20
 800af0e:	051b      	lsls	r3, r3, #20
 800af10:	b183      	cbz	r3, 800af34 <_dtoa_r+0x91c>
 800af12:	f04f 0801 	mov.w	r8, #1
 800af16:	9b06      	ldr	r3, [sp, #24]
 800af18:	3301      	adds	r3, #1
 800af1a:	9306      	str	r3, [sp, #24]
 800af1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af1e:	3301      	adds	r3, #1
 800af20:	9309      	str	r3, [sp, #36]	; 0x24
 800af22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af24:	2b00      	cmp	r3, #0
 800af26:	f47f af6a 	bne.w	800adfe <_dtoa_r+0x7e6>
 800af2a:	2001      	movs	r0, #1
 800af2c:	e76f      	b.n	800ae0e <_dtoa_r+0x7f6>
 800af2e:	f04f 0800 	mov.w	r8, #0
 800af32:	e7f6      	b.n	800af22 <_dtoa_r+0x90a>
 800af34:	4698      	mov	r8, r3
 800af36:	e7f4      	b.n	800af22 <_dtoa_r+0x90a>
 800af38:	f43f af7d 	beq.w	800ae36 <_dtoa_r+0x81e>
 800af3c:	4618      	mov	r0, r3
 800af3e:	301c      	adds	r0, #28
 800af40:	e772      	b.n	800ae28 <_dtoa_r+0x810>
 800af42:	9b08      	ldr	r3, [sp, #32]
 800af44:	2b00      	cmp	r3, #0
 800af46:	dc36      	bgt.n	800afb6 <_dtoa_r+0x99e>
 800af48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800af4a:	2b02      	cmp	r3, #2
 800af4c:	dd33      	ble.n	800afb6 <_dtoa_r+0x99e>
 800af4e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800af52:	f1b9 0f00 	cmp.w	r9, #0
 800af56:	d10d      	bne.n	800af74 <_dtoa_r+0x95c>
 800af58:	4621      	mov	r1, r4
 800af5a:	464b      	mov	r3, r9
 800af5c:	2205      	movs	r2, #5
 800af5e:	4628      	mov	r0, r5
 800af60:	f000 fd4a 	bl	800b9f8 <__multadd>
 800af64:	4601      	mov	r1, r0
 800af66:	4604      	mov	r4, r0
 800af68:	4658      	mov	r0, fp
 800af6a:	f000 ffab 	bl	800bec4 <__mcmp>
 800af6e:	2800      	cmp	r0, #0
 800af70:	f73f adb8 	bgt.w	800aae4 <_dtoa_r+0x4cc>
 800af74:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800af76:	9f03      	ldr	r7, [sp, #12]
 800af78:	ea6f 0a03 	mvn.w	sl, r3
 800af7c:	f04f 0800 	mov.w	r8, #0
 800af80:	4621      	mov	r1, r4
 800af82:	4628      	mov	r0, r5
 800af84:	f000 fd16 	bl	800b9b4 <_Bfree>
 800af88:	2e00      	cmp	r6, #0
 800af8a:	f43f aea7 	beq.w	800acdc <_dtoa_r+0x6c4>
 800af8e:	f1b8 0f00 	cmp.w	r8, #0
 800af92:	d005      	beq.n	800afa0 <_dtoa_r+0x988>
 800af94:	45b0      	cmp	r8, r6
 800af96:	d003      	beq.n	800afa0 <_dtoa_r+0x988>
 800af98:	4641      	mov	r1, r8
 800af9a:	4628      	mov	r0, r5
 800af9c:	f000 fd0a 	bl	800b9b4 <_Bfree>
 800afa0:	4631      	mov	r1, r6
 800afa2:	4628      	mov	r0, r5
 800afa4:	f000 fd06 	bl	800b9b4 <_Bfree>
 800afa8:	e698      	b.n	800acdc <_dtoa_r+0x6c4>
 800afaa:	2400      	movs	r4, #0
 800afac:	4626      	mov	r6, r4
 800afae:	e7e1      	b.n	800af74 <_dtoa_r+0x95c>
 800afb0:	46c2      	mov	sl, r8
 800afb2:	4626      	mov	r6, r4
 800afb4:	e596      	b.n	800aae4 <_dtoa_r+0x4cc>
 800afb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	f000 80fd 	beq.w	800b1bc <_dtoa_r+0xba4>
 800afc2:	2f00      	cmp	r7, #0
 800afc4:	dd05      	ble.n	800afd2 <_dtoa_r+0x9ba>
 800afc6:	4631      	mov	r1, r6
 800afc8:	463a      	mov	r2, r7
 800afca:	4628      	mov	r0, r5
 800afcc:	f000 ff0a 	bl	800bde4 <__lshift>
 800afd0:	4606      	mov	r6, r0
 800afd2:	f1b8 0f00 	cmp.w	r8, #0
 800afd6:	d05c      	beq.n	800b092 <_dtoa_r+0xa7a>
 800afd8:	4628      	mov	r0, r5
 800afda:	6871      	ldr	r1, [r6, #4]
 800afdc:	f000 fcaa 	bl	800b934 <_Balloc>
 800afe0:	4607      	mov	r7, r0
 800afe2:	b928      	cbnz	r0, 800aff0 <_dtoa_r+0x9d8>
 800afe4:	4602      	mov	r2, r0
 800afe6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800afea:	4b7f      	ldr	r3, [pc, #508]	; (800b1e8 <_dtoa_r+0xbd0>)
 800afec:	f7ff bb28 	b.w	800a640 <_dtoa_r+0x28>
 800aff0:	6932      	ldr	r2, [r6, #16]
 800aff2:	f106 010c 	add.w	r1, r6, #12
 800aff6:	3202      	adds	r2, #2
 800aff8:	0092      	lsls	r2, r2, #2
 800affa:	300c      	adds	r0, #12
 800affc:	f000 fc8c 	bl	800b918 <memcpy>
 800b000:	2201      	movs	r2, #1
 800b002:	4639      	mov	r1, r7
 800b004:	4628      	mov	r0, r5
 800b006:	f000 feed 	bl	800bde4 <__lshift>
 800b00a:	46b0      	mov	r8, r6
 800b00c:	4606      	mov	r6, r0
 800b00e:	9b03      	ldr	r3, [sp, #12]
 800b010:	3301      	adds	r3, #1
 800b012:	9308      	str	r3, [sp, #32]
 800b014:	9b03      	ldr	r3, [sp, #12]
 800b016:	444b      	add	r3, r9
 800b018:	930a      	str	r3, [sp, #40]	; 0x28
 800b01a:	9b04      	ldr	r3, [sp, #16]
 800b01c:	f003 0301 	and.w	r3, r3, #1
 800b020:	9309      	str	r3, [sp, #36]	; 0x24
 800b022:	9b08      	ldr	r3, [sp, #32]
 800b024:	4621      	mov	r1, r4
 800b026:	3b01      	subs	r3, #1
 800b028:	4658      	mov	r0, fp
 800b02a:	9304      	str	r3, [sp, #16]
 800b02c:	f7ff fa68 	bl	800a500 <quorem>
 800b030:	4603      	mov	r3, r0
 800b032:	4641      	mov	r1, r8
 800b034:	3330      	adds	r3, #48	; 0x30
 800b036:	9006      	str	r0, [sp, #24]
 800b038:	4658      	mov	r0, fp
 800b03a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b03c:	f000 ff42 	bl	800bec4 <__mcmp>
 800b040:	4632      	mov	r2, r6
 800b042:	4681      	mov	r9, r0
 800b044:	4621      	mov	r1, r4
 800b046:	4628      	mov	r0, r5
 800b048:	f000 ff58 	bl	800befc <__mdiff>
 800b04c:	68c2      	ldr	r2, [r0, #12]
 800b04e:	4607      	mov	r7, r0
 800b050:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b052:	bb02      	cbnz	r2, 800b096 <_dtoa_r+0xa7e>
 800b054:	4601      	mov	r1, r0
 800b056:	4658      	mov	r0, fp
 800b058:	f000 ff34 	bl	800bec4 <__mcmp>
 800b05c:	4602      	mov	r2, r0
 800b05e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b060:	4639      	mov	r1, r7
 800b062:	4628      	mov	r0, r5
 800b064:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800b068:	f000 fca4 	bl	800b9b4 <_Bfree>
 800b06c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b06e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b070:	9f08      	ldr	r7, [sp, #32]
 800b072:	ea43 0102 	orr.w	r1, r3, r2
 800b076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b078:	430b      	orrs	r3, r1
 800b07a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b07c:	d10d      	bne.n	800b09a <_dtoa_r+0xa82>
 800b07e:	2b39      	cmp	r3, #57	; 0x39
 800b080:	d029      	beq.n	800b0d6 <_dtoa_r+0xabe>
 800b082:	f1b9 0f00 	cmp.w	r9, #0
 800b086:	dd01      	ble.n	800b08c <_dtoa_r+0xa74>
 800b088:	9b06      	ldr	r3, [sp, #24]
 800b08a:	3331      	adds	r3, #49	; 0x31
 800b08c:	9a04      	ldr	r2, [sp, #16]
 800b08e:	7013      	strb	r3, [r2, #0]
 800b090:	e776      	b.n	800af80 <_dtoa_r+0x968>
 800b092:	4630      	mov	r0, r6
 800b094:	e7b9      	b.n	800b00a <_dtoa_r+0x9f2>
 800b096:	2201      	movs	r2, #1
 800b098:	e7e2      	b.n	800b060 <_dtoa_r+0xa48>
 800b09a:	f1b9 0f00 	cmp.w	r9, #0
 800b09e:	db06      	blt.n	800b0ae <_dtoa_r+0xa96>
 800b0a0:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b0a2:	ea41 0909 	orr.w	r9, r1, r9
 800b0a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b0a8:	ea59 0101 	orrs.w	r1, r9, r1
 800b0ac:	d120      	bne.n	800b0f0 <_dtoa_r+0xad8>
 800b0ae:	2a00      	cmp	r2, #0
 800b0b0:	ddec      	ble.n	800b08c <_dtoa_r+0xa74>
 800b0b2:	4659      	mov	r1, fp
 800b0b4:	2201      	movs	r2, #1
 800b0b6:	4628      	mov	r0, r5
 800b0b8:	9308      	str	r3, [sp, #32]
 800b0ba:	f000 fe93 	bl	800bde4 <__lshift>
 800b0be:	4621      	mov	r1, r4
 800b0c0:	4683      	mov	fp, r0
 800b0c2:	f000 feff 	bl	800bec4 <__mcmp>
 800b0c6:	2800      	cmp	r0, #0
 800b0c8:	9b08      	ldr	r3, [sp, #32]
 800b0ca:	dc02      	bgt.n	800b0d2 <_dtoa_r+0xaba>
 800b0cc:	d1de      	bne.n	800b08c <_dtoa_r+0xa74>
 800b0ce:	07da      	lsls	r2, r3, #31
 800b0d0:	d5dc      	bpl.n	800b08c <_dtoa_r+0xa74>
 800b0d2:	2b39      	cmp	r3, #57	; 0x39
 800b0d4:	d1d8      	bne.n	800b088 <_dtoa_r+0xa70>
 800b0d6:	2339      	movs	r3, #57	; 0x39
 800b0d8:	9a04      	ldr	r2, [sp, #16]
 800b0da:	7013      	strb	r3, [r2, #0]
 800b0dc:	463b      	mov	r3, r7
 800b0de:	461f      	mov	r7, r3
 800b0e0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b0e4:	3b01      	subs	r3, #1
 800b0e6:	2a39      	cmp	r2, #57	; 0x39
 800b0e8:	d050      	beq.n	800b18c <_dtoa_r+0xb74>
 800b0ea:	3201      	adds	r2, #1
 800b0ec:	701a      	strb	r2, [r3, #0]
 800b0ee:	e747      	b.n	800af80 <_dtoa_r+0x968>
 800b0f0:	2a00      	cmp	r2, #0
 800b0f2:	dd03      	ble.n	800b0fc <_dtoa_r+0xae4>
 800b0f4:	2b39      	cmp	r3, #57	; 0x39
 800b0f6:	d0ee      	beq.n	800b0d6 <_dtoa_r+0xabe>
 800b0f8:	3301      	adds	r3, #1
 800b0fa:	e7c7      	b.n	800b08c <_dtoa_r+0xa74>
 800b0fc:	9a08      	ldr	r2, [sp, #32]
 800b0fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b100:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b104:	428a      	cmp	r2, r1
 800b106:	d02a      	beq.n	800b15e <_dtoa_r+0xb46>
 800b108:	4659      	mov	r1, fp
 800b10a:	2300      	movs	r3, #0
 800b10c:	220a      	movs	r2, #10
 800b10e:	4628      	mov	r0, r5
 800b110:	f000 fc72 	bl	800b9f8 <__multadd>
 800b114:	45b0      	cmp	r8, r6
 800b116:	4683      	mov	fp, r0
 800b118:	f04f 0300 	mov.w	r3, #0
 800b11c:	f04f 020a 	mov.w	r2, #10
 800b120:	4641      	mov	r1, r8
 800b122:	4628      	mov	r0, r5
 800b124:	d107      	bne.n	800b136 <_dtoa_r+0xb1e>
 800b126:	f000 fc67 	bl	800b9f8 <__multadd>
 800b12a:	4680      	mov	r8, r0
 800b12c:	4606      	mov	r6, r0
 800b12e:	9b08      	ldr	r3, [sp, #32]
 800b130:	3301      	adds	r3, #1
 800b132:	9308      	str	r3, [sp, #32]
 800b134:	e775      	b.n	800b022 <_dtoa_r+0xa0a>
 800b136:	f000 fc5f 	bl	800b9f8 <__multadd>
 800b13a:	4631      	mov	r1, r6
 800b13c:	4680      	mov	r8, r0
 800b13e:	2300      	movs	r3, #0
 800b140:	220a      	movs	r2, #10
 800b142:	4628      	mov	r0, r5
 800b144:	f000 fc58 	bl	800b9f8 <__multadd>
 800b148:	4606      	mov	r6, r0
 800b14a:	e7f0      	b.n	800b12e <_dtoa_r+0xb16>
 800b14c:	f1b9 0f00 	cmp.w	r9, #0
 800b150:	bfcc      	ite	gt
 800b152:	464f      	movgt	r7, r9
 800b154:	2701      	movle	r7, #1
 800b156:	f04f 0800 	mov.w	r8, #0
 800b15a:	9a03      	ldr	r2, [sp, #12]
 800b15c:	4417      	add	r7, r2
 800b15e:	4659      	mov	r1, fp
 800b160:	2201      	movs	r2, #1
 800b162:	4628      	mov	r0, r5
 800b164:	9308      	str	r3, [sp, #32]
 800b166:	f000 fe3d 	bl	800bde4 <__lshift>
 800b16a:	4621      	mov	r1, r4
 800b16c:	4683      	mov	fp, r0
 800b16e:	f000 fea9 	bl	800bec4 <__mcmp>
 800b172:	2800      	cmp	r0, #0
 800b174:	dcb2      	bgt.n	800b0dc <_dtoa_r+0xac4>
 800b176:	d102      	bne.n	800b17e <_dtoa_r+0xb66>
 800b178:	9b08      	ldr	r3, [sp, #32]
 800b17a:	07db      	lsls	r3, r3, #31
 800b17c:	d4ae      	bmi.n	800b0dc <_dtoa_r+0xac4>
 800b17e:	463b      	mov	r3, r7
 800b180:	461f      	mov	r7, r3
 800b182:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b186:	2a30      	cmp	r2, #48	; 0x30
 800b188:	d0fa      	beq.n	800b180 <_dtoa_r+0xb68>
 800b18a:	e6f9      	b.n	800af80 <_dtoa_r+0x968>
 800b18c:	9a03      	ldr	r2, [sp, #12]
 800b18e:	429a      	cmp	r2, r3
 800b190:	d1a5      	bne.n	800b0de <_dtoa_r+0xac6>
 800b192:	2331      	movs	r3, #49	; 0x31
 800b194:	f10a 0a01 	add.w	sl, sl, #1
 800b198:	e779      	b.n	800b08e <_dtoa_r+0xa76>
 800b19a:	4b14      	ldr	r3, [pc, #80]	; (800b1ec <_dtoa_r+0xbd4>)
 800b19c:	f7ff baa8 	b.w	800a6f0 <_dtoa_r+0xd8>
 800b1a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	f47f aa81 	bne.w	800a6aa <_dtoa_r+0x92>
 800b1a8:	4b11      	ldr	r3, [pc, #68]	; (800b1f0 <_dtoa_r+0xbd8>)
 800b1aa:	f7ff baa1 	b.w	800a6f0 <_dtoa_r+0xd8>
 800b1ae:	f1b9 0f00 	cmp.w	r9, #0
 800b1b2:	dc03      	bgt.n	800b1bc <_dtoa_r+0xba4>
 800b1b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b1b6:	2b02      	cmp	r3, #2
 800b1b8:	f73f aecb 	bgt.w	800af52 <_dtoa_r+0x93a>
 800b1bc:	9f03      	ldr	r7, [sp, #12]
 800b1be:	4621      	mov	r1, r4
 800b1c0:	4658      	mov	r0, fp
 800b1c2:	f7ff f99d 	bl	800a500 <quorem>
 800b1c6:	9a03      	ldr	r2, [sp, #12]
 800b1c8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b1cc:	f807 3b01 	strb.w	r3, [r7], #1
 800b1d0:	1aba      	subs	r2, r7, r2
 800b1d2:	4591      	cmp	r9, r2
 800b1d4:	ddba      	ble.n	800b14c <_dtoa_r+0xb34>
 800b1d6:	4659      	mov	r1, fp
 800b1d8:	2300      	movs	r3, #0
 800b1da:	220a      	movs	r2, #10
 800b1dc:	4628      	mov	r0, r5
 800b1de:	f000 fc0b 	bl	800b9f8 <__multadd>
 800b1e2:	4683      	mov	fp, r0
 800b1e4:	e7eb      	b.n	800b1be <_dtoa_r+0xba6>
 800b1e6:	bf00      	nop
 800b1e8:	0800e770 	.word	0x0800e770
 800b1ec:	0800e570 	.word	0x0800e570
 800b1f0:	0800e6f1 	.word	0x0800e6f1

0800b1f4 <rshift>:
 800b1f4:	6903      	ldr	r3, [r0, #16]
 800b1f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b1fa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b1fe:	f100 0414 	add.w	r4, r0, #20
 800b202:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b206:	dd46      	ble.n	800b296 <rshift+0xa2>
 800b208:	f011 011f 	ands.w	r1, r1, #31
 800b20c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b210:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b214:	d10c      	bne.n	800b230 <rshift+0x3c>
 800b216:	4629      	mov	r1, r5
 800b218:	f100 0710 	add.w	r7, r0, #16
 800b21c:	42b1      	cmp	r1, r6
 800b21e:	d335      	bcc.n	800b28c <rshift+0x98>
 800b220:	1a9b      	subs	r3, r3, r2
 800b222:	009b      	lsls	r3, r3, #2
 800b224:	1eea      	subs	r2, r5, #3
 800b226:	4296      	cmp	r6, r2
 800b228:	bf38      	it	cc
 800b22a:	2300      	movcc	r3, #0
 800b22c:	4423      	add	r3, r4
 800b22e:	e015      	b.n	800b25c <rshift+0x68>
 800b230:	46a1      	mov	r9, r4
 800b232:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b236:	f1c1 0820 	rsb	r8, r1, #32
 800b23a:	40cf      	lsrs	r7, r1
 800b23c:	f105 0e04 	add.w	lr, r5, #4
 800b240:	4576      	cmp	r6, lr
 800b242:	46f4      	mov	ip, lr
 800b244:	d816      	bhi.n	800b274 <rshift+0x80>
 800b246:	1a9a      	subs	r2, r3, r2
 800b248:	0092      	lsls	r2, r2, #2
 800b24a:	3a04      	subs	r2, #4
 800b24c:	3501      	adds	r5, #1
 800b24e:	42ae      	cmp	r6, r5
 800b250:	bf38      	it	cc
 800b252:	2200      	movcc	r2, #0
 800b254:	18a3      	adds	r3, r4, r2
 800b256:	50a7      	str	r7, [r4, r2]
 800b258:	b107      	cbz	r7, 800b25c <rshift+0x68>
 800b25a:	3304      	adds	r3, #4
 800b25c:	42a3      	cmp	r3, r4
 800b25e:	eba3 0204 	sub.w	r2, r3, r4
 800b262:	bf08      	it	eq
 800b264:	2300      	moveq	r3, #0
 800b266:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b26a:	6102      	str	r2, [r0, #16]
 800b26c:	bf08      	it	eq
 800b26e:	6143      	streq	r3, [r0, #20]
 800b270:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b274:	f8dc c000 	ldr.w	ip, [ip]
 800b278:	fa0c fc08 	lsl.w	ip, ip, r8
 800b27c:	ea4c 0707 	orr.w	r7, ip, r7
 800b280:	f849 7b04 	str.w	r7, [r9], #4
 800b284:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b288:	40cf      	lsrs	r7, r1
 800b28a:	e7d9      	b.n	800b240 <rshift+0x4c>
 800b28c:	f851 cb04 	ldr.w	ip, [r1], #4
 800b290:	f847 cf04 	str.w	ip, [r7, #4]!
 800b294:	e7c2      	b.n	800b21c <rshift+0x28>
 800b296:	4623      	mov	r3, r4
 800b298:	e7e0      	b.n	800b25c <rshift+0x68>

0800b29a <__hexdig_fun>:
 800b29a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b29e:	2b09      	cmp	r3, #9
 800b2a0:	d802      	bhi.n	800b2a8 <__hexdig_fun+0xe>
 800b2a2:	3820      	subs	r0, #32
 800b2a4:	b2c0      	uxtb	r0, r0
 800b2a6:	4770      	bx	lr
 800b2a8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b2ac:	2b05      	cmp	r3, #5
 800b2ae:	d801      	bhi.n	800b2b4 <__hexdig_fun+0x1a>
 800b2b0:	3847      	subs	r0, #71	; 0x47
 800b2b2:	e7f7      	b.n	800b2a4 <__hexdig_fun+0xa>
 800b2b4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b2b8:	2b05      	cmp	r3, #5
 800b2ba:	d801      	bhi.n	800b2c0 <__hexdig_fun+0x26>
 800b2bc:	3827      	subs	r0, #39	; 0x27
 800b2be:	e7f1      	b.n	800b2a4 <__hexdig_fun+0xa>
 800b2c0:	2000      	movs	r0, #0
 800b2c2:	4770      	bx	lr

0800b2c4 <__gethex>:
 800b2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2c8:	b08b      	sub	sp, #44	; 0x2c
 800b2ca:	9305      	str	r3, [sp, #20]
 800b2cc:	4bb2      	ldr	r3, [pc, #712]	; (800b598 <__gethex+0x2d4>)
 800b2ce:	9002      	str	r0, [sp, #8]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	468b      	mov	fp, r1
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	4690      	mov	r8, r2
 800b2d8:	9303      	str	r3, [sp, #12]
 800b2da:	f7f4 ff39 	bl	8000150 <strlen>
 800b2de:	4682      	mov	sl, r0
 800b2e0:	9b03      	ldr	r3, [sp, #12]
 800b2e2:	f8db 2000 	ldr.w	r2, [fp]
 800b2e6:	4403      	add	r3, r0
 800b2e8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b2ec:	9306      	str	r3, [sp, #24]
 800b2ee:	1c93      	adds	r3, r2, #2
 800b2f0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b2f4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b2f8:	32fe      	adds	r2, #254	; 0xfe
 800b2fa:	18d1      	adds	r1, r2, r3
 800b2fc:	461f      	mov	r7, r3
 800b2fe:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b302:	9101      	str	r1, [sp, #4]
 800b304:	2830      	cmp	r0, #48	; 0x30
 800b306:	d0f8      	beq.n	800b2fa <__gethex+0x36>
 800b308:	f7ff ffc7 	bl	800b29a <__hexdig_fun>
 800b30c:	4604      	mov	r4, r0
 800b30e:	2800      	cmp	r0, #0
 800b310:	d13a      	bne.n	800b388 <__gethex+0xc4>
 800b312:	4652      	mov	r2, sl
 800b314:	4638      	mov	r0, r7
 800b316:	9903      	ldr	r1, [sp, #12]
 800b318:	f001 fa26 	bl	800c768 <strncmp>
 800b31c:	4605      	mov	r5, r0
 800b31e:	2800      	cmp	r0, #0
 800b320:	d166      	bne.n	800b3f0 <__gethex+0x12c>
 800b322:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b326:	eb07 060a 	add.w	r6, r7, sl
 800b32a:	f7ff ffb6 	bl	800b29a <__hexdig_fun>
 800b32e:	2800      	cmp	r0, #0
 800b330:	d060      	beq.n	800b3f4 <__gethex+0x130>
 800b332:	4633      	mov	r3, r6
 800b334:	7818      	ldrb	r0, [r3, #0]
 800b336:	461f      	mov	r7, r3
 800b338:	2830      	cmp	r0, #48	; 0x30
 800b33a:	f103 0301 	add.w	r3, r3, #1
 800b33e:	d0f9      	beq.n	800b334 <__gethex+0x70>
 800b340:	f7ff ffab 	bl	800b29a <__hexdig_fun>
 800b344:	2301      	movs	r3, #1
 800b346:	fab0 f480 	clz	r4, r0
 800b34a:	4635      	mov	r5, r6
 800b34c:	0964      	lsrs	r4, r4, #5
 800b34e:	9301      	str	r3, [sp, #4]
 800b350:	463a      	mov	r2, r7
 800b352:	4616      	mov	r6, r2
 800b354:	7830      	ldrb	r0, [r6, #0]
 800b356:	3201      	adds	r2, #1
 800b358:	f7ff ff9f 	bl	800b29a <__hexdig_fun>
 800b35c:	2800      	cmp	r0, #0
 800b35e:	d1f8      	bne.n	800b352 <__gethex+0x8e>
 800b360:	4652      	mov	r2, sl
 800b362:	4630      	mov	r0, r6
 800b364:	9903      	ldr	r1, [sp, #12]
 800b366:	f001 f9ff 	bl	800c768 <strncmp>
 800b36a:	b980      	cbnz	r0, 800b38e <__gethex+0xca>
 800b36c:	b94d      	cbnz	r5, 800b382 <__gethex+0xbe>
 800b36e:	eb06 050a 	add.w	r5, r6, sl
 800b372:	462a      	mov	r2, r5
 800b374:	4616      	mov	r6, r2
 800b376:	7830      	ldrb	r0, [r6, #0]
 800b378:	3201      	adds	r2, #1
 800b37a:	f7ff ff8e 	bl	800b29a <__hexdig_fun>
 800b37e:	2800      	cmp	r0, #0
 800b380:	d1f8      	bne.n	800b374 <__gethex+0xb0>
 800b382:	1bad      	subs	r5, r5, r6
 800b384:	00ad      	lsls	r5, r5, #2
 800b386:	e004      	b.n	800b392 <__gethex+0xce>
 800b388:	2400      	movs	r4, #0
 800b38a:	4625      	mov	r5, r4
 800b38c:	e7e0      	b.n	800b350 <__gethex+0x8c>
 800b38e:	2d00      	cmp	r5, #0
 800b390:	d1f7      	bne.n	800b382 <__gethex+0xbe>
 800b392:	7833      	ldrb	r3, [r6, #0]
 800b394:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b398:	2b50      	cmp	r3, #80	; 0x50
 800b39a:	d139      	bne.n	800b410 <__gethex+0x14c>
 800b39c:	7873      	ldrb	r3, [r6, #1]
 800b39e:	2b2b      	cmp	r3, #43	; 0x2b
 800b3a0:	d02a      	beq.n	800b3f8 <__gethex+0x134>
 800b3a2:	2b2d      	cmp	r3, #45	; 0x2d
 800b3a4:	d02c      	beq.n	800b400 <__gethex+0x13c>
 800b3a6:	f04f 0900 	mov.w	r9, #0
 800b3aa:	1c71      	adds	r1, r6, #1
 800b3ac:	7808      	ldrb	r0, [r1, #0]
 800b3ae:	f7ff ff74 	bl	800b29a <__hexdig_fun>
 800b3b2:	1e43      	subs	r3, r0, #1
 800b3b4:	b2db      	uxtb	r3, r3
 800b3b6:	2b18      	cmp	r3, #24
 800b3b8:	d82a      	bhi.n	800b410 <__gethex+0x14c>
 800b3ba:	f1a0 0210 	sub.w	r2, r0, #16
 800b3be:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b3c2:	f7ff ff6a 	bl	800b29a <__hexdig_fun>
 800b3c6:	1e43      	subs	r3, r0, #1
 800b3c8:	b2db      	uxtb	r3, r3
 800b3ca:	2b18      	cmp	r3, #24
 800b3cc:	d91b      	bls.n	800b406 <__gethex+0x142>
 800b3ce:	f1b9 0f00 	cmp.w	r9, #0
 800b3d2:	d000      	beq.n	800b3d6 <__gethex+0x112>
 800b3d4:	4252      	negs	r2, r2
 800b3d6:	4415      	add	r5, r2
 800b3d8:	f8cb 1000 	str.w	r1, [fp]
 800b3dc:	b1d4      	cbz	r4, 800b414 <__gethex+0x150>
 800b3de:	9b01      	ldr	r3, [sp, #4]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	bf14      	ite	ne
 800b3e4:	2700      	movne	r7, #0
 800b3e6:	2706      	moveq	r7, #6
 800b3e8:	4638      	mov	r0, r7
 800b3ea:	b00b      	add	sp, #44	; 0x2c
 800b3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3f0:	463e      	mov	r6, r7
 800b3f2:	4625      	mov	r5, r4
 800b3f4:	2401      	movs	r4, #1
 800b3f6:	e7cc      	b.n	800b392 <__gethex+0xce>
 800b3f8:	f04f 0900 	mov.w	r9, #0
 800b3fc:	1cb1      	adds	r1, r6, #2
 800b3fe:	e7d5      	b.n	800b3ac <__gethex+0xe8>
 800b400:	f04f 0901 	mov.w	r9, #1
 800b404:	e7fa      	b.n	800b3fc <__gethex+0x138>
 800b406:	230a      	movs	r3, #10
 800b408:	fb03 0202 	mla	r2, r3, r2, r0
 800b40c:	3a10      	subs	r2, #16
 800b40e:	e7d6      	b.n	800b3be <__gethex+0xfa>
 800b410:	4631      	mov	r1, r6
 800b412:	e7e1      	b.n	800b3d8 <__gethex+0x114>
 800b414:	4621      	mov	r1, r4
 800b416:	1bf3      	subs	r3, r6, r7
 800b418:	3b01      	subs	r3, #1
 800b41a:	2b07      	cmp	r3, #7
 800b41c:	dc0a      	bgt.n	800b434 <__gethex+0x170>
 800b41e:	9802      	ldr	r0, [sp, #8]
 800b420:	f000 fa88 	bl	800b934 <_Balloc>
 800b424:	4604      	mov	r4, r0
 800b426:	b940      	cbnz	r0, 800b43a <__gethex+0x176>
 800b428:	4602      	mov	r2, r0
 800b42a:	21de      	movs	r1, #222	; 0xde
 800b42c:	4b5b      	ldr	r3, [pc, #364]	; (800b59c <__gethex+0x2d8>)
 800b42e:	485c      	ldr	r0, [pc, #368]	; (800b5a0 <__gethex+0x2dc>)
 800b430:	f001 f9bc 	bl	800c7ac <__assert_func>
 800b434:	3101      	adds	r1, #1
 800b436:	105b      	asrs	r3, r3, #1
 800b438:	e7ef      	b.n	800b41a <__gethex+0x156>
 800b43a:	f04f 0b00 	mov.w	fp, #0
 800b43e:	f100 0914 	add.w	r9, r0, #20
 800b442:	f1ca 0301 	rsb	r3, sl, #1
 800b446:	f8cd 9010 	str.w	r9, [sp, #16]
 800b44a:	f8cd b004 	str.w	fp, [sp, #4]
 800b44e:	9308      	str	r3, [sp, #32]
 800b450:	42b7      	cmp	r7, r6
 800b452:	d33f      	bcc.n	800b4d4 <__gethex+0x210>
 800b454:	9f04      	ldr	r7, [sp, #16]
 800b456:	9b01      	ldr	r3, [sp, #4]
 800b458:	f847 3b04 	str.w	r3, [r7], #4
 800b45c:	eba7 0709 	sub.w	r7, r7, r9
 800b460:	10bf      	asrs	r7, r7, #2
 800b462:	6127      	str	r7, [r4, #16]
 800b464:	4618      	mov	r0, r3
 800b466:	f000 fb57 	bl	800bb18 <__hi0bits>
 800b46a:	017f      	lsls	r7, r7, #5
 800b46c:	f8d8 6000 	ldr.w	r6, [r8]
 800b470:	1a3f      	subs	r7, r7, r0
 800b472:	42b7      	cmp	r7, r6
 800b474:	dd62      	ble.n	800b53c <__gethex+0x278>
 800b476:	1bbf      	subs	r7, r7, r6
 800b478:	4639      	mov	r1, r7
 800b47a:	4620      	mov	r0, r4
 800b47c:	f000 fef1 	bl	800c262 <__any_on>
 800b480:	4682      	mov	sl, r0
 800b482:	b1a8      	cbz	r0, 800b4b0 <__gethex+0x1ec>
 800b484:	f04f 0a01 	mov.w	sl, #1
 800b488:	1e7b      	subs	r3, r7, #1
 800b48a:	1159      	asrs	r1, r3, #5
 800b48c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b490:	f003 021f 	and.w	r2, r3, #31
 800b494:	fa0a f202 	lsl.w	r2, sl, r2
 800b498:	420a      	tst	r2, r1
 800b49a:	d009      	beq.n	800b4b0 <__gethex+0x1ec>
 800b49c:	4553      	cmp	r3, sl
 800b49e:	dd05      	ble.n	800b4ac <__gethex+0x1e8>
 800b4a0:	4620      	mov	r0, r4
 800b4a2:	1eb9      	subs	r1, r7, #2
 800b4a4:	f000 fedd 	bl	800c262 <__any_on>
 800b4a8:	2800      	cmp	r0, #0
 800b4aa:	d144      	bne.n	800b536 <__gethex+0x272>
 800b4ac:	f04f 0a02 	mov.w	sl, #2
 800b4b0:	4639      	mov	r1, r7
 800b4b2:	4620      	mov	r0, r4
 800b4b4:	f7ff fe9e 	bl	800b1f4 <rshift>
 800b4b8:	443d      	add	r5, r7
 800b4ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b4be:	42ab      	cmp	r3, r5
 800b4c0:	da4a      	bge.n	800b558 <__gethex+0x294>
 800b4c2:	4621      	mov	r1, r4
 800b4c4:	9802      	ldr	r0, [sp, #8]
 800b4c6:	f000 fa75 	bl	800b9b4 <_Bfree>
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b4ce:	27a3      	movs	r7, #163	; 0xa3
 800b4d0:	6013      	str	r3, [r2, #0]
 800b4d2:	e789      	b.n	800b3e8 <__gethex+0x124>
 800b4d4:	1e73      	subs	r3, r6, #1
 800b4d6:	9a06      	ldr	r2, [sp, #24]
 800b4d8:	9307      	str	r3, [sp, #28]
 800b4da:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d019      	beq.n	800b516 <__gethex+0x252>
 800b4e2:	f1bb 0f20 	cmp.w	fp, #32
 800b4e6:	d107      	bne.n	800b4f8 <__gethex+0x234>
 800b4e8:	9b04      	ldr	r3, [sp, #16]
 800b4ea:	9a01      	ldr	r2, [sp, #4]
 800b4ec:	f843 2b04 	str.w	r2, [r3], #4
 800b4f0:	9304      	str	r3, [sp, #16]
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	469b      	mov	fp, r3
 800b4f6:	9301      	str	r3, [sp, #4]
 800b4f8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b4fc:	f7ff fecd 	bl	800b29a <__hexdig_fun>
 800b500:	9b01      	ldr	r3, [sp, #4]
 800b502:	f000 000f 	and.w	r0, r0, #15
 800b506:	fa00 f00b 	lsl.w	r0, r0, fp
 800b50a:	4303      	orrs	r3, r0
 800b50c:	9301      	str	r3, [sp, #4]
 800b50e:	f10b 0b04 	add.w	fp, fp, #4
 800b512:	9b07      	ldr	r3, [sp, #28]
 800b514:	e00d      	b.n	800b532 <__gethex+0x26e>
 800b516:	9a08      	ldr	r2, [sp, #32]
 800b518:	1e73      	subs	r3, r6, #1
 800b51a:	4413      	add	r3, r2
 800b51c:	42bb      	cmp	r3, r7
 800b51e:	d3e0      	bcc.n	800b4e2 <__gethex+0x21e>
 800b520:	4618      	mov	r0, r3
 800b522:	4652      	mov	r2, sl
 800b524:	9903      	ldr	r1, [sp, #12]
 800b526:	9309      	str	r3, [sp, #36]	; 0x24
 800b528:	f001 f91e 	bl	800c768 <strncmp>
 800b52c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b52e:	2800      	cmp	r0, #0
 800b530:	d1d7      	bne.n	800b4e2 <__gethex+0x21e>
 800b532:	461e      	mov	r6, r3
 800b534:	e78c      	b.n	800b450 <__gethex+0x18c>
 800b536:	f04f 0a03 	mov.w	sl, #3
 800b53a:	e7b9      	b.n	800b4b0 <__gethex+0x1ec>
 800b53c:	da09      	bge.n	800b552 <__gethex+0x28e>
 800b53e:	1bf7      	subs	r7, r6, r7
 800b540:	4621      	mov	r1, r4
 800b542:	463a      	mov	r2, r7
 800b544:	9802      	ldr	r0, [sp, #8]
 800b546:	f000 fc4d 	bl	800bde4 <__lshift>
 800b54a:	4604      	mov	r4, r0
 800b54c:	1bed      	subs	r5, r5, r7
 800b54e:	f100 0914 	add.w	r9, r0, #20
 800b552:	f04f 0a00 	mov.w	sl, #0
 800b556:	e7b0      	b.n	800b4ba <__gethex+0x1f6>
 800b558:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b55c:	42a8      	cmp	r0, r5
 800b55e:	dd72      	ble.n	800b646 <__gethex+0x382>
 800b560:	1b45      	subs	r5, r0, r5
 800b562:	42ae      	cmp	r6, r5
 800b564:	dc35      	bgt.n	800b5d2 <__gethex+0x30e>
 800b566:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b56a:	2b02      	cmp	r3, #2
 800b56c:	d029      	beq.n	800b5c2 <__gethex+0x2fe>
 800b56e:	2b03      	cmp	r3, #3
 800b570:	d02b      	beq.n	800b5ca <__gethex+0x306>
 800b572:	2b01      	cmp	r3, #1
 800b574:	d11c      	bne.n	800b5b0 <__gethex+0x2ec>
 800b576:	42ae      	cmp	r6, r5
 800b578:	d11a      	bne.n	800b5b0 <__gethex+0x2ec>
 800b57a:	2e01      	cmp	r6, #1
 800b57c:	d112      	bne.n	800b5a4 <__gethex+0x2e0>
 800b57e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b582:	9a05      	ldr	r2, [sp, #20]
 800b584:	2762      	movs	r7, #98	; 0x62
 800b586:	6013      	str	r3, [r2, #0]
 800b588:	2301      	movs	r3, #1
 800b58a:	6123      	str	r3, [r4, #16]
 800b58c:	f8c9 3000 	str.w	r3, [r9]
 800b590:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b592:	601c      	str	r4, [r3, #0]
 800b594:	e728      	b.n	800b3e8 <__gethex+0x124>
 800b596:	bf00      	nop
 800b598:	0800e7e8 	.word	0x0800e7e8
 800b59c:	0800e770 	.word	0x0800e770
 800b5a0:	0800e781 	.word	0x0800e781
 800b5a4:	4620      	mov	r0, r4
 800b5a6:	1e71      	subs	r1, r6, #1
 800b5a8:	f000 fe5b 	bl	800c262 <__any_on>
 800b5ac:	2800      	cmp	r0, #0
 800b5ae:	d1e6      	bne.n	800b57e <__gethex+0x2ba>
 800b5b0:	4621      	mov	r1, r4
 800b5b2:	9802      	ldr	r0, [sp, #8]
 800b5b4:	f000 f9fe 	bl	800b9b4 <_Bfree>
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b5bc:	2750      	movs	r7, #80	; 0x50
 800b5be:	6013      	str	r3, [r2, #0]
 800b5c0:	e712      	b.n	800b3e8 <__gethex+0x124>
 800b5c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d1f3      	bne.n	800b5b0 <__gethex+0x2ec>
 800b5c8:	e7d9      	b.n	800b57e <__gethex+0x2ba>
 800b5ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d1d6      	bne.n	800b57e <__gethex+0x2ba>
 800b5d0:	e7ee      	b.n	800b5b0 <__gethex+0x2ec>
 800b5d2:	1e6f      	subs	r7, r5, #1
 800b5d4:	f1ba 0f00 	cmp.w	sl, #0
 800b5d8:	d132      	bne.n	800b640 <__gethex+0x37c>
 800b5da:	b127      	cbz	r7, 800b5e6 <__gethex+0x322>
 800b5dc:	4639      	mov	r1, r7
 800b5de:	4620      	mov	r0, r4
 800b5e0:	f000 fe3f 	bl	800c262 <__any_on>
 800b5e4:	4682      	mov	sl, r0
 800b5e6:	2101      	movs	r1, #1
 800b5e8:	117b      	asrs	r3, r7, #5
 800b5ea:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b5ee:	f007 071f 	and.w	r7, r7, #31
 800b5f2:	fa01 f707 	lsl.w	r7, r1, r7
 800b5f6:	421f      	tst	r7, r3
 800b5f8:	f04f 0702 	mov.w	r7, #2
 800b5fc:	4629      	mov	r1, r5
 800b5fe:	4620      	mov	r0, r4
 800b600:	bf18      	it	ne
 800b602:	f04a 0a02 	orrne.w	sl, sl, #2
 800b606:	1b76      	subs	r6, r6, r5
 800b608:	f7ff fdf4 	bl	800b1f4 <rshift>
 800b60c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b610:	f1ba 0f00 	cmp.w	sl, #0
 800b614:	d048      	beq.n	800b6a8 <__gethex+0x3e4>
 800b616:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b61a:	2b02      	cmp	r3, #2
 800b61c:	d015      	beq.n	800b64a <__gethex+0x386>
 800b61e:	2b03      	cmp	r3, #3
 800b620:	d017      	beq.n	800b652 <__gethex+0x38e>
 800b622:	2b01      	cmp	r3, #1
 800b624:	d109      	bne.n	800b63a <__gethex+0x376>
 800b626:	f01a 0f02 	tst.w	sl, #2
 800b62a:	d006      	beq.n	800b63a <__gethex+0x376>
 800b62c:	f8d9 0000 	ldr.w	r0, [r9]
 800b630:	ea4a 0a00 	orr.w	sl, sl, r0
 800b634:	f01a 0f01 	tst.w	sl, #1
 800b638:	d10e      	bne.n	800b658 <__gethex+0x394>
 800b63a:	f047 0710 	orr.w	r7, r7, #16
 800b63e:	e033      	b.n	800b6a8 <__gethex+0x3e4>
 800b640:	f04f 0a01 	mov.w	sl, #1
 800b644:	e7cf      	b.n	800b5e6 <__gethex+0x322>
 800b646:	2701      	movs	r7, #1
 800b648:	e7e2      	b.n	800b610 <__gethex+0x34c>
 800b64a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b64c:	f1c3 0301 	rsb	r3, r3, #1
 800b650:	9315      	str	r3, [sp, #84]	; 0x54
 800b652:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b654:	2b00      	cmp	r3, #0
 800b656:	d0f0      	beq.n	800b63a <__gethex+0x376>
 800b658:	f04f 0c00 	mov.w	ip, #0
 800b65c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b660:	f104 0314 	add.w	r3, r4, #20
 800b664:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b668:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b66c:	4618      	mov	r0, r3
 800b66e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b672:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b676:	d01c      	beq.n	800b6b2 <__gethex+0x3ee>
 800b678:	3201      	adds	r2, #1
 800b67a:	6002      	str	r2, [r0, #0]
 800b67c:	2f02      	cmp	r7, #2
 800b67e:	f104 0314 	add.w	r3, r4, #20
 800b682:	d13d      	bne.n	800b700 <__gethex+0x43c>
 800b684:	f8d8 2000 	ldr.w	r2, [r8]
 800b688:	3a01      	subs	r2, #1
 800b68a:	42b2      	cmp	r2, r6
 800b68c:	d10a      	bne.n	800b6a4 <__gethex+0x3e0>
 800b68e:	2201      	movs	r2, #1
 800b690:	1171      	asrs	r1, r6, #5
 800b692:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b696:	f006 061f 	and.w	r6, r6, #31
 800b69a:	fa02 f606 	lsl.w	r6, r2, r6
 800b69e:	421e      	tst	r6, r3
 800b6a0:	bf18      	it	ne
 800b6a2:	4617      	movne	r7, r2
 800b6a4:	f047 0720 	orr.w	r7, r7, #32
 800b6a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b6aa:	601c      	str	r4, [r3, #0]
 800b6ac:	9b05      	ldr	r3, [sp, #20]
 800b6ae:	601d      	str	r5, [r3, #0]
 800b6b0:	e69a      	b.n	800b3e8 <__gethex+0x124>
 800b6b2:	4299      	cmp	r1, r3
 800b6b4:	f843 cc04 	str.w	ip, [r3, #-4]
 800b6b8:	d8d8      	bhi.n	800b66c <__gethex+0x3a8>
 800b6ba:	68a3      	ldr	r3, [r4, #8]
 800b6bc:	459b      	cmp	fp, r3
 800b6be:	db17      	blt.n	800b6f0 <__gethex+0x42c>
 800b6c0:	6861      	ldr	r1, [r4, #4]
 800b6c2:	9802      	ldr	r0, [sp, #8]
 800b6c4:	3101      	adds	r1, #1
 800b6c6:	f000 f935 	bl	800b934 <_Balloc>
 800b6ca:	4681      	mov	r9, r0
 800b6cc:	b918      	cbnz	r0, 800b6d6 <__gethex+0x412>
 800b6ce:	4602      	mov	r2, r0
 800b6d0:	2184      	movs	r1, #132	; 0x84
 800b6d2:	4b19      	ldr	r3, [pc, #100]	; (800b738 <__gethex+0x474>)
 800b6d4:	e6ab      	b.n	800b42e <__gethex+0x16a>
 800b6d6:	6922      	ldr	r2, [r4, #16]
 800b6d8:	f104 010c 	add.w	r1, r4, #12
 800b6dc:	3202      	adds	r2, #2
 800b6de:	0092      	lsls	r2, r2, #2
 800b6e0:	300c      	adds	r0, #12
 800b6e2:	f000 f919 	bl	800b918 <memcpy>
 800b6e6:	4621      	mov	r1, r4
 800b6e8:	9802      	ldr	r0, [sp, #8]
 800b6ea:	f000 f963 	bl	800b9b4 <_Bfree>
 800b6ee:	464c      	mov	r4, r9
 800b6f0:	6923      	ldr	r3, [r4, #16]
 800b6f2:	1c5a      	adds	r2, r3, #1
 800b6f4:	6122      	str	r2, [r4, #16]
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b6fc:	615a      	str	r2, [r3, #20]
 800b6fe:	e7bd      	b.n	800b67c <__gethex+0x3b8>
 800b700:	6922      	ldr	r2, [r4, #16]
 800b702:	455a      	cmp	r2, fp
 800b704:	dd0b      	ble.n	800b71e <__gethex+0x45a>
 800b706:	2101      	movs	r1, #1
 800b708:	4620      	mov	r0, r4
 800b70a:	f7ff fd73 	bl	800b1f4 <rshift>
 800b70e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b712:	3501      	adds	r5, #1
 800b714:	42ab      	cmp	r3, r5
 800b716:	f6ff aed4 	blt.w	800b4c2 <__gethex+0x1fe>
 800b71a:	2701      	movs	r7, #1
 800b71c:	e7c2      	b.n	800b6a4 <__gethex+0x3e0>
 800b71e:	f016 061f 	ands.w	r6, r6, #31
 800b722:	d0fa      	beq.n	800b71a <__gethex+0x456>
 800b724:	4453      	add	r3, sl
 800b726:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b72a:	f000 f9f5 	bl	800bb18 <__hi0bits>
 800b72e:	f1c6 0620 	rsb	r6, r6, #32
 800b732:	42b0      	cmp	r0, r6
 800b734:	dbe7      	blt.n	800b706 <__gethex+0x442>
 800b736:	e7f0      	b.n	800b71a <__gethex+0x456>
 800b738:	0800e770 	.word	0x0800e770

0800b73c <L_shift>:
 800b73c:	f1c2 0208 	rsb	r2, r2, #8
 800b740:	0092      	lsls	r2, r2, #2
 800b742:	b570      	push	{r4, r5, r6, lr}
 800b744:	f1c2 0620 	rsb	r6, r2, #32
 800b748:	6843      	ldr	r3, [r0, #4]
 800b74a:	6804      	ldr	r4, [r0, #0]
 800b74c:	fa03 f506 	lsl.w	r5, r3, r6
 800b750:	432c      	orrs	r4, r5
 800b752:	40d3      	lsrs	r3, r2
 800b754:	6004      	str	r4, [r0, #0]
 800b756:	f840 3f04 	str.w	r3, [r0, #4]!
 800b75a:	4288      	cmp	r0, r1
 800b75c:	d3f4      	bcc.n	800b748 <L_shift+0xc>
 800b75e:	bd70      	pop	{r4, r5, r6, pc}

0800b760 <__match>:
 800b760:	b530      	push	{r4, r5, lr}
 800b762:	6803      	ldr	r3, [r0, #0]
 800b764:	3301      	adds	r3, #1
 800b766:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b76a:	b914      	cbnz	r4, 800b772 <__match+0x12>
 800b76c:	6003      	str	r3, [r0, #0]
 800b76e:	2001      	movs	r0, #1
 800b770:	bd30      	pop	{r4, r5, pc}
 800b772:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b776:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b77a:	2d19      	cmp	r5, #25
 800b77c:	bf98      	it	ls
 800b77e:	3220      	addls	r2, #32
 800b780:	42a2      	cmp	r2, r4
 800b782:	d0f0      	beq.n	800b766 <__match+0x6>
 800b784:	2000      	movs	r0, #0
 800b786:	e7f3      	b.n	800b770 <__match+0x10>

0800b788 <__hexnan>:
 800b788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b78c:	2500      	movs	r5, #0
 800b78e:	680b      	ldr	r3, [r1, #0]
 800b790:	4682      	mov	sl, r0
 800b792:	115e      	asrs	r6, r3, #5
 800b794:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b798:	f013 031f 	ands.w	r3, r3, #31
 800b79c:	bf18      	it	ne
 800b79e:	3604      	addne	r6, #4
 800b7a0:	1f37      	subs	r7, r6, #4
 800b7a2:	46b9      	mov	r9, r7
 800b7a4:	463c      	mov	r4, r7
 800b7a6:	46ab      	mov	fp, r5
 800b7a8:	b087      	sub	sp, #28
 800b7aa:	4690      	mov	r8, r2
 800b7ac:	6802      	ldr	r2, [r0, #0]
 800b7ae:	9301      	str	r3, [sp, #4]
 800b7b0:	f846 5c04 	str.w	r5, [r6, #-4]
 800b7b4:	9502      	str	r5, [sp, #8]
 800b7b6:	7851      	ldrb	r1, [r2, #1]
 800b7b8:	1c53      	adds	r3, r2, #1
 800b7ba:	9303      	str	r3, [sp, #12]
 800b7bc:	b341      	cbz	r1, 800b810 <__hexnan+0x88>
 800b7be:	4608      	mov	r0, r1
 800b7c0:	9205      	str	r2, [sp, #20]
 800b7c2:	9104      	str	r1, [sp, #16]
 800b7c4:	f7ff fd69 	bl	800b29a <__hexdig_fun>
 800b7c8:	2800      	cmp	r0, #0
 800b7ca:	d14f      	bne.n	800b86c <__hexnan+0xe4>
 800b7cc:	9904      	ldr	r1, [sp, #16]
 800b7ce:	9a05      	ldr	r2, [sp, #20]
 800b7d0:	2920      	cmp	r1, #32
 800b7d2:	d818      	bhi.n	800b806 <__hexnan+0x7e>
 800b7d4:	9b02      	ldr	r3, [sp, #8]
 800b7d6:	459b      	cmp	fp, r3
 800b7d8:	dd13      	ble.n	800b802 <__hexnan+0x7a>
 800b7da:	454c      	cmp	r4, r9
 800b7dc:	d206      	bcs.n	800b7ec <__hexnan+0x64>
 800b7de:	2d07      	cmp	r5, #7
 800b7e0:	dc04      	bgt.n	800b7ec <__hexnan+0x64>
 800b7e2:	462a      	mov	r2, r5
 800b7e4:	4649      	mov	r1, r9
 800b7e6:	4620      	mov	r0, r4
 800b7e8:	f7ff ffa8 	bl	800b73c <L_shift>
 800b7ec:	4544      	cmp	r4, r8
 800b7ee:	d950      	bls.n	800b892 <__hexnan+0x10a>
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	f1a4 0904 	sub.w	r9, r4, #4
 800b7f6:	f844 3c04 	str.w	r3, [r4, #-4]
 800b7fa:	461d      	mov	r5, r3
 800b7fc:	464c      	mov	r4, r9
 800b7fe:	f8cd b008 	str.w	fp, [sp, #8]
 800b802:	9a03      	ldr	r2, [sp, #12]
 800b804:	e7d7      	b.n	800b7b6 <__hexnan+0x2e>
 800b806:	2929      	cmp	r1, #41	; 0x29
 800b808:	d156      	bne.n	800b8b8 <__hexnan+0x130>
 800b80a:	3202      	adds	r2, #2
 800b80c:	f8ca 2000 	str.w	r2, [sl]
 800b810:	f1bb 0f00 	cmp.w	fp, #0
 800b814:	d050      	beq.n	800b8b8 <__hexnan+0x130>
 800b816:	454c      	cmp	r4, r9
 800b818:	d206      	bcs.n	800b828 <__hexnan+0xa0>
 800b81a:	2d07      	cmp	r5, #7
 800b81c:	dc04      	bgt.n	800b828 <__hexnan+0xa0>
 800b81e:	462a      	mov	r2, r5
 800b820:	4649      	mov	r1, r9
 800b822:	4620      	mov	r0, r4
 800b824:	f7ff ff8a 	bl	800b73c <L_shift>
 800b828:	4544      	cmp	r4, r8
 800b82a:	d934      	bls.n	800b896 <__hexnan+0x10e>
 800b82c:	4623      	mov	r3, r4
 800b82e:	f1a8 0204 	sub.w	r2, r8, #4
 800b832:	f853 1b04 	ldr.w	r1, [r3], #4
 800b836:	429f      	cmp	r7, r3
 800b838:	f842 1f04 	str.w	r1, [r2, #4]!
 800b83c:	d2f9      	bcs.n	800b832 <__hexnan+0xaa>
 800b83e:	1b3b      	subs	r3, r7, r4
 800b840:	f023 0303 	bic.w	r3, r3, #3
 800b844:	3304      	adds	r3, #4
 800b846:	3401      	adds	r4, #1
 800b848:	3e03      	subs	r6, #3
 800b84a:	42b4      	cmp	r4, r6
 800b84c:	bf88      	it	hi
 800b84e:	2304      	movhi	r3, #4
 800b850:	2200      	movs	r2, #0
 800b852:	4443      	add	r3, r8
 800b854:	f843 2b04 	str.w	r2, [r3], #4
 800b858:	429f      	cmp	r7, r3
 800b85a:	d2fb      	bcs.n	800b854 <__hexnan+0xcc>
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	b91b      	cbnz	r3, 800b868 <__hexnan+0xe0>
 800b860:	4547      	cmp	r7, r8
 800b862:	d127      	bne.n	800b8b4 <__hexnan+0x12c>
 800b864:	2301      	movs	r3, #1
 800b866:	603b      	str	r3, [r7, #0]
 800b868:	2005      	movs	r0, #5
 800b86a:	e026      	b.n	800b8ba <__hexnan+0x132>
 800b86c:	3501      	adds	r5, #1
 800b86e:	2d08      	cmp	r5, #8
 800b870:	f10b 0b01 	add.w	fp, fp, #1
 800b874:	dd06      	ble.n	800b884 <__hexnan+0xfc>
 800b876:	4544      	cmp	r4, r8
 800b878:	d9c3      	bls.n	800b802 <__hexnan+0x7a>
 800b87a:	2300      	movs	r3, #0
 800b87c:	2501      	movs	r5, #1
 800b87e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b882:	3c04      	subs	r4, #4
 800b884:	6822      	ldr	r2, [r4, #0]
 800b886:	f000 000f 	and.w	r0, r0, #15
 800b88a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b88e:	6022      	str	r2, [r4, #0]
 800b890:	e7b7      	b.n	800b802 <__hexnan+0x7a>
 800b892:	2508      	movs	r5, #8
 800b894:	e7b5      	b.n	800b802 <__hexnan+0x7a>
 800b896:	9b01      	ldr	r3, [sp, #4]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d0df      	beq.n	800b85c <__hexnan+0xd4>
 800b89c:	f04f 32ff 	mov.w	r2, #4294967295
 800b8a0:	f1c3 0320 	rsb	r3, r3, #32
 800b8a4:	fa22 f303 	lsr.w	r3, r2, r3
 800b8a8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b8ac:	401a      	ands	r2, r3
 800b8ae:	f846 2c04 	str.w	r2, [r6, #-4]
 800b8b2:	e7d3      	b.n	800b85c <__hexnan+0xd4>
 800b8b4:	3f04      	subs	r7, #4
 800b8b6:	e7d1      	b.n	800b85c <__hexnan+0xd4>
 800b8b8:	2004      	movs	r0, #4
 800b8ba:	b007      	add	sp, #28
 800b8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b8c0 <_localeconv_r>:
 800b8c0:	4800      	ldr	r0, [pc, #0]	; (800b8c4 <_localeconv_r+0x4>)
 800b8c2:	4770      	bx	lr
 800b8c4:	20000170 	.word	0x20000170

0800b8c8 <malloc>:
 800b8c8:	4b02      	ldr	r3, [pc, #8]	; (800b8d4 <malloc+0xc>)
 800b8ca:	4601      	mov	r1, r0
 800b8cc:	6818      	ldr	r0, [r3, #0]
 800b8ce:	f000 bd65 	b.w	800c39c <_malloc_r>
 800b8d2:	bf00      	nop
 800b8d4:	20000018 	.word	0x20000018

0800b8d8 <__ascii_mbtowc>:
 800b8d8:	b082      	sub	sp, #8
 800b8da:	b901      	cbnz	r1, 800b8de <__ascii_mbtowc+0x6>
 800b8dc:	a901      	add	r1, sp, #4
 800b8de:	b142      	cbz	r2, 800b8f2 <__ascii_mbtowc+0x1a>
 800b8e0:	b14b      	cbz	r3, 800b8f6 <__ascii_mbtowc+0x1e>
 800b8e2:	7813      	ldrb	r3, [r2, #0]
 800b8e4:	600b      	str	r3, [r1, #0]
 800b8e6:	7812      	ldrb	r2, [r2, #0]
 800b8e8:	1e10      	subs	r0, r2, #0
 800b8ea:	bf18      	it	ne
 800b8ec:	2001      	movne	r0, #1
 800b8ee:	b002      	add	sp, #8
 800b8f0:	4770      	bx	lr
 800b8f2:	4610      	mov	r0, r2
 800b8f4:	e7fb      	b.n	800b8ee <__ascii_mbtowc+0x16>
 800b8f6:	f06f 0001 	mvn.w	r0, #1
 800b8fa:	e7f8      	b.n	800b8ee <__ascii_mbtowc+0x16>

0800b8fc <memchr>:
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	b510      	push	{r4, lr}
 800b900:	b2c9      	uxtb	r1, r1
 800b902:	4402      	add	r2, r0
 800b904:	4293      	cmp	r3, r2
 800b906:	4618      	mov	r0, r3
 800b908:	d101      	bne.n	800b90e <memchr+0x12>
 800b90a:	2000      	movs	r0, #0
 800b90c:	e003      	b.n	800b916 <memchr+0x1a>
 800b90e:	7804      	ldrb	r4, [r0, #0]
 800b910:	3301      	adds	r3, #1
 800b912:	428c      	cmp	r4, r1
 800b914:	d1f6      	bne.n	800b904 <memchr+0x8>
 800b916:	bd10      	pop	{r4, pc}

0800b918 <memcpy>:
 800b918:	440a      	add	r2, r1
 800b91a:	4291      	cmp	r1, r2
 800b91c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b920:	d100      	bne.n	800b924 <memcpy+0xc>
 800b922:	4770      	bx	lr
 800b924:	b510      	push	{r4, lr}
 800b926:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b92a:	4291      	cmp	r1, r2
 800b92c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b930:	d1f9      	bne.n	800b926 <memcpy+0xe>
 800b932:	bd10      	pop	{r4, pc}

0800b934 <_Balloc>:
 800b934:	b570      	push	{r4, r5, r6, lr}
 800b936:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b938:	4604      	mov	r4, r0
 800b93a:	460d      	mov	r5, r1
 800b93c:	b976      	cbnz	r6, 800b95c <_Balloc+0x28>
 800b93e:	2010      	movs	r0, #16
 800b940:	f7ff ffc2 	bl	800b8c8 <malloc>
 800b944:	4602      	mov	r2, r0
 800b946:	6260      	str	r0, [r4, #36]	; 0x24
 800b948:	b920      	cbnz	r0, 800b954 <_Balloc+0x20>
 800b94a:	2166      	movs	r1, #102	; 0x66
 800b94c:	4b17      	ldr	r3, [pc, #92]	; (800b9ac <_Balloc+0x78>)
 800b94e:	4818      	ldr	r0, [pc, #96]	; (800b9b0 <_Balloc+0x7c>)
 800b950:	f000 ff2c 	bl	800c7ac <__assert_func>
 800b954:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b958:	6006      	str	r6, [r0, #0]
 800b95a:	60c6      	str	r6, [r0, #12]
 800b95c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b95e:	68f3      	ldr	r3, [r6, #12]
 800b960:	b183      	cbz	r3, 800b984 <_Balloc+0x50>
 800b962:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b964:	68db      	ldr	r3, [r3, #12]
 800b966:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b96a:	b9b8      	cbnz	r0, 800b99c <_Balloc+0x68>
 800b96c:	2101      	movs	r1, #1
 800b96e:	fa01 f605 	lsl.w	r6, r1, r5
 800b972:	1d72      	adds	r2, r6, #5
 800b974:	4620      	mov	r0, r4
 800b976:	0092      	lsls	r2, r2, #2
 800b978:	f000 fc94 	bl	800c2a4 <_calloc_r>
 800b97c:	b160      	cbz	r0, 800b998 <_Balloc+0x64>
 800b97e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b982:	e00e      	b.n	800b9a2 <_Balloc+0x6e>
 800b984:	2221      	movs	r2, #33	; 0x21
 800b986:	2104      	movs	r1, #4
 800b988:	4620      	mov	r0, r4
 800b98a:	f000 fc8b 	bl	800c2a4 <_calloc_r>
 800b98e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b990:	60f0      	str	r0, [r6, #12]
 800b992:	68db      	ldr	r3, [r3, #12]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d1e4      	bne.n	800b962 <_Balloc+0x2e>
 800b998:	2000      	movs	r0, #0
 800b99a:	bd70      	pop	{r4, r5, r6, pc}
 800b99c:	6802      	ldr	r2, [r0, #0]
 800b99e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b9a8:	e7f7      	b.n	800b99a <_Balloc+0x66>
 800b9aa:	bf00      	nop
 800b9ac:	0800e6fe 	.word	0x0800e6fe
 800b9b0:	0800e7fc 	.word	0x0800e7fc

0800b9b4 <_Bfree>:
 800b9b4:	b570      	push	{r4, r5, r6, lr}
 800b9b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b9b8:	4605      	mov	r5, r0
 800b9ba:	460c      	mov	r4, r1
 800b9bc:	b976      	cbnz	r6, 800b9dc <_Bfree+0x28>
 800b9be:	2010      	movs	r0, #16
 800b9c0:	f7ff ff82 	bl	800b8c8 <malloc>
 800b9c4:	4602      	mov	r2, r0
 800b9c6:	6268      	str	r0, [r5, #36]	; 0x24
 800b9c8:	b920      	cbnz	r0, 800b9d4 <_Bfree+0x20>
 800b9ca:	218a      	movs	r1, #138	; 0x8a
 800b9cc:	4b08      	ldr	r3, [pc, #32]	; (800b9f0 <_Bfree+0x3c>)
 800b9ce:	4809      	ldr	r0, [pc, #36]	; (800b9f4 <_Bfree+0x40>)
 800b9d0:	f000 feec 	bl	800c7ac <__assert_func>
 800b9d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b9d8:	6006      	str	r6, [r0, #0]
 800b9da:	60c6      	str	r6, [r0, #12]
 800b9dc:	b13c      	cbz	r4, 800b9ee <_Bfree+0x3a>
 800b9de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b9e0:	6862      	ldr	r2, [r4, #4]
 800b9e2:	68db      	ldr	r3, [r3, #12]
 800b9e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b9e8:	6021      	str	r1, [r4, #0]
 800b9ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b9ee:	bd70      	pop	{r4, r5, r6, pc}
 800b9f0:	0800e6fe 	.word	0x0800e6fe
 800b9f4:	0800e7fc 	.word	0x0800e7fc

0800b9f8 <__multadd>:
 800b9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9fc:	4607      	mov	r7, r0
 800b9fe:	460c      	mov	r4, r1
 800ba00:	461e      	mov	r6, r3
 800ba02:	2000      	movs	r0, #0
 800ba04:	690d      	ldr	r5, [r1, #16]
 800ba06:	f101 0c14 	add.w	ip, r1, #20
 800ba0a:	f8dc 3000 	ldr.w	r3, [ip]
 800ba0e:	3001      	adds	r0, #1
 800ba10:	b299      	uxth	r1, r3
 800ba12:	fb02 6101 	mla	r1, r2, r1, r6
 800ba16:	0c1e      	lsrs	r6, r3, #16
 800ba18:	0c0b      	lsrs	r3, r1, #16
 800ba1a:	fb02 3306 	mla	r3, r2, r6, r3
 800ba1e:	b289      	uxth	r1, r1
 800ba20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ba24:	4285      	cmp	r5, r0
 800ba26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ba2a:	f84c 1b04 	str.w	r1, [ip], #4
 800ba2e:	dcec      	bgt.n	800ba0a <__multadd+0x12>
 800ba30:	b30e      	cbz	r6, 800ba76 <__multadd+0x7e>
 800ba32:	68a3      	ldr	r3, [r4, #8]
 800ba34:	42ab      	cmp	r3, r5
 800ba36:	dc19      	bgt.n	800ba6c <__multadd+0x74>
 800ba38:	6861      	ldr	r1, [r4, #4]
 800ba3a:	4638      	mov	r0, r7
 800ba3c:	3101      	adds	r1, #1
 800ba3e:	f7ff ff79 	bl	800b934 <_Balloc>
 800ba42:	4680      	mov	r8, r0
 800ba44:	b928      	cbnz	r0, 800ba52 <__multadd+0x5a>
 800ba46:	4602      	mov	r2, r0
 800ba48:	21b5      	movs	r1, #181	; 0xb5
 800ba4a:	4b0c      	ldr	r3, [pc, #48]	; (800ba7c <__multadd+0x84>)
 800ba4c:	480c      	ldr	r0, [pc, #48]	; (800ba80 <__multadd+0x88>)
 800ba4e:	f000 fead 	bl	800c7ac <__assert_func>
 800ba52:	6922      	ldr	r2, [r4, #16]
 800ba54:	f104 010c 	add.w	r1, r4, #12
 800ba58:	3202      	adds	r2, #2
 800ba5a:	0092      	lsls	r2, r2, #2
 800ba5c:	300c      	adds	r0, #12
 800ba5e:	f7ff ff5b 	bl	800b918 <memcpy>
 800ba62:	4621      	mov	r1, r4
 800ba64:	4638      	mov	r0, r7
 800ba66:	f7ff ffa5 	bl	800b9b4 <_Bfree>
 800ba6a:	4644      	mov	r4, r8
 800ba6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ba70:	3501      	adds	r5, #1
 800ba72:	615e      	str	r6, [r3, #20]
 800ba74:	6125      	str	r5, [r4, #16]
 800ba76:	4620      	mov	r0, r4
 800ba78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba7c:	0800e770 	.word	0x0800e770
 800ba80:	0800e7fc 	.word	0x0800e7fc

0800ba84 <__s2b>:
 800ba84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba88:	4615      	mov	r5, r2
 800ba8a:	2209      	movs	r2, #9
 800ba8c:	461f      	mov	r7, r3
 800ba8e:	3308      	adds	r3, #8
 800ba90:	460c      	mov	r4, r1
 800ba92:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba96:	4606      	mov	r6, r0
 800ba98:	2201      	movs	r2, #1
 800ba9a:	2100      	movs	r1, #0
 800ba9c:	429a      	cmp	r2, r3
 800ba9e:	db09      	blt.n	800bab4 <__s2b+0x30>
 800baa0:	4630      	mov	r0, r6
 800baa2:	f7ff ff47 	bl	800b934 <_Balloc>
 800baa6:	b940      	cbnz	r0, 800baba <__s2b+0x36>
 800baa8:	4602      	mov	r2, r0
 800baaa:	21ce      	movs	r1, #206	; 0xce
 800baac:	4b18      	ldr	r3, [pc, #96]	; (800bb10 <__s2b+0x8c>)
 800baae:	4819      	ldr	r0, [pc, #100]	; (800bb14 <__s2b+0x90>)
 800bab0:	f000 fe7c 	bl	800c7ac <__assert_func>
 800bab4:	0052      	lsls	r2, r2, #1
 800bab6:	3101      	adds	r1, #1
 800bab8:	e7f0      	b.n	800ba9c <__s2b+0x18>
 800baba:	9b08      	ldr	r3, [sp, #32]
 800babc:	2d09      	cmp	r5, #9
 800babe:	6143      	str	r3, [r0, #20]
 800bac0:	f04f 0301 	mov.w	r3, #1
 800bac4:	6103      	str	r3, [r0, #16]
 800bac6:	dd16      	ble.n	800baf6 <__s2b+0x72>
 800bac8:	f104 0909 	add.w	r9, r4, #9
 800bacc:	46c8      	mov	r8, r9
 800bace:	442c      	add	r4, r5
 800bad0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bad4:	4601      	mov	r1, r0
 800bad6:	220a      	movs	r2, #10
 800bad8:	4630      	mov	r0, r6
 800bada:	3b30      	subs	r3, #48	; 0x30
 800badc:	f7ff ff8c 	bl	800b9f8 <__multadd>
 800bae0:	45a0      	cmp	r8, r4
 800bae2:	d1f5      	bne.n	800bad0 <__s2b+0x4c>
 800bae4:	f1a5 0408 	sub.w	r4, r5, #8
 800bae8:	444c      	add	r4, r9
 800baea:	1b2d      	subs	r5, r5, r4
 800baec:	1963      	adds	r3, r4, r5
 800baee:	42bb      	cmp	r3, r7
 800baf0:	db04      	blt.n	800bafc <__s2b+0x78>
 800baf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baf6:	2509      	movs	r5, #9
 800baf8:	340a      	adds	r4, #10
 800bafa:	e7f6      	b.n	800baea <__s2b+0x66>
 800bafc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bb00:	4601      	mov	r1, r0
 800bb02:	220a      	movs	r2, #10
 800bb04:	4630      	mov	r0, r6
 800bb06:	3b30      	subs	r3, #48	; 0x30
 800bb08:	f7ff ff76 	bl	800b9f8 <__multadd>
 800bb0c:	e7ee      	b.n	800baec <__s2b+0x68>
 800bb0e:	bf00      	nop
 800bb10:	0800e770 	.word	0x0800e770
 800bb14:	0800e7fc 	.word	0x0800e7fc

0800bb18 <__hi0bits>:
 800bb18:	0c02      	lsrs	r2, r0, #16
 800bb1a:	0412      	lsls	r2, r2, #16
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	b9ca      	cbnz	r2, 800bb54 <__hi0bits+0x3c>
 800bb20:	0403      	lsls	r3, r0, #16
 800bb22:	2010      	movs	r0, #16
 800bb24:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800bb28:	bf04      	itt	eq
 800bb2a:	021b      	lsleq	r3, r3, #8
 800bb2c:	3008      	addeq	r0, #8
 800bb2e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800bb32:	bf04      	itt	eq
 800bb34:	011b      	lsleq	r3, r3, #4
 800bb36:	3004      	addeq	r0, #4
 800bb38:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800bb3c:	bf04      	itt	eq
 800bb3e:	009b      	lsleq	r3, r3, #2
 800bb40:	3002      	addeq	r0, #2
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	db05      	blt.n	800bb52 <__hi0bits+0x3a>
 800bb46:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800bb4a:	f100 0001 	add.w	r0, r0, #1
 800bb4e:	bf08      	it	eq
 800bb50:	2020      	moveq	r0, #32
 800bb52:	4770      	bx	lr
 800bb54:	2000      	movs	r0, #0
 800bb56:	e7e5      	b.n	800bb24 <__hi0bits+0xc>

0800bb58 <__lo0bits>:
 800bb58:	6803      	ldr	r3, [r0, #0]
 800bb5a:	4602      	mov	r2, r0
 800bb5c:	f013 0007 	ands.w	r0, r3, #7
 800bb60:	d00b      	beq.n	800bb7a <__lo0bits+0x22>
 800bb62:	07d9      	lsls	r1, r3, #31
 800bb64:	d421      	bmi.n	800bbaa <__lo0bits+0x52>
 800bb66:	0798      	lsls	r0, r3, #30
 800bb68:	bf49      	itett	mi
 800bb6a:	085b      	lsrmi	r3, r3, #1
 800bb6c:	089b      	lsrpl	r3, r3, #2
 800bb6e:	2001      	movmi	r0, #1
 800bb70:	6013      	strmi	r3, [r2, #0]
 800bb72:	bf5c      	itt	pl
 800bb74:	2002      	movpl	r0, #2
 800bb76:	6013      	strpl	r3, [r2, #0]
 800bb78:	4770      	bx	lr
 800bb7a:	b299      	uxth	r1, r3
 800bb7c:	b909      	cbnz	r1, 800bb82 <__lo0bits+0x2a>
 800bb7e:	2010      	movs	r0, #16
 800bb80:	0c1b      	lsrs	r3, r3, #16
 800bb82:	b2d9      	uxtb	r1, r3
 800bb84:	b909      	cbnz	r1, 800bb8a <__lo0bits+0x32>
 800bb86:	3008      	adds	r0, #8
 800bb88:	0a1b      	lsrs	r3, r3, #8
 800bb8a:	0719      	lsls	r1, r3, #28
 800bb8c:	bf04      	itt	eq
 800bb8e:	091b      	lsreq	r3, r3, #4
 800bb90:	3004      	addeq	r0, #4
 800bb92:	0799      	lsls	r1, r3, #30
 800bb94:	bf04      	itt	eq
 800bb96:	089b      	lsreq	r3, r3, #2
 800bb98:	3002      	addeq	r0, #2
 800bb9a:	07d9      	lsls	r1, r3, #31
 800bb9c:	d403      	bmi.n	800bba6 <__lo0bits+0x4e>
 800bb9e:	085b      	lsrs	r3, r3, #1
 800bba0:	f100 0001 	add.w	r0, r0, #1
 800bba4:	d003      	beq.n	800bbae <__lo0bits+0x56>
 800bba6:	6013      	str	r3, [r2, #0]
 800bba8:	4770      	bx	lr
 800bbaa:	2000      	movs	r0, #0
 800bbac:	4770      	bx	lr
 800bbae:	2020      	movs	r0, #32
 800bbb0:	4770      	bx	lr
	...

0800bbb4 <__i2b>:
 800bbb4:	b510      	push	{r4, lr}
 800bbb6:	460c      	mov	r4, r1
 800bbb8:	2101      	movs	r1, #1
 800bbba:	f7ff febb 	bl	800b934 <_Balloc>
 800bbbe:	4602      	mov	r2, r0
 800bbc0:	b928      	cbnz	r0, 800bbce <__i2b+0x1a>
 800bbc2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bbc6:	4b04      	ldr	r3, [pc, #16]	; (800bbd8 <__i2b+0x24>)
 800bbc8:	4804      	ldr	r0, [pc, #16]	; (800bbdc <__i2b+0x28>)
 800bbca:	f000 fdef 	bl	800c7ac <__assert_func>
 800bbce:	2301      	movs	r3, #1
 800bbd0:	6144      	str	r4, [r0, #20]
 800bbd2:	6103      	str	r3, [r0, #16]
 800bbd4:	bd10      	pop	{r4, pc}
 800bbd6:	bf00      	nop
 800bbd8:	0800e770 	.word	0x0800e770
 800bbdc:	0800e7fc 	.word	0x0800e7fc

0800bbe0 <__multiply>:
 800bbe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbe4:	4691      	mov	r9, r2
 800bbe6:	690a      	ldr	r2, [r1, #16]
 800bbe8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bbec:	460c      	mov	r4, r1
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	bfbe      	ittt	lt
 800bbf2:	460b      	movlt	r3, r1
 800bbf4:	464c      	movlt	r4, r9
 800bbf6:	4699      	movlt	r9, r3
 800bbf8:	6927      	ldr	r7, [r4, #16]
 800bbfa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bbfe:	68a3      	ldr	r3, [r4, #8]
 800bc00:	6861      	ldr	r1, [r4, #4]
 800bc02:	eb07 060a 	add.w	r6, r7, sl
 800bc06:	42b3      	cmp	r3, r6
 800bc08:	b085      	sub	sp, #20
 800bc0a:	bfb8      	it	lt
 800bc0c:	3101      	addlt	r1, #1
 800bc0e:	f7ff fe91 	bl	800b934 <_Balloc>
 800bc12:	b930      	cbnz	r0, 800bc22 <__multiply+0x42>
 800bc14:	4602      	mov	r2, r0
 800bc16:	f240 115d 	movw	r1, #349	; 0x15d
 800bc1a:	4b43      	ldr	r3, [pc, #268]	; (800bd28 <__multiply+0x148>)
 800bc1c:	4843      	ldr	r0, [pc, #268]	; (800bd2c <__multiply+0x14c>)
 800bc1e:	f000 fdc5 	bl	800c7ac <__assert_func>
 800bc22:	f100 0514 	add.w	r5, r0, #20
 800bc26:	462b      	mov	r3, r5
 800bc28:	2200      	movs	r2, #0
 800bc2a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bc2e:	4543      	cmp	r3, r8
 800bc30:	d321      	bcc.n	800bc76 <__multiply+0x96>
 800bc32:	f104 0314 	add.w	r3, r4, #20
 800bc36:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bc3a:	f109 0314 	add.w	r3, r9, #20
 800bc3e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bc42:	9202      	str	r2, [sp, #8]
 800bc44:	1b3a      	subs	r2, r7, r4
 800bc46:	3a15      	subs	r2, #21
 800bc48:	f022 0203 	bic.w	r2, r2, #3
 800bc4c:	3204      	adds	r2, #4
 800bc4e:	f104 0115 	add.w	r1, r4, #21
 800bc52:	428f      	cmp	r7, r1
 800bc54:	bf38      	it	cc
 800bc56:	2204      	movcc	r2, #4
 800bc58:	9201      	str	r2, [sp, #4]
 800bc5a:	9a02      	ldr	r2, [sp, #8]
 800bc5c:	9303      	str	r3, [sp, #12]
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d80c      	bhi.n	800bc7c <__multiply+0x9c>
 800bc62:	2e00      	cmp	r6, #0
 800bc64:	dd03      	ble.n	800bc6e <__multiply+0x8e>
 800bc66:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d059      	beq.n	800bd22 <__multiply+0x142>
 800bc6e:	6106      	str	r6, [r0, #16]
 800bc70:	b005      	add	sp, #20
 800bc72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc76:	f843 2b04 	str.w	r2, [r3], #4
 800bc7a:	e7d8      	b.n	800bc2e <__multiply+0x4e>
 800bc7c:	f8b3 a000 	ldrh.w	sl, [r3]
 800bc80:	f1ba 0f00 	cmp.w	sl, #0
 800bc84:	d023      	beq.n	800bcce <__multiply+0xee>
 800bc86:	46a9      	mov	r9, r5
 800bc88:	f04f 0c00 	mov.w	ip, #0
 800bc8c:	f104 0e14 	add.w	lr, r4, #20
 800bc90:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bc94:	f8d9 1000 	ldr.w	r1, [r9]
 800bc98:	fa1f fb82 	uxth.w	fp, r2
 800bc9c:	b289      	uxth	r1, r1
 800bc9e:	fb0a 110b 	mla	r1, sl, fp, r1
 800bca2:	4461      	add	r1, ip
 800bca4:	f8d9 c000 	ldr.w	ip, [r9]
 800bca8:	0c12      	lsrs	r2, r2, #16
 800bcaa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800bcae:	fb0a c202 	mla	r2, sl, r2, ip
 800bcb2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bcb6:	b289      	uxth	r1, r1
 800bcb8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bcbc:	4577      	cmp	r7, lr
 800bcbe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bcc2:	f849 1b04 	str.w	r1, [r9], #4
 800bcc6:	d8e3      	bhi.n	800bc90 <__multiply+0xb0>
 800bcc8:	9a01      	ldr	r2, [sp, #4]
 800bcca:	f845 c002 	str.w	ip, [r5, r2]
 800bcce:	9a03      	ldr	r2, [sp, #12]
 800bcd0:	3304      	adds	r3, #4
 800bcd2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bcd6:	f1b9 0f00 	cmp.w	r9, #0
 800bcda:	d020      	beq.n	800bd1e <__multiply+0x13e>
 800bcdc:	46ae      	mov	lr, r5
 800bcde:	f04f 0a00 	mov.w	sl, #0
 800bce2:	6829      	ldr	r1, [r5, #0]
 800bce4:	f104 0c14 	add.w	ip, r4, #20
 800bce8:	f8bc b000 	ldrh.w	fp, [ip]
 800bcec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bcf0:	b289      	uxth	r1, r1
 800bcf2:	fb09 220b 	mla	r2, r9, fp, r2
 800bcf6:	4492      	add	sl, r2
 800bcf8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bcfc:	f84e 1b04 	str.w	r1, [lr], #4
 800bd00:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bd04:	f8be 1000 	ldrh.w	r1, [lr]
 800bd08:	0c12      	lsrs	r2, r2, #16
 800bd0a:	fb09 1102 	mla	r1, r9, r2, r1
 800bd0e:	4567      	cmp	r7, ip
 800bd10:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bd14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bd18:	d8e6      	bhi.n	800bce8 <__multiply+0x108>
 800bd1a:	9a01      	ldr	r2, [sp, #4]
 800bd1c:	50a9      	str	r1, [r5, r2]
 800bd1e:	3504      	adds	r5, #4
 800bd20:	e79b      	b.n	800bc5a <__multiply+0x7a>
 800bd22:	3e01      	subs	r6, #1
 800bd24:	e79d      	b.n	800bc62 <__multiply+0x82>
 800bd26:	bf00      	nop
 800bd28:	0800e770 	.word	0x0800e770
 800bd2c:	0800e7fc 	.word	0x0800e7fc

0800bd30 <__pow5mult>:
 800bd30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd34:	4615      	mov	r5, r2
 800bd36:	f012 0203 	ands.w	r2, r2, #3
 800bd3a:	4606      	mov	r6, r0
 800bd3c:	460f      	mov	r7, r1
 800bd3e:	d007      	beq.n	800bd50 <__pow5mult+0x20>
 800bd40:	4c25      	ldr	r4, [pc, #148]	; (800bdd8 <__pow5mult+0xa8>)
 800bd42:	3a01      	subs	r2, #1
 800bd44:	2300      	movs	r3, #0
 800bd46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bd4a:	f7ff fe55 	bl	800b9f8 <__multadd>
 800bd4e:	4607      	mov	r7, r0
 800bd50:	10ad      	asrs	r5, r5, #2
 800bd52:	d03d      	beq.n	800bdd0 <__pow5mult+0xa0>
 800bd54:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bd56:	b97c      	cbnz	r4, 800bd78 <__pow5mult+0x48>
 800bd58:	2010      	movs	r0, #16
 800bd5a:	f7ff fdb5 	bl	800b8c8 <malloc>
 800bd5e:	4602      	mov	r2, r0
 800bd60:	6270      	str	r0, [r6, #36]	; 0x24
 800bd62:	b928      	cbnz	r0, 800bd70 <__pow5mult+0x40>
 800bd64:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bd68:	4b1c      	ldr	r3, [pc, #112]	; (800bddc <__pow5mult+0xac>)
 800bd6a:	481d      	ldr	r0, [pc, #116]	; (800bde0 <__pow5mult+0xb0>)
 800bd6c:	f000 fd1e 	bl	800c7ac <__assert_func>
 800bd70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bd74:	6004      	str	r4, [r0, #0]
 800bd76:	60c4      	str	r4, [r0, #12]
 800bd78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bd7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bd80:	b94c      	cbnz	r4, 800bd96 <__pow5mult+0x66>
 800bd82:	f240 2171 	movw	r1, #625	; 0x271
 800bd86:	4630      	mov	r0, r6
 800bd88:	f7ff ff14 	bl	800bbb4 <__i2b>
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	4604      	mov	r4, r0
 800bd90:	f8c8 0008 	str.w	r0, [r8, #8]
 800bd94:	6003      	str	r3, [r0, #0]
 800bd96:	f04f 0900 	mov.w	r9, #0
 800bd9a:	07eb      	lsls	r3, r5, #31
 800bd9c:	d50a      	bpl.n	800bdb4 <__pow5mult+0x84>
 800bd9e:	4639      	mov	r1, r7
 800bda0:	4622      	mov	r2, r4
 800bda2:	4630      	mov	r0, r6
 800bda4:	f7ff ff1c 	bl	800bbe0 <__multiply>
 800bda8:	4680      	mov	r8, r0
 800bdaa:	4639      	mov	r1, r7
 800bdac:	4630      	mov	r0, r6
 800bdae:	f7ff fe01 	bl	800b9b4 <_Bfree>
 800bdb2:	4647      	mov	r7, r8
 800bdb4:	106d      	asrs	r5, r5, #1
 800bdb6:	d00b      	beq.n	800bdd0 <__pow5mult+0xa0>
 800bdb8:	6820      	ldr	r0, [r4, #0]
 800bdba:	b938      	cbnz	r0, 800bdcc <__pow5mult+0x9c>
 800bdbc:	4622      	mov	r2, r4
 800bdbe:	4621      	mov	r1, r4
 800bdc0:	4630      	mov	r0, r6
 800bdc2:	f7ff ff0d 	bl	800bbe0 <__multiply>
 800bdc6:	6020      	str	r0, [r4, #0]
 800bdc8:	f8c0 9000 	str.w	r9, [r0]
 800bdcc:	4604      	mov	r4, r0
 800bdce:	e7e4      	b.n	800bd9a <__pow5mult+0x6a>
 800bdd0:	4638      	mov	r0, r7
 800bdd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdd6:	bf00      	nop
 800bdd8:	0800e948 	.word	0x0800e948
 800bddc:	0800e6fe 	.word	0x0800e6fe
 800bde0:	0800e7fc 	.word	0x0800e7fc

0800bde4 <__lshift>:
 800bde4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bde8:	460c      	mov	r4, r1
 800bdea:	4607      	mov	r7, r0
 800bdec:	4691      	mov	r9, r2
 800bdee:	6923      	ldr	r3, [r4, #16]
 800bdf0:	6849      	ldr	r1, [r1, #4]
 800bdf2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bdf6:	68a3      	ldr	r3, [r4, #8]
 800bdf8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bdfc:	f108 0601 	add.w	r6, r8, #1
 800be00:	42b3      	cmp	r3, r6
 800be02:	db0b      	blt.n	800be1c <__lshift+0x38>
 800be04:	4638      	mov	r0, r7
 800be06:	f7ff fd95 	bl	800b934 <_Balloc>
 800be0a:	4605      	mov	r5, r0
 800be0c:	b948      	cbnz	r0, 800be22 <__lshift+0x3e>
 800be0e:	4602      	mov	r2, r0
 800be10:	f240 11d9 	movw	r1, #473	; 0x1d9
 800be14:	4b29      	ldr	r3, [pc, #164]	; (800bebc <__lshift+0xd8>)
 800be16:	482a      	ldr	r0, [pc, #168]	; (800bec0 <__lshift+0xdc>)
 800be18:	f000 fcc8 	bl	800c7ac <__assert_func>
 800be1c:	3101      	adds	r1, #1
 800be1e:	005b      	lsls	r3, r3, #1
 800be20:	e7ee      	b.n	800be00 <__lshift+0x1c>
 800be22:	2300      	movs	r3, #0
 800be24:	f100 0114 	add.w	r1, r0, #20
 800be28:	f100 0210 	add.w	r2, r0, #16
 800be2c:	4618      	mov	r0, r3
 800be2e:	4553      	cmp	r3, sl
 800be30:	db37      	blt.n	800bea2 <__lshift+0xbe>
 800be32:	6920      	ldr	r0, [r4, #16]
 800be34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800be38:	f104 0314 	add.w	r3, r4, #20
 800be3c:	f019 091f 	ands.w	r9, r9, #31
 800be40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800be44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800be48:	d02f      	beq.n	800beaa <__lshift+0xc6>
 800be4a:	468a      	mov	sl, r1
 800be4c:	f04f 0c00 	mov.w	ip, #0
 800be50:	f1c9 0e20 	rsb	lr, r9, #32
 800be54:	681a      	ldr	r2, [r3, #0]
 800be56:	fa02 f209 	lsl.w	r2, r2, r9
 800be5a:	ea42 020c 	orr.w	r2, r2, ip
 800be5e:	f84a 2b04 	str.w	r2, [sl], #4
 800be62:	f853 2b04 	ldr.w	r2, [r3], #4
 800be66:	4298      	cmp	r0, r3
 800be68:	fa22 fc0e 	lsr.w	ip, r2, lr
 800be6c:	d8f2      	bhi.n	800be54 <__lshift+0x70>
 800be6e:	1b03      	subs	r3, r0, r4
 800be70:	3b15      	subs	r3, #21
 800be72:	f023 0303 	bic.w	r3, r3, #3
 800be76:	3304      	adds	r3, #4
 800be78:	f104 0215 	add.w	r2, r4, #21
 800be7c:	4290      	cmp	r0, r2
 800be7e:	bf38      	it	cc
 800be80:	2304      	movcc	r3, #4
 800be82:	f841 c003 	str.w	ip, [r1, r3]
 800be86:	f1bc 0f00 	cmp.w	ip, #0
 800be8a:	d001      	beq.n	800be90 <__lshift+0xac>
 800be8c:	f108 0602 	add.w	r6, r8, #2
 800be90:	3e01      	subs	r6, #1
 800be92:	4638      	mov	r0, r7
 800be94:	4621      	mov	r1, r4
 800be96:	612e      	str	r6, [r5, #16]
 800be98:	f7ff fd8c 	bl	800b9b4 <_Bfree>
 800be9c:	4628      	mov	r0, r5
 800be9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bea2:	f842 0f04 	str.w	r0, [r2, #4]!
 800bea6:	3301      	adds	r3, #1
 800bea8:	e7c1      	b.n	800be2e <__lshift+0x4a>
 800beaa:	3904      	subs	r1, #4
 800beac:	f853 2b04 	ldr.w	r2, [r3], #4
 800beb0:	4298      	cmp	r0, r3
 800beb2:	f841 2f04 	str.w	r2, [r1, #4]!
 800beb6:	d8f9      	bhi.n	800beac <__lshift+0xc8>
 800beb8:	e7ea      	b.n	800be90 <__lshift+0xac>
 800beba:	bf00      	nop
 800bebc:	0800e770 	.word	0x0800e770
 800bec0:	0800e7fc 	.word	0x0800e7fc

0800bec4 <__mcmp>:
 800bec4:	4603      	mov	r3, r0
 800bec6:	690a      	ldr	r2, [r1, #16]
 800bec8:	6900      	ldr	r0, [r0, #16]
 800beca:	b530      	push	{r4, r5, lr}
 800becc:	1a80      	subs	r0, r0, r2
 800bece:	d10d      	bne.n	800beec <__mcmp+0x28>
 800bed0:	3314      	adds	r3, #20
 800bed2:	3114      	adds	r1, #20
 800bed4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bed8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bedc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bee0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bee4:	4295      	cmp	r5, r2
 800bee6:	d002      	beq.n	800beee <__mcmp+0x2a>
 800bee8:	d304      	bcc.n	800bef4 <__mcmp+0x30>
 800beea:	2001      	movs	r0, #1
 800beec:	bd30      	pop	{r4, r5, pc}
 800beee:	42a3      	cmp	r3, r4
 800bef0:	d3f4      	bcc.n	800bedc <__mcmp+0x18>
 800bef2:	e7fb      	b.n	800beec <__mcmp+0x28>
 800bef4:	f04f 30ff 	mov.w	r0, #4294967295
 800bef8:	e7f8      	b.n	800beec <__mcmp+0x28>
	...

0800befc <__mdiff>:
 800befc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf00:	460d      	mov	r5, r1
 800bf02:	4607      	mov	r7, r0
 800bf04:	4611      	mov	r1, r2
 800bf06:	4628      	mov	r0, r5
 800bf08:	4614      	mov	r4, r2
 800bf0a:	f7ff ffdb 	bl	800bec4 <__mcmp>
 800bf0e:	1e06      	subs	r6, r0, #0
 800bf10:	d111      	bne.n	800bf36 <__mdiff+0x3a>
 800bf12:	4631      	mov	r1, r6
 800bf14:	4638      	mov	r0, r7
 800bf16:	f7ff fd0d 	bl	800b934 <_Balloc>
 800bf1a:	4602      	mov	r2, r0
 800bf1c:	b928      	cbnz	r0, 800bf2a <__mdiff+0x2e>
 800bf1e:	f240 2132 	movw	r1, #562	; 0x232
 800bf22:	4b3a      	ldr	r3, [pc, #232]	; (800c00c <__mdiff+0x110>)
 800bf24:	483a      	ldr	r0, [pc, #232]	; (800c010 <__mdiff+0x114>)
 800bf26:	f000 fc41 	bl	800c7ac <__assert_func>
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800bf30:	4610      	mov	r0, r2
 800bf32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf36:	bfa4      	itt	ge
 800bf38:	4623      	movge	r3, r4
 800bf3a:	462c      	movge	r4, r5
 800bf3c:	4638      	mov	r0, r7
 800bf3e:	6861      	ldr	r1, [r4, #4]
 800bf40:	bfa6      	itte	ge
 800bf42:	461d      	movge	r5, r3
 800bf44:	2600      	movge	r6, #0
 800bf46:	2601      	movlt	r6, #1
 800bf48:	f7ff fcf4 	bl	800b934 <_Balloc>
 800bf4c:	4602      	mov	r2, r0
 800bf4e:	b918      	cbnz	r0, 800bf58 <__mdiff+0x5c>
 800bf50:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bf54:	4b2d      	ldr	r3, [pc, #180]	; (800c00c <__mdiff+0x110>)
 800bf56:	e7e5      	b.n	800bf24 <__mdiff+0x28>
 800bf58:	f102 0814 	add.w	r8, r2, #20
 800bf5c:	46c2      	mov	sl, r8
 800bf5e:	f04f 0c00 	mov.w	ip, #0
 800bf62:	6927      	ldr	r7, [r4, #16]
 800bf64:	60c6      	str	r6, [r0, #12]
 800bf66:	692e      	ldr	r6, [r5, #16]
 800bf68:	f104 0014 	add.w	r0, r4, #20
 800bf6c:	f105 0914 	add.w	r9, r5, #20
 800bf70:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800bf74:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bf78:	3410      	adds	r4, #16
 800bf7a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800bf7e:	f859 3b04 	ldr.w	r3, [r9], #4
 800bf82:	fa1f f18b 	uxth.w	r1, fp
 800bf86:	448c      	add	ip, r1
 800bf88:	b299      	uxth	r1, r3
 800bf8a:	0c1b      	lsrs	r3, r3, #16
 800bf8c:	ebac 0101 	sub.w	r1, ip, r1
 800bf90:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bf94:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800bf98:	b289      	uxth	r1, r1
 800bf9a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800bf9e:	454e      	cmp	r6, r9
 800bfa0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800bfa4:	f84a 3b04 	str.w	r3, [sl], #4
 800bfa8:	d8e7      	bhi.n	800bf7a <__mdiff+0x7e>
 800bfaa:	1b73      	subs	r3, r6, r5
 800bfac:	3b15      	subs	r3, #21
 800bfae:	f023 0303 	bic.w	r3, r3, #3
 800bfb2:	3515      	adds	r5, #21
 800bfb4:	3304      	adds	r3, #4
 800bfb6:	42ae      	cmp	r6, r5
 800bfb8:	bf38      	it	cc
 800bfba:	2304      	movcc	r3, #4
 800bfbc:	4418      	add	r0, r3
 800bfbe:	4443      	add	r3, r8
 800bfc0:	461e      	mov	r6, r3
 800bfc2:	4605      	mov	r5, r0
 800bfc4:	4575      	cmp	r5, lr
 800bfc6:	d30e      	bcc.n	800bfe6 <__mdiff+0xea>
 800bfc8:	f10e 0103 	add.w	r1, lr, #3
 800bfcc:	1a09      	subs	r1, r1, r0
 800bfce:	f021 0103 	bic.w	r1, r1, #3
 800bfd2:	3803      	subs	r0, #3
 800bfd4:	4586      	cmp	lr, r0
 800bfd6:	bf38      	it	cc
 800bfd8:	2100      	movcc	r1, #0
 800bfda:	4419      	add	r1, r3
 800bfdc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800bfe0:	b18b      	cbz	r3, 800c006 <__mdiff+0x10a>
 800bfe2:	6117      	str	r7, [r2, #16]
 800bfe4:	e7a4      	b.n	800bf30 <__mdiff+0x34>
 800bfe6:	f855 8b04 	ldr.w	r8, [r5], #4
 800bfea:	fa1f f188 	uxth.w	r1, r8
 800bfee:	4461      	add	r1, ip
 800bff0:	140c      	asrs	r4, r1, #16
 800bff2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bff6:	b289      	uxth	r1, r1
 800bff8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bffc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800c000:	f846 1b04 	str.w	r1, [r6], #4
 800c004:	e7de      	b.n	800bfc4 <__mdiff+0xc8>
 800c006:	3f01      	subs	r7, #1
 800c008:	e7e8      	b.n	800bfdc <__mdiff+0xe0>
 800c00a:	bf00      	nop
 800c00c:	0800e770 	.word	0x0800e770
 800c010:	0800e7fc 	.word	0x0800e7fc

0800c014 <__ulp>:
 800c014:	4b11      	ldr	r3, [pc, #68]	; (800c05c <__ulp+0x48>)
 800c016:	400b      	ands	r3, r1
 800c018:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	dd02      	ble.n	800c026 <__ulp+0x12>
 800c020:	2000      	movs	r0, #0
 800c022:	4619      	mov	r1, r3
 800c024:	4770      	bx	lr
 800c026:	425b      	negs	r3, r3
 800c028:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c02c:	f04f 0000 	mov.w	r0, #0
 800c030:	f04f 0100 	mov.w	r1, #0
 800c034:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c038:	da04      	bge.n	800c044 <__ulp+0x30>
 800c03a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c03e:	fa43 f102 	asr.w	r1, r3, r2
 800c042:	4770      	bx	lr
 800c044:	f1a2 0314 	sub.w	r3, r2, #20
 800c048:	2b1e      	cmp	r3, #30
 800c04a:	bfd6      	itet	le
 800c04c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c050:	2301      	movgt	r3, #1
 800c052:	fa22 f303 	lsrle.w	r3, r2, r3
 800c056:	4618      	mov	r0, r3
 800c058:	4770      	bx	lr
 800c05a:	bf00      	nop
 800c05c:	7ff00000 	.word	0x7ff00000

0800c060 <__b2d>:
 800c060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c064:	6907      	ldr	r7, [r0, #16]
 800c066:	f100 0914 	add.w	r9, r0, #20
 800c06a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800c06e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800c072:	f1a7 0804 	sub.w	r8, r7, #4
 800c076:	4630      	mov	r0, r6
 800c078:	f7ff fd4e 	bl	800bb18 <__hi0bits>
 800c07c:	f1c0 0320 	rsb	r3, r0, #32
 800c080:	280a      	cmp	r0, #10
 800c082:	600b      	str	r3, [r1, #0]
 800c084:	491f      	ldr	r1, [pc, #124]	; (800c104 <__b2d+0xa4>)
 800c086:	dc17      	bgt.n	800c0b8 <__b2d+0x58>
 800c088:	45c1      	cmp	r9, r8
 800c08a:	bf28      	it	cs
 800c08c:	2200      	movcs	r2, #0
 800c08e:	f1c0 0c0b 	rsb	ip, r0, #11
 800c092:	fa26 f30c 	lsr.w	r3, r6, ip
 800c096:	bf38      	it	cc
 800c098:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c09c:	ea43 0501 	orr.w	r5, r3, r1
 800c0a0:	f100 0315 	add.w	r3, r0, #21
 800c0a4:	fa06 f303 	lsl.w	r3, r6, r3
 800c0a8:	fa22 f20c 	lsr.w	r2, r2, ip
 800c0ac:	ea43 0402 	orr.w	r4, r3, r2
 800c0b0:	4620      	mov	r0, r4
 800c0b2:	4629      	mov	r1, r5
 800c0b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0b8:	45c1      	cmp	r9, r8
 800c0ba:	bf2e      	itee	cs
 800c0bc:	2200      	movcs	r2, #0
 800c0be:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c0c2:	f1a7 0808 	subcc.w	r8, r7, #8
 800c0c6:	f1b0 030b 	subs.w	r3, r0, #11
 800c0ca:	d016      	beq.n	800c0fa <__b2d+0x9a>
 800c0cc:	f1c3 0720 	rsb	r7, r3, #32
 800c0d0:	fa22 f107 	lsr.w	r1, r2, r7
 800c0d4:	45c8      	cmp	r8, r9
 800c0d6:	fa06 f603 	lsl.w	r6, r6, r3
 800c0da:	ea46 0601 	orr.w	r6, r6, r1
 800c0de:	bf94      	ite	ls
 800c0e0:	2100      	movls	r1, #0
 800c0e2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800c0e6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800c0ea:	fa02 f003 	lsl.w	r0, r2, r3
 800c0ee:	40f9      	lsrs	r1, r7
 800c0f0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c0f4:	ea40 0401 	orr.w	r4, r0, r1
 800c0f8:	e7da      	b.n	800c0b0 <__b2d+0x50>
 800c0fa:	4614      	mov	r4, r2
 800c0fc:	ea46 0501 	orr.w	r5, r6, r1
 800c100:	e7d6      	b.n	800c0b0 <__b2d+0x50>
 800c102:	bf00      	nop
 800c104:	3ff00000 	.word	0x3ff00000

0800c108 <__d2b>:
 800c108:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c10c:	2101      	movs	r1, #1
 800c10e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800c112:	4690      	mov	r8, r2
 800c114:	461d      	mov	r5, r3
 800c116:	f7ff fc0d 	bl	800b934 <_Balloc>
 800c11a:	4604      	mov	r4, r0
 800c11c:	b930      	cbnz	r0, 800c12c <__d2b+0x24>
 800c11e:	4602      	mov	r2, r0
 800c120:	f240 310a 	movw	r1, #778	; 0x30a
 800c124:	4b24      	ldr	r3, [pc, #144]	; (800c1b8 <__d2b+0xb0>)
 800c126:	4825      	ldr	r0, [pc, #148]	; (800c1bc <__d2b+0xb4>)
 800c128:	f000 fb40 	bl	800c7ac <__assert_func>
 800c12c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800c130:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800c134:	bb2d      	cbnz	r5, 800c182 <__d2b+0x7a>
 800c136:	9301      	str	r3, [sp, #4]
 800c138:	f1b8 0300 	subs.w	r3, r8, #0
 800c13c:	d026      	beq.n	800c18c <__d2b+0x84>
 800c13e:	4668      	mov	r0, sp
 800c140:	9300      	str	r3, [sp, #0]
 800c142:	f7ff fd09 	bl	800bb58 <__lo0bits>
 800c146:	9900      	ldr	r1, [sp, #0]
 800c148:	b1f0      	cbz	r0, 800c188 <__d2b+0x80>
 800c14a:	9a01      	ldr	r2, [sp, #4]
 800c14c:	f1c0 0320 	rsb	r3, r0, #32
 800c150:	fa02 f303 	lsl.w	r3, r2, r3
 800c154:	430b      	orrs	r3, r1
 800c156:	40c2      	lsrs	r2, r0
 800c158:	6163      	str	r3, [r4, #20]
 800c15a:	9201      	str	r2, [sp, #4]
 800c15c:	9b01      	ldr	r3, [sp, #4]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	bf14      	ite	ne
 800c162:	2102      	movne	r1, #2
 800c164:	2101      	moveq	r1, #1
 800c166:	61a3      	str	r3, [r4, #24]
 800c168:	6121      	str	r1, [r4, #16]
 800c16a:	b1c5      	cbz	r5, 800c19e <__d2b+0x96>
 800c16c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c170:	4405      	add	r5, r0
 800c172:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c176:	603d      	str	r5, [r7, #0]
 800c178:	6030      	str	r0, [r6, #0]
 800c17a:	4620      	mov	r0, r4
 800c17c:	b002      	add	sp, #8
 800c17e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c182:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c186:	e7d6      	b.n	800c136 <__d2b+0x2e>
 800c188:	6161      	str	r1, [r4, #20]
 800c18a:	e7e7      	b.n	800c15c <__d2b+0x54>
 800c18c:	a801      	add	r0, sp, #4
 800c18e:	f7ff fce3 	bl	800bb58 <__lo0bits>
 800c192:	2101      	movs	r1, #1
 800c194:	9b01      	ldr	r3, [sp, #4]
 800c196:	6121      	str	r1, [r4, #16]
 800c198:	6163      	str	r3, [r4, #20]
 800c19a:	3020      	adds	r0, #32
 800c19c:	e7e5      	b.n	800c16a <__d2b+0x62>
 800c19e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800c1a2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c1a6:	6038      	str	r0, [r7, #0]
 800c1a8:	6918      	ldr	r0, [r3, #16]
 800c1aa:	f7ff fcb5 	bl	800bb18 <__hi0bits>
 800c1ae:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800c1b2:	6031      	str	r1, [r6, #0]
 800c1b4:	e7e1      	b.n	800c17a <__d2b+0x72>
 800c1b6:	bf00      	nop
 800c1b8:	0800e770 	.word	0x0800e770
 800c1bc:	0800e7fc 	.word	0x0800e7fc

0800c1c0 <__ratio>:
 800c1c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1c4:	4688      	mov	r8, r1
 800c1c6:	4669      	mov	r1, sp
 800c1c8:	4681      	mov	r9, r0
 800c1ca:	f7ff ff49 	bl	800c060 <__b2d>
 800c1ce:	460f      	mov	r7, r1
 800c1d0:	4604      	mov	r4, r0
 800c1d2:	460d      	mov	r5, r1
 800c1d4:	4640      	mov	r0, r8
 800c1d6:	a901      	add	r1, sp, #4
 800c1d8:	f7ff ff42 	bl	800c060 <__b2d>
 800c1dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c1e0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c1e4:	468b      	mov	fp, r1
 800c1e6:	eba3 0c02 	sub.w	ip, r3, r2
 800c1ea:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c1ee:	1a9b      	subs	r3, r3, r2
 800c1f0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	bfd5      	itete	le
 800c1f8:	460a      	movle	r2, r1
 800c1fa:	462a      	movgt	r2, r5
 800c1fc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c200:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c204:	bfd8      	it	le
 800c206:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c20a:	465b      	mov	r3, fp
 800c20c:	4602      	mov	r2, r0
 800c20e:	4639      	mov	r1, r7
 800c210:	4620      	mov	r0, r4
 800c212:	f7f4 fa8b 	bl	800072c <__aeabi_ddiv>
 800c216:	b003      	add	sp, #12
 800c218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c21c <__copybits>:
 800c21c:	3901      	subs	r1, #1
 800c21e:	b570      	push	{r4, r5, r6, lr}
 800c220:	1149      	asrs	r1, r1, #5
 800c222:	6914      	ldr	r4, [r2, #16]
 800c224:	3101      	adds	r1, #1
 800c226:	f102 0314 	add.w	r3, r2, #20
 800c22a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c22e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c232:	1f05      	subs	r5, r0, #4
 800c234:	42a3      	cmp	r3, r4
 800c236:	d30c      	bcc.n	800c252 <__copybits+0x36>
 800c238:	1aa3      	subs	r3, r4, r2
 800c23a:	3b11      	subs	r3, #17
 800c23c:	f023 0303 	bic.w	r3, r3, #3
 800c240:	3211      	adds	r2, #17
 800c242:	42a2      	cmp	r2, r4
 800c244:	bf88      	it	hi
 800c246:	2300      	movhi	r3, #0
 800c248:	4418      	add	r0, r3
 800c24a:	2300      	movs	r3, #0
 800c24c:	4288      	cmp	r0, r1
 800c24e:	d305      	bcc.n	800c25c <__copybits+0x40>
 800c250:	bd70      	pop	{r4, r5, r6, pc}
 800c252:	f853 6b04 	ldr.w	r6, [r3], #4
 800c256:	f845 6f04 	str.w	r6, [r5, #4]!
 800c25a:	e7eb      	b.n	800c234 <__copybits+0x18>
 800c25c:	f840 3b04 	str.w	r3, [r0], #4
 800c260:	e7f4      	b.n	800c24c <__copybits+0x30>

0800c262 <__any_on>:
 800c262:	f100 0214 	add.w	r2, r0, #20
 800c266:	6900      	ldr	r0, [r0, #16]
 800c268:	114b      	asrs	r3, r1, #5
 800c26a:	4298      	cmp	r0, r3
 800c26c:	b510      	push	{r4, lr}
 800c26e:	db11      	blt.n	800c294 <__any_on+0x32>
 800c270:	dd0a      	ble.n	800c288 <__any_on+0x26>
 800c272:	f011 011f 	ands.w	r1, r1, #31
 800c276:	d007      	beq.n	800c288 <__any_on+0x26>
 800c278:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c27c:	fa24 f001 	lsr.w	r0, r4, r1
 800c280:	fa00 f101 	lsl.w	r1, r0, r1
 800c284:	428c      	cmp	r4, r1
 800c286:	d10b      	bne.n	800c2a0 <__any_on+0x3e>
 800c288:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c28c:	4293      	cmp	r3, r2
 800c28e:	d803      	bhi.n	800c298 <__any_on+0x36>
 800c290:	2000      	movs	r0, #0
 800c292:	bd10      	pop	{r4, pc}
 800c294:	4603      	mov	r3, r0
 800c296:	e7f7      	b.n	800c288 <__any_on+0x26>
 800c298:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c29c:	2900      	cmp	r1, #0
 800c29e:	d0f5      	beq.n	800c28c <__any_on+0x2a>
 800c2a0:	2001      	movs	r0, #1
 800c2a2:	e7f6      	b.n	800c292 <__any_on+0x30>

0800c2a4 <_calloc_r>:
 800c2a4:	b570      	push	{r4, r5, r6, lr}
 800c2a6:	fba1 5402 	umull	r5, r4, r1, r2
 800c2aa:	b934      	cbnz	r4, 800c2ba <_calloc_r+0x16>
 800c2ac:	4629      	mov	r1, r5
 800c2ae:	f000 f875 	bl	800c39c <_malloc_r>
 800c2b2:	4606      	mov	r6, r0
 800c2b4:	b928      	cbnz	r0, 800c2c2 <_calloc_r+0x1e>
 800c2b6:	4630      	mov	r0, r6
 800c2b8:	bd70      	pop	{r4, r5, r6, pc}
 800c2ba:	220c      	movs	r2, #12
 800c2bc:	2600      	movs	r6, #0
 800c2be:	6002      	str	r2, [r0, #0]
 800c2c0:	e7f9      	b.n	800c2b6 <_calloc_r+0x12>
 800c2c2:	462a      	mov	r2, r5
 800c2c4:	4621      	mov	r1, r4
 800c2c6:	f7fc fbbd 	bl	8008a44 <memset>
 800c2ca:	e7f4      	b.n	800c2b6 <_calloc_r+0x12>

0800c2cc <_free_r>:
 800c2cc:	b538      	push	{r3, r4, r5, lr}
 800c2ce:	4605      	mov	r5, r0
 800c2d0:	2900      	cmp	r1, #0
 800c2d2:	d040      	beq.n	800c356 <_free_r+0x8a>
 800c2d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2d8:	1f0c      	subs	r4, r1, #4
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	bfb8      	it	lt
 800c2de:	18e4      	addlt	r4, r4, r3
 800c2e0:	f000 faae 	bl	800c840 <__malloc_lock>
 800c2e4:	4a1c      	ldr	r2, [pc, #112]	; (800c358 <_free_r+0x8c>)
 800c2e6:	6813      	ldr	r3, [r2, #0]
 800c2e8:	b933      	cbnz	r3, 800c2f8 <_free_r+0x2c>
 800c2ea:	6063      	str	r3, [r4, #4]
 800c2ec:	6014      	str	r4, [r2, #0]
 800c2ee:	4628      	mov	r0, r5
 800c2f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2f4:	f000 baaa 	b.w	800c84c <__malloc_unlock>
 800c2f8:	42a3      	cmp	r3, r4
 800c2fa:	d908      	bls.n	800c30e <_free_r+0x42>
 800c2fc:	6820      	ldr	r0, [r4, #0]
 800c2fe:	1821      	adds	r1, r4, r0
 800c300:	428b      	cmp	r3, r1
 800c302:	bf01      	itttt	eq
 800c304:	6819      	ldreq	r1, [r3, #0]
 800c306:	685b      	ldreq	r3, [r3, #4]
 800c308:	1809      	addeq	r1, r1, r0
 800c30a:	6021      	streq	r1, [r4, #0]
 800c30c:	e7ed      	b.n	800c2ea <_free_r+0x1e>
 800c30e:	461a      	mov	r2, r3
 800c310:	685b      	ldr	r3, [r3, #4]
 800c312:	b10b      	cbz	r3, 800c318 <_free_r+0x4c>
 800c314:	42a3      	cmp	r3, r4
 800c316:	d9fa      	bls.n	800c30e <_free_r+0x42>
 800c318:	6811      	ldr	r1, [r2, #0]
 800c31a:	1850      	adds	r0, r2, r1
 800c31c:	42a0      	cmp	r0, r4
 800c31e:	d10b      	bne.n	800c338 <_free_r+0x6c>
 800c320:	6820      	ldr	r0, [r4, #0]
 800c322:	4401      	add	r1, r0
 800c324:	1850      	adds	r0, r2, r1
 800c326:	4283      	cmp	r3, r0
 800c328:	6011      	str	r1, [r2, #0]
 800c32a:	d1e0      	bne.n	800c2ee <_free_r+0x22>
 800c32c:	6818      	ldr	r0, [r3, #0]
 800c32e:	685b      	ldr	r3, [r3, #4]
 800c330:	4401      	add	r1, r0
 800c332:	6011      	str	r1, [r2, #0]
 800c334:	6053      	str	r3, [r2, #4]
 800c336:	e7da      	b.n	800c2ee <_free_r+0x22>
 800c338:	d902      	bls.n	800c340 <_free_r+0x74>
 800c33a:	230c      	movs	r3, #12
 800c33c:	602b      	str	r3, [r5, #0]
 800c33e:	e7d6      	b.n	800c2ee <_free_r+0x22>
 800c340:	6820      	ldr	r0, [r4, #0]
 800c342:	1821      	adds	r1, r4, r0
 800c344:	428b      	cmp	r3, r1
 800c346:	bf01      	itttt	eq
 800c348:	6819      	ldreq	r1, [r3, #0]
 800c34a:	685b      	ldreq	r3, [r3, #4]
 800c34c:	1809      	addeq	r1, r1, r0
 800c34e:	6021      	streq	r1, [r4, #0]
 800c350:	6063      	str	r3, [r4, #4]
 800c352:	6054      	str	r4, [r2, #4]
 800c354:	e7cb      	b.n	800c2ee <_free_r+0x22>
 800c356:	bd38      	pop	{r3, r4, r5, pc}
 800c358:	20000544 	.word	0x20000544

0800c35c <sbrk_aligned>:
 800c35c:	b570      	push	{r4, r5, r6, lr}
 800c35e:	4e0e      	ldr	r6, [pc, #56]	; (800c398 <sbrk_aligned+0x3c>)
 800c360:	460c      	mov	r4, r1
 800c362:	6831      	ldr	r1, [r6, #0]
 800c364:	4605      	mov	r5, r0
 800c366:	b911      	cbnz	r1, 800c36e <sbrk_aligned+0x12>
 800c368:	f000 f9ee 	bl	800c748 <_sbrk_r>
 800c36c:	6030      	str	r0, [r6, #0]
 800c36e:	4621      	mov	r1, r4
 800c370:	4628      	mov	r0, r5
 800c372:	f000 f9e9 	bl	800c748 <_sbrk_r>
 800c376:	1c43      	adds	r3, r0, #1
 800c378:	d00a      	beq.n	800c390 <sbrk_aligned+0x34>
 800c37a:	1cc4      	adds	r4, r0, #3
 800c37c:	f024 0403 	bic.w	r4, r4, #3
 800c380:	42a0      	cmp	r0, r4
 800c382:	d007      	beq.n	800c394 <sbrk_aligned+0x38>
 800c384:	1a21      	subs	r1, r4, r0
 800c386:	4628      	mov	r0, r5
 800c388:	f000 f9de 	bl	800c748 <_sbrk_r>
 800c38c:	3001      	adds	r0, #1
 800c38e:	d101      	bne.n	800c394 <sbrk_aligned+0x38>
 800c390:	f04f 34ff 	mov.w	r4, #4294967295
 800c394:	4620      	mov	r0, r4
 800c396:	bd70      	pop	{r4, r5, r6, pc}
 800c398:	20000548 	.word	0x20000548

0800c39c <_malloc_r>:
 800c39c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3a0:	1ccd      	adds	r5, r1, #3
 800c3a2:	f025 0503 	bic.w	r5, r5, #3
 800c3a6:	3508      	adds	r5, #8
 800c3a8:	2d0c      	cmp	r5, #12
 800c3aa:	bf38      	it	cc
 800c3ac:	250c      	movcc	r5, #12
 800c3ae:	2d00      	cmp	r5, #0
 800c3b0:	4607      	mov	r7, r0
 800c3b2:	db01      	blt.n	800c3b8 <_malloc_r+0x1c>
 800c3b4:	42a9      	cmp	r1, r5
 800c3b6:	d905      	bls.n	800c3c4 <_malloc_r+0x28>
 800c3b8:	230c      	movs	r3, #12
 800c3ba:	2600      	movs	r6, #0
 800c3bc:	603b      	str	r3, [r7, #0]
 800c3be:	4630      	mov	r0, r6
 800c3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3c4:	4e2e      	ldr	r6, [pc, #184]	; (800c480 <_malloc_r+0xe4>)
 800c3c6:	f000 fa3b 	bl	800c840 <__malloc_lock>
 800c3ca:	6833      	ldr	r3, [r6, #0]
 800c3cc:	461c      	mov	r4, r3
 800c3ce:	bb34      	cbnz	r4, 800c41e <_malloc_r+0x82>
 800c3d0:	4629      	mov	r1, r5
 800c3d2:	4638      	mov	r0, r7
 800c3d4:	f7ff ffc2 	bl	800c35c <sbrk_aligned>
 800c3d8:	1c43      	adds	r3, r0, #1
 800c3da:	4604      	mov	r4, r0
 800c3dc:	d14d      	bne.n	800c47a <_malloc_r+0xde>
 800c3de:	6834      	ldr	r4, [r6, #0]
 800c3e0:	4626      	mov	r6, r4
 800c3e2:	2e00      	cmp	r6, #0
 800c3e4:	d140      	bne.n	800c468 <_malloc_r+0xcc>
 800c3e6:	6823      	ldr	r3, [r4, #0]
 800c3e8:	4631      	mov	r1, r6
 800c3ea:	4638      	mov	r0, r7
 800c3ec:	eb04 0803 	add.w	r8, r4, r3
 800c3f0:	f000 f9aa 	bl	800c748 <_sbrk_r>
 800c3f4:	4580      	cmp	r8, r0
 800c3f6:	d13a      	bne.n	800c46e <_malloc_r+0xd2>
 800c3f8:	6821      	ldr	r1, [r4, #0]
 800c3fa:	3503      	adds	r5, #3
 800c3fc:	1a6d      	subs	r5, r5, r1
 800c3fe:	f025 0503 	bic.w	r5, r5, #3
 800c402:	3508      	adds	r5, #8
 800c404:	2d0c      	cmp	r5, #12
 800c406:	bf38      	it	cc
 800c408:	250c      	movcc	r5, #12
 800c40a:	4638      	mov	r0, r7
 800c40c:	4629      	mov	r1, r5
 800c40e:	f7ff ffa5 	bl	800c35c <sbrk_aligned>
 800c412:	3001      	adds	r0, #1
 800c414:	d02b      	beq.n	800c46e <_malloc_r+0xd2>
 800c416:	6823      	ldr	r3, [r4, #0]
 800c418:	442b      	add	r3, r5
 800c41a:	6023      	str	r3, [r4, #0]
 800c41c:	e00e      	b.n	800c43c <_malloc_r+0xa0>
 800c41e:	6822      	ldr	r2, [r4, #0]
 800c420:	1b52      	subs	r2, r2, r5
 800c422:	d41e      	bmi.n	800c462 <_malloc_r+0xc6>
 800c424:	2a0b      	cmp	r2, #11
 800c426:	d916      	bls.n	800c456 <_malloc_r+0xba>
 800c428:	1961      	adds	r1, r4, r5
 800c42a:	42a3      	cmp	r3, r4
 800c42c:	6025      	str	r5, [r4, #0]
 800c42e:	bf18      	it	ne
 800c430:	6059      	strne	r1, [r3, #4]
 800c432:	6863      	ldr	r3, [r4, #4]
 800c434:	bf08      	it	eq
 800c436:	6031      	streq	r1, [r6, #0]
 800c438:	5162      	str	r2, [r4, r5]
 800c43a:	604b      	str	r3, [r1, #4]
 800c43c:	4638      	mov	r0, r7
 800c43e:	f104 060b 	add.w	r6, r4, #11
 800c442:	f000 fa03 	bl	800c84c <__malloc_unlock>
 800c446:	f026 0607 	bic.w	r6, r6, #7
 800c44a:	1d23      	adds	r3, r4, #4
 800c44c:	1af2      	subs	r2, r6, r3
 800c44e:	d0b6      	beq.n	800c3be <_malloc_r+0x22>
 800c450:	1b9b      	subs	r3, r3, r6
 800c452:	50a3      	str	r3, [r4, r2]
 800c454:	e7b3      	b.n	800c3be <_malloc_r+0x22>
 800c456:	6862      	ldr	r2, [r4, #4]
 800c458:	42a3      	cmp	r3, r4
 800c45a:	bf0c      	ite	eq
 800c45c:	6032      	streq	r2, [r6, #0]
 800c45e:	605a      	strne	r2, [r3, #4]
 800c460:	e7ec      	b.n	800c43c <_malloc_r+0xa0>
 800c462:	4623      	mov	r3, r4
 800c464:	6864      	ldr	r4, [r4, #4]
 800c466:	e7b2      	b.n	800c3ce <_malloc_r+0x32>
 800c468:	4634      	mov	r4, r6
 800c46a:	6876      	ldr	r6, [r6, #4]
 800c46c:	e7b9      	b.n	800c3e2 <_malloc_r+0x46>
 800c46e:	230c      	movs	r3, #12
 800c470:	4638      	mov	r0, r7
 800c472:	603b      	str	r3, [r7, #0]
 800c474:	f000 f9ea 	bl	800c84c <__malloc_unlock>
 800c478:	e7a1      	b.n	800c3be <_malloc_r+0x22>
 800c47a:	6025      	str	r5, [r4, #0]
 800c47c:	e7de      	b.n	800c43c <_malloc_r+0xa0>
 800c47e:	bf00      	nop
 800c480:	20000544 	.word	0x20000544

0800c484 <__ssputs_r>:
 800c484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c488:	688e      	ldr	r6, [r1, #8]
 800c48a:	4682      	mov	sl, r0
 800c48c:	429e      	cmp	r6, r3
 800c48e:	460c      	mov	r4, r1
 800c490:	4690      	mov	r8, r2
 800c492:	461f      	mov	r7, r3
 800c494:	d838      	bhi.n	800c508 <__ssputs_r+0x84>
 800c496:	898a      	ldrh	r2, [r1, #12]
 800c498:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c49c:	d032      	beq.n	800c504 <__ssputs_r+0x80>
 800c49e:	6825      	ldr	r5, [r4, #0]
 800c4a0:	6909      	ldr	r1, [r1, #16]
 800c4a2:	3301      	adds	r3, #1
 800c4a4:	eba5 0901 	sub.w	r9, r5, r1
 800c4a8:	6965      	ldr	r5, [r4, #20]
 800c4aa:	444b      	add	r3, r9
 800c4ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c4b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c4b4:	106d      	asrs	r5, r5, #1
 800c4b6:	429d      	cmp	r5, r3
 800c4b8:	bf38      	it	cc
 800c4ba:	461d      	movcc	r5, r3
 800c4bc:	0553      	lsls	r3, r2, #21
 800c4be:	d531      	bpl.n	800c524 <__ssputs_r+0xa0>
 800c4c0:	4629      	mov	r1, r5
 800c4c2:	f7ff ff6b 	bl	800c39c <_malloc_r>
 800c4c6:	4606      	mov	r6, r0
 800c4c8:	b950      	cbnz	r0, 800c4e0 <__ssputs_r+0x5c>
 800c4ca:	230c      	movs	r3, #12
 800c4cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c4d0:	f8ca 3000 	str.w	r3, [sl]
 800c4d4:	89a3      	ldrh	r3, [r4, #12]
 800c4d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4da:	81a3      	strh	r3, [r4, #12]
 800c4dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4e0:	464a      	mov	r2, r9
 800c4e2:	6921      	ldr	r1, [r4, #16]
 800c4e4:	f7ff fa18 	bl	800b918 <memcpy>
 800c4e8:	89a3      	ldrh	r3, [r4, #12]
 800c4ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c4ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4f2:	81a3      	strh	r3, [r4, #12]
 800c4f4:	6126      	str	r6, [r4, #16]
 800c4f6:	444e      	add	r6, r9
 800c4f8:	6026      	str	r6, [r4, #0]
 800c4fa:	463e      	mov	r6, r7
 800c4fc:	6165      	str	r5, [r4, #20]
 800c4fe:	eba5 0509 	sub.w	r5, r5, r9
 800c502:	60a5      	str	r5, [r4, #8]
 800c504:	42be      	cmp	r6, r7
 800c506:	d900      	bls.n	800c50a <__ssputs_r+0x86>
 800c508:	463e      	mov	r6, r7
 800c50a:	4632      	mov	r2, r6
 800c50c:	4641      	mov	r1, r8
 800c50e:	6820      	ldr	r0, [r4, #0]
 800c510:	f000 f97c 	bl	800c80c <memmove>
 800c514:	68a3      	ldr	r3, [r4, #8]
 800c516:	2000      	movs	r0, #0
 800c518:	1b9b      	subs	r3, r3, r6
 800c51a:	60a3      	str	r3, [r4, #8]
 800c51c:	6823      	ldr	r3, [r4, #0]
 800c51e:	4433      	add	r3, r6
 800c520:	6023      	str	r3, [r4, #0]
 800c522:	e7db      	b.n	800c4dc <__ssputs_r+0x58>
 800c524:	462a      	mov	r2, r5
 800c526:	f000 f997 	bl	800c858 <_realloc_r>
 800c52a:	4606      	mov	r6, r0
 800c52c:	2800      	cmp	r0, #0
 800c52e:	d1e1      	bne.n	800c4f4 <__ssputs_r+0x70>
 800c530:	4650      	mov	r0, sl
 800c532:	6921      	ldr	r1, [r4, #16]
 800c534:	f7ff feca 	bl	800c2cc <_free_r>
 800c538:	e7c7      	b.n	800c4ca <__ssputs_r+0x46>
	...

0800c53c <_svfiprintf_r>:
 800c53c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c540:	4698      	mov	r8, r3
 800c542:	898b      	ldrh	r3, [r1, #12]
 800c544:	4607      	mov	r7, r0
 800c546:	061b      	lsls	r3, r3, #24
 800c548:	460d      	mov	r5, r1
 800c54a:	4614      	mov	r4, r2
 800c54c:	b09d      	sub	sp, #116	; 0x74
 800c54e:	d50e      	bpl.n	800c56e <_svfiprintf_r+0x32>
 800c550:	690b      	ldr	r3, [r1, #16]
 800c552:	b963      	cbnz	r3, 800c56e <_svfiprintf_r+0x32>
 800c554:	2140      	movs	r1, #64	; 0x40
 800c556:	f7ff ff21 	bl	800c39c <_malloc_r>
 800c55a:	6028      	str	r0, [r5, #0]
 800c55c:	6128      	str	r0, [r5, #16]
 800c55e:	b920      	cbnz	r0, 800c56a <_svfiprintf_r+0x2e>
 800c560:	230c      	movs	r3, #12
 800c562:	603b      	str	r3, [r7, #0]
 800c564:	f04f 30ff 	mov.w	r0, #4294967295
 800c568:	e0d1      	b.n	800c70e <_svfiprintf_r+0x1d2>
 800c56a:	2340      	movs	r3, #64	; 0x40
 800c56c:	616b      	str	r3, [r5, #20]
 800c56e:	2300      	movs	r3, #0
 800c570:	9309      	str	r3, [sp, #36]	; 0x24
 800c572:	2320      	movs	r3, #32
 800c574:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c578:	2330      	movs	r3, #48	; 0x30
 800c57a:	f04f 0901 	mov.w	r9, #1
 800c57e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c582:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c728 <_svfiprintf_r+0x1ec>
 800c586:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c58a:	4623      	mov	r3, r4
 800c58c:	469a      	mov	sl, r3
 800c58e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c592:	b10a      	cbz	r2, 800c598 <_svfiprintf_r+0x5c>
 800c594:	2a25      	cmp	r2, #37	; 0x25
 800c596:	d1f9      	bne.n	800c58c <_svfiprintf_r+0x50>
 800c598:	ebba 0b04 	subs.w	fp, sl, r4
 800c59c:	d00b      	beq.n	800c5b6 <_svfiprintf_r+0x7a>
 800c59e:	465b      	mov	r3, fp
 800c5a0:	4622      	mov	r2, r4
 800c5a2:	4629      	mov	r1, r5
 800c5a4:	4638      	mov	r0, r7
 800c5a6:	f7ff ff6d 	bl	800c484 <__ssputs_r>
 800c5aa:	3001      	adds	r0, #1
 800c5ac:	f000 80aa 	beq.w	800c704 <_svfiprintf_r+0x1c8>
 800c5b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5b2:	445a      	add	r2, fp
 800c5b4:	9209      	str	r2, [sp, #36]	; 0x24
 800c5b6:	f89a 3000 	ldrb.w	r3, [sl]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	f000 80a2 	beq.w	800c704 <_svfiprintf_r+0x1c8>
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	f04f 32ff 	mov.w	r2, #4294967295
 800c5c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5ca:	f10a 0a01 	add.w	sl, sl, #1
 800c5ce:	9304      	str	r3, [sp, #16]
 800c5d0:	9307      	str	r3, [sp, #28]
 800c5d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c5d6:	931a      	str	r3, [sp, #104]	; 0x68
 800c5d8:	4654      	mov	r4, sl
 800c5da:	2205      	movs	r2, #5
 800c5dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5e0:	4851      	ldr	r0, [pc, #324]	; (800c728 <_svfiprintf_r+0x1ec>)
 800c5e2:	f7ff f98b 	bl	800b8fc <memchr>
 800c5e6:	9a04      	ldr	r2, [sp, #16]
 800c5e8:	b9d8      	cbnz	r0, 800c622 <_svfiprintf_r+0xe6>
 800c5ea:	06d0      	lsls	r0, r2, #27
 800c5ec:	bf44      	itt	mi
 800c5ee:	2320      	movmi	r3, #32
 800c5f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5f4:	0711      	lsls	r1, r2, #28
 800c5f6:	bf44      	itt	mi
 800c5f8:	232b      	movmi	r3, #43	; 0x2b
 800c5fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5fe:	f89a 3000 	ldrb.w	r3, [sl]
 800c602:	2b2a      	cmp	r3, #42	; 0x2a
 800c604:	d015      	beq.n	800c632 <_svfiprintf_r+0xf6>
 800c606:	4654      	mov	r4, sl
 800c608:	2000      	movs	r0, #0
 800c60a:	f04f 0c0a 	mov.w	ip, #10
 800c60e:	9a07      	ldr	r2, [sp, #28]
 800c610:	4621      	mov	r1, r4
 800c612:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c616:	3b30      	subs	r3, #48	; 0x30
 800c618:	2b09      	cmp	r3, #9
 800c61a:	d94e      	bls.n	800c6ba <_svfiprintf_r+0x17e>
 800c61c:	b1b0      	cbz	r0, 800c64c <_svfiprintf_r+0x110>
 800c61e:	9207      	str	r2, [sp, #28]
 800c620:	e014      	b.n	800c64c <_svfiprintf_r+0x110>
 800c622:	eba0 0308 	sub.w	r3, r0, r8
 800c626:	fa09 f303 	lsl.w	r3, r9, r3
 800c62a:	4313      	orrs	r3, r2
 800c62c:	46a2      	mov	sl, r4
 800c62e:	9304      	str	r3, [sp, #16]
 800c630:	e7d2      	b.n	800c5d8 <_svfiprintf_r+0x9c>
 800c632:	9b03      	ldr	r3, [sp, #12]
 800c634:	1d19      	adds	r1, r3, #4
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	9103      	str	r1, [sp, #12]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	bfbb      	ittet	lt
 800c63e:	425b      	neglt	r3, r3
 800c640:	f042 0202 	orrlt.w	r2, r2, #2
 800c644:	9307      	strge	r3, [sp, #28]
 800c646:	9307      	strlt	r3, [sp, #28]
 800c648:	bfb8      	it	lt
 800c64a:	9204      	strlt	r2, [sp, #16]
 800c64c:	7823      	ldrb	r3, [r4, #0]
 800c64e:	2b2e      	cmp	r3, #46	; 0x2e
 800c650:	d10c      	bne.n	800c66c <_svfiprintf_r+0x130>
 800c652:	7863      	ldrb	r3, [r4, #1]
 800c654:	2b2a      	cmp	r3, #42	; 0x2a
 800c656:	d135      	bne.n	800c6c4 <_svfiprintf_r+0x188>
 800c658:	9b03      	ldr	r3, [sp, #12]
 800c65a:	3402      	adds	r4, #2
 800c65c:	1d1a      	adds	r2, r3, #4
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	9203      	str	r2, [sp, #12]
 800c662:	2b00      	cmp	r3, #0
 800c664:	bfb8      	it	lt
 800c666:	f04f 33ff 	movlt.w	r3, #4294967295
 800c66a:	9305      	str	r3, [sp, #20]
 800c66c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800c72c <_svfiprintf_r+0x1f0>
 800c670:	2203      	movs	r2, #3
 800c672:	4650      	mov	r0, sl
 800c674:	7821      	ldrb	r1, [r4, #0]
 800c676:	f7ff f941 	bl	800b8fc <memchr>
 800c67a:	b140      	cbz	r0, 800c68e <_svfiprintf_r+0x152>
 800c67c:	2340      	movs	r3, #64	; 0x40
 800c67e:	eba0 000a 	sub.w	r0, r0, sl
 800c682:	fa03 f000 	lsl.w	r0, r3, r0
 800c686:	9b04      	ldr	r3, [sp, #16]
 800c688:	3401      	adds	r4, #1
 800c68a:	4303      	orrs	r3, r0
 800c68c:	9304      	str	r3, [sp, #16]
 800c68e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c692:	2206      	movs	r2, #6
 800c694:	4826      	ldr	r0, [pc, #152]	; (800c730 <_svfiprintf_r+0x1f4>)
 800c696:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c69a:	f7ff f92f 	bl	800b8fc <memchr>
 800c69e:	2800      	cmp	r0, #0
 800c6a0:	d038      	beq.n	800c714 <_svfiprintf_r+0x1d8>
 800c6a2:	4b24      	ldr	r3, [pc, #144]	; (800c734 <_svfiprintf_r+0x1f8>)
 800c6a4:	bb1b      	cbnz	r3, 800c6ee <_svfiprintf_r+0x1b2>
 800c6a6:	9b03      	ldr	r3, [sp, #12]
 800c6a8:	3307      	adds	r3, #7
 800c6aa:	f023 0307 	bic.w	r3, r3, #7
 800c6ae:	3308      	adds	r3, #8
 800c6b0:	9303      	str	r3, [sp, #12]
 800c6b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6b4:	4433      	add	r3, r6
 800c6b6:	9309      	str	r3, [sp, #36]	; 0x24
 800c6b8:	e767      	b.n	800c58a <_svfiprintf_r+0x4e>
 800c6ba:	460c      	mov	r4, r1
 800c6bc:	2001      	movs	r0, #1
 800c6be:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6c2:	e7a5      	b.n	800c610 <_svfiprintf_r+0xd4>
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	f04f 0c0a 	mov.w	ip, #10
 800c6ca:	4619      	mov	r1, r3
 800c6cc:	3401      	adds	r4, #1
 800c6ce:	9305      	str	r3, [sp, #20]
 800c6d0:	4620      	mov	r0, r4
 800c6d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6d6:	3a30      	subs	r2, #48	; 0x30
 800c6d8:	2a09      	cmp	r2, #9
 800c6da:	d903      	bls.n	800c6e4 <_svfiprintf_r+0x1a8>
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d0c5      	beq.n	800c66c <_svfiprintf_r+0x130>
 800c6e0:	9105      	str	r1, [sp, #20]
 800c6e2:	e7c3      	b.n	800c66c <_svfiprintf_r+0x130>
 800c6e4:	4604      	mov	r4, r0
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6ec:	e7f0      	b.n	800c6d0 <_svfiprintf_r+0x194>
 800c6ee:	ab03      	add	r3, sp, #12
 800c6f0:	9300      	str	r3, [sp, #0]
 800c6f2:	462a      	mov	r2, r5
 800c6f4:	4638      	mov	r0, r7
 800c6f6:	4b10      	ldr	r3, [pc, #64]	; (800c738 <_svfiprintf_r+0x1fc>)
 800c6f8:	a904      	add	r1, sp, #16
 800c6fa:	f7fc fa49 	bl	8008b90 <_printf_float>
 800c6fe:	1c42      	adds	r2, r0, #1
 800c700:	4606      	mov	r6, r0
 800c702:	d1d6      	bne.n	800c6b2 <_svfiprintf_r+0x176>
 800c704:	89ab      	ldrh	r3, [r5, #12]
 800c706:	065b      	lsls	r3, r3, #25
 800c708:	f53f af2c 	bmi.w	800c564 <_svfiprintf_r+0x28>
 800c70c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c70e:	b01d      	add	sp, #116	; 0x74
 800c710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c714:	ab03      	add	r3, sp, #12
 800c716:	9300      	str	r3, [sp, #0]
 800c718:	462a      	mov	r2, r5
 800c71a:	4638      	mov	r0, r7
 800c71c:	4b06      	ldr	r3, [pc, #24]	; (800c738 <_svfiprintf_r+0x1fc>)
 800c71e:	a904      	add	r1, sp, #16
 800c720:	f7fc fcd2 	bl	80090c8 <_printf_i>
 800c724:	e7eb      	b.n	800c6fe <_svfiprintf_r+0x1c2>
 800c726:	bf00      	nop
 800c728:	0800e954 	.word	0x0800e954
 800c72c:	0800e95a 	.word	0x0800e95a
 800c730:	0800e95e 	.word	0x0800e95e
 800c734:	08008b91 	.word	0x08008b91
 800c738:	0800c485 	.word	0x0800c485

0800c73c <nan>:
 800c73c:	2000      	movs	r0, #0
 800c73e:	4901      	ldr	r1, [pc, #4]	; (800c744 <nan+0x8>)
 800c740:	4770      	bx	lr
 800c742:	bf00      	nop
 800c744:	7ff80000 	.word	0x7ff80000

0800c748 <_sbrk_r>:
 800c748:	b538      	push	{r3, r4, r5, lr}
 800c74a:	2300      	movs	r3, #0
 800c74c:	4d05      	ldr	r5, [pc, #20]	; (800c764 <_sbrk_r+0x1c>)
 800c74e:	4604      	mov	r4, r0
 800c750:	4608      	mov	r0, r1
 800c752:	602b      	str	r3, [r5, #0]
 800c754:	f7f6 ff42 	bl	80035dc <_sbrk>
 800c758:	1c43      	adds	r3, r0, #1
 800c75a:	d102      	bne.n	800c762 <_sbrk_r+0x1a>
 800c75c:	682b      	ldr	r3, [r5, #0]
 800c75e:	b103      	cbz	r3, 800c762 <_sbrk_r+0x1a>
 800c760:	6023      	str	r3, [r4, #0]
 800c762:	bd38      	pop	{r3, r4, r5, pc}
 800c764:	2000054c 	.word	0x2000054c

0800c768 <strncmp>:
 800c768:	4603      	mov	r3, r0
 800c76a:	b510      	push	{r4, lr}
 800c76c:	b172      	cbz	r2, 800c78c <strncmp+0x24>
 800c76e:	3901      	subs	r1, #1
 800c770:	1884      	adds	r4, r0, r2
 800c772:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c776:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c77a:	4290      	cmp	r0, r2
 800c77c:	d101      	bne.n	800c782 <strncmp+0x1a>
 800c77e:	42a3      	cmp	r3, r4
 800c780:	d101      	bne.n	800c786 <strncmp+0x1e>
 800c782:	1a80      	subs	r0, r0, r2
 800c784:	bd10      	pop	{r4, pc}
 800c786:	2800      	cmp	r0, #0
 800c788:	d1f3      	bne.n	800c772 <strncmp+0xa>
 800c78a:	e7fa      	b.n	800c782 <strncmp+0x1a>
 800c78c:	4610      	mov	r0, r2
 800c78e:	e7f9      	b.n	800c784 <strncmp+0x1c>

0800c790 <__ascii_wctomb>:
 800c790:	4603      	mov	r3, r0
 800c792:	4608      	mov	r0, r1
 800c794:	b141      	cbz	r1, 800c7a8 <__ascii_wctomb+0x18>
 800c796:	2aff      	cmp	r2, #255	; 0xff
 800c798:	d904      	bls.n	800c7a4 <__ascii_wctomb+0x14>
 800c79a:	228a      	movs	r2, #138	; 0x8a
 800c79c:	f04f 30ff 	mov.w	r0, #4294967295
 800c7a0:	601a      	str	r2, [r3, #0]
 800c7a2:	4770      	bx	lr
 800c7a4:	2001      	movs	r0, #1
 800c7a6:	700a      	strb	r2, [r1, #0]
 800c7a8:	4770      	bx	lr
	...

0800c7ac <__assert_func>:
 800c7ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c7ae:	4614      	mov	r4, r2
 800c7b0:	461a      	mov	r2, r3
 800c7b2:	4b09      	ldr	r3, [pc, #36]	; (800c7d8 <__assert_func+0x2c>)
 800c7b4:	4605      	mov	r5, r0
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	68d8      	ldr	r0, [r3, #12]
 800c7ba:	b14c      	cbz	r4, 800c7d0 <__assert_func+0x24>
 800c7bc:	4b07      	ldr	r3, [pc, #28]	; (800c7dc <__assert_func+0x30>)
 800c7be:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c7c2:	9100      	str	r1, [sp, #0]
 800c7c4:	462b      	mov	r3, r5
 800c7c6:	4906      	ldr	r1, [pc, #24]	; (800c7e0 <__assert_func+0x34>)
 800c7c8:	f000 f80e 	bl	800c7e8 <fiprintf>
 800c7cc:	f000 fa8a 	bl	800cce4 <abort>
 800c7d0:	4b04      	ldr	r3, [pc, #16]	; (800c7e4 <__assert_func+0x38>)
 800c7d2:	461c      	mov	r4, r3
 800c7d4:	e7f3      	b.n	800c7be <__assert_func+0x12>
 800c7d6:	bf00      	nop
 800c7d8:	20000018 	.word	0x20000018
 800c7dc:	0800e965 	.word	0x0800e965
 800c7e0:	0800e972 	.word	0x0800e972
 800c7e4:	0800e9a0 	.word	0x0800e9a0

0800c7e8 <fiprintf>:
 800c7e8:	b40e      	push	{r1, r2, r3}
 800c7ea:	b503      	push	{r0, r1, lr}
 800c7ec:	4601      	mov	r1, r0
 800c7ee:	ab03      	add	r3, sp, #12
 800c7f0:	4805      	ldr	r0, [pc, #20]	; (800c808 <fiprintf+0x20>)
 800c7f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7f6:	6800      	ldr	r0, [r0, #0]
 800c7f8:	9301      	str	r3, [sp, #4]
 800c7fa:	f000 f883 	bl	800c904 <_vfiprintf_r>
 800c7fe:	b002      	add	sp, #8
 800c800:	f85d eb04 	ldr.w	lr, [sp], #4
 800c804:	b003      	add	sp, #12
 800c806:	4770      	bx	lr
 800c808:	20000018 	.word	0x20000018

0800c80c <memmove>:
 800c80c:	4288      	cmp	r0, r1
 800c80e:	b510      	push	{r4, lr}
 800c810:	eb01 0402 	add.w	r4, r1, r2
 800c814:	d902      	bls.n	800c81c <memmove+0x10>
 800c816:	4284      	cmp	r4, r0
 800c818:	4623      	mov	r3, r4
 800c81a:	d807      	bhi.n	800c82c <memmove+0x20>
 800c81c:	1e43      	subs	r3, r0, #1
 800c81e:	42a1      	cmp	r1, r4
 800c820:	d008      	beq.n	800c834 <memmove+0x28>
 800c822:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c826:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c82a:	e7f8      	b.n	800c81e <memmove+0x12>
 800c82c:	4601      	mov	r1, r0
 800c82e:	4402      	add	r2, r0
 800c830:	428a      	cmp	r2, r1
 800c832:	d100      	bne.n	800c836 <memmove+0x2a>
 800c834:	bd10      	pop	{r4, pc}
 800c836:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c83a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c83e:	e7f7      	b.n	800c830 <memmove+0x24>

0800c840 <__malloc_lock>:
 800c840:	4801      	ldr	r0, [pc, #4]	; (800c848 <__malloc_lock+0x8>)
 800c842:	f000 bc0b 	b.w	800d05c <__retarget_lock_acquire_recursive>
 800c846:	bf00      	nop
 800c848:	20000550 	.word	0x20000550

0800c84c <__malloc_unlock>:
 800c84c:	4801      	ldr	r0, [pc, #4]	; (800c854 <__malloc_unlock+0x8>)
 800c84e:	f000 bc06 	b.w	800d05e <__retarget_lock_release_recursive>
 800c852:	bf00      	nop
 800c854:	20000550 	.word	0x20000550

0800c858 <_realloc_r>:
 800c858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c85c:	4680      	mov	r8, r0
 800c85e:	4614      	mov	r4, r2
 800c860:	460e      	mov	r6, r1
 800c862:	b921      	cbnz	r1, 800c86e <_realloc_r+0x16>
 800c864:	4611      	mov	r1, r2
 800c866:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c86a:	f7ff bd97 	b.w	800c39c <_malloc_r>
 800c86e:	b92a      	cbnz	r2, 800c87c <_realloc_r+0x24>
 800c870:	f7ff fd2c 	bl	800c2cc <_free_r>
 800c874:	4625      	mov	r5, r4
 800c876:	4628      	mov	r0, r5
 800c878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c87c:	f000 fc56 	bl	800d12c <_malloc_usable_size_r>
 800c880:	4284      	cmp	r4, r0
 800c882:	4607      	mov	r7, r0
 800c884:	d802      	bhi.n	800c88c <_realloc_r+0x34>
 800c886:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c88a:	d812      	bhi.n	800c8b2 <_realloc_r+0x5a>
 800c88c:	4621      	mov	r1, r4
 800c88e:	4640      	mov	r0, r8
 800c890:	f7ff fd84 	bl	800c39c <_malloc_r>
 800c894:	4605      	mov	r5, r0
 800c896:	2800      	cmp	r0, #0
 800c898:	d0ed      	beq.n	800c876 <_realloc_r+0x1e>
 800c89a:	42bc      	cmp	r4, r7
 800c89c:	4622      	mov	r2, r4
 800c89e:	4631      	mov	r1, r6
 800c8a0:	bf28      	it	cs
 800c8a2:	463a      	movcs	r2, r7
 800c8a4:	f7ff f838 	bl	800b918 <memcpy>
 800c8a8:	4631      	mov	r1, r6
 800c8aa:	4640      	mov	r0, r8
 800c8ac:	f7ff fd0e 	bl	800c2cc <_free_r>
 800c8b0:	e7e1      	b.n	800c876 <_realloc_r+0x1e>
 800c8b2:	4635      	mov	r5, r6
 800c8b4:	e7df      	b.n	800c876 <_realloc_r+0x1e>

0800c8b6 <__sfputc_r>:
 800c8b6:	6893      	ldr	r3, [r2, #8]
 800c8b8:	b410      	push	{r4}
 800c8ba:	3b01      	subs	r3, #1
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	6093      	str	r3, [r2, #8]
 800c8c0:	da07      	bge.n	800c8d2 <__sfputc_r+0x1c>
 800c8c2:	6994      	ldr	r4, [r2, #24]
 800c8c4:	42a3      	cmp	r3, r4
 800c8c6:	db01      	blt.n	800c8cc <__sfputc_r+0x16>
 800c8c8:	290a      	cmp	r1, #10
 800c8ca:	d102      	bne.n	800c8d2 <__sfputc_r+0x1c>
 800c8cc:	bc10      	pop	{r4}
 800c8ce:	f000 b949 	b.w	800cb64 <__swbuf_r>
 800c8d2:	6813      	ldr	r3, [r2, #0]
 800c8d4:	1c58      	adds	r0, r3, #1
 800c8d6:	6010      	str	r0, [r2, #0]
 800c8d8:	7019      	strb	r1, [r3, #0]
 800c8da:	4608      	mov	r0, r1
 800c8dc:	bc10      	pop	{r4}
 800c8de:	4770      	bx	lr

0800c8e0 <__sfputs_r>:
 800c8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8e2:	4606      	mov	r6, r0
 800c8e4:	460f      	mov	r7, r1
 800c8e6:	4614      	mov	r4, r2
 800c8e8:	18d5      	adds	r5, r2, r3
 800c8ea:	42ac      	cmp	r4, r5
 800c8ec:	d101      	bne.n	800c8f2 <__sfputs_r+0x12>
 800c8ee:	2000      	movs	r0, #0
 800c8f0:	e007      	b.n	800c902 <__sfputs_r+0x22>
 800c8f2:	463a      	mov	r2, r7
 800c8f4:	4630      	mov	r0, r6
 800c8f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8fa:	f7ff ffdc 	bl	800c8b6 <__sfputc_r>
 800c8fe:	1c43      	adds	r3, r0, #1
 800c900:	d1f3      	bne.n	800c8ea <__sfputs_r+0xa>
 800c902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c904 <_vfiprintf_r>:
 800c904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c908:	460d      	mov	r5, r1
 800c90a:	4614      	mov	r4, r2
 800c90c:	4698      	mov	r8, r3
 800c90e:	4606      	mov	r6, r0
 800c910:	b09d      	sub	sp, #116	; 0x74
 800c912:	b118      	cbz	r0, 800c91c <_vfiprintf_r+0x18>
 800c914:	6983      	ldr	r3, [r0, #24]
 800c916:	b90b      	cbnz	r3, 800c91c <_vfiprintf_r+0x18>
 800c918:	f000 fb02 	bl	800cf20 <__sinit>
 800c91c:	4b89      	ldr	r3, [pc, #548]	; (800cb44 <_vfiprintf_r+0x240>)
 800c91e:	429d      	cmp	r5, r3
 800c920:	d11b      	bne.n	800c95a <_vfiprintf_r+0x56>
 800c922:	6875      	ldr	r5, [r6, #4]
 800c924:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c926:	07d9      	lsls	r1, r3, #31
 800c928:	d405      	bmi.n	800c936 <_vfiprintf_r+0x32>
 800c92a:	89ab      	ldrh	r3, [r5, #12]
 800c92c:	059a      	lsls	r2, r3, #22
 800c92e:	d402      	bmi.n	800c936 <_vfiprintf_r+0x32>
 800c930:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c932:	f000 fb93 	bl	800d05c <__retarget_lock_acquire_recursive>
 800c936:	89ab      	ldrh	r3, [r5, #12]
 800c938:	071b      	lsls	r3, r3, #28
 800c93a:	d501      	bpl.n	800c940 <_vfiprintf_r+0x3c>
 800c93c:	692b      	ldr	r3, [r5, #16]
 800c93e:	b9eb      	cbnz	r3, 800c97c <_vfiprintf_r+0x78>
 800c940:	4629      	mov	r1, r5
 800c942:	4630      	mov	r0, r6
 800c944:	f000 f960 	bl	800cc08 <__swsetup_r>
 800c948:	b1c0      	cbz	r0, 800c97c <_vfiprintf_r+0x78>
 800c94a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c94c:	07dc      	lsls	r4, r3, #31
 800c94e:	d50e      	bpl.n	800c96e <_vfiprintf_r+0x6a>
 800c950:	f04f 30ff 	mov.w	r0, #4294967295
 800c954:	b01d      	add	sp, #116	; 0x74
 800c956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c95a:	4b7b      	ldr	r3, [pc, #492]	; (800cb48 <_vfiprintf_r+0x244>)
 800c95c:	429d      	cmp	r5, r3
 800c95e:	d101      	bne.n	800c964 <_vfiprintf_r+0x60>
 800c960:	68b5      	ldr	r5, [r6, #8]
 800c962:	e7df      	b.n	800c924 <_vfiprintf_r+0x20>
 800c964:	4b79      	ldr	r3, [pc, #484]	; (800cb4c <_vfiprintf_r+0x248>)
 800c966:	429d      	cmp	r5, r3
 800c968:	bf08      	it	eq
 800c96a:	68f5      	ldreq	r5, [r6, #12]
 800c96c:	e7da      	b.n	800c924 <_vfiprintf_r+0x20>
 800c96e:	89ab      	ldrh	r3, [r5, #12]
 800c970:	0598      	lsls	r0, r3, #22
 800c972:	d4ed      	bmi.n	800c950 <_vfiprintf_r+0x4c>
 800c974:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c976:	f000 fb72 	bl	800d05e <__retarget_lock_release_recursive>
 800c97a:	e7e9      	b.n	800c950 <_vfiprintf_r+0x4c>
 800c97c:	2300      	movs	r3, #0
 800c97e:	9309      	str	r3, [sp, #36]	; 0x24
 800c980:	2320      	movs	r3, #32
 800c982:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c986:	2330      	movs	r3, #48	; 0x30
 800c988:	f04f 0901 	mov.w	r9, #1
 800c98c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c990:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800cb50 <_vfiprintf_r+0x24c>
 800c994:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c998:	4623      	mov	r3, r4
 800c99a:	469a      	mov	sl, r3
 800c99c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9a0:	b10a      	cbz	r2, 800c9a6 <_vfiprintf_r+0xa2>
 800c9a2:	2a25      	cmp	r2, #37	; 0x25
 800c9a4:	d1f9      	bne.n	800c99a <_vfiprintf_r+0x96>
 800c9a6:	ebba 0b04 	subs.w	fp, sl, r4
 800c9aa:	d00b      	beq.n	800c9c4 <_vfiprintf_r+0xc0>
 800c9ac:	465b      	mov	r3, fp
 800c9ae:	4622      	mov	r2, r4
 800c9b0:	4629      	mov	r1, r5
 800c9b2:	4630      	mov	r0, r6
 800c9b4:	f7ff ff94 	bl	800c8e0 <__sfputs_r>
 800c9b8:	3001      	adds	r0, #1
 800c9ba:	f000 80aa 	beq.w	800cb12 <_vfiprintf_r+0x20e>
 800c9be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9c0:	445a      	add	r2, fp
 800c9c2:	9209      	str	r2, [sp, #36]	; 0x24
 800c9c4:	f89a 3000 	ldrb.w	r3, [sl]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	f000 80a2 	beq.w	800cb12 <_vfiprintf_r+0x20e>
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	f04f 32ff 	mov.w	r2, #4294967295
 800c9d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9d8:	f10a 0a01 	add.w	sl, sl, #1
 800c9dc:	9304      	str	r3, [sp, #16]
 800c9de:	9307      	str	r3, [sp, #28]
 800c9e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c9e4:	931a      	str	r3, [sp, #104]	; 0x68
 800c9e6:	4654      	mov	r4, sl
 800c9e8:	2205      	movs	r2, #5
 800c9ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9ee:	4858      	ldr	r0, [pc, #352]	; (800cb50 <_vfiprintf_r+0x24c>)
 800c9f0:	f7fe ff84 	bl	800b8fc <memchr>
 800c9f4:	9a04      	ldr	r2, [sp, #16]
 800c9f6:	b9d8      	cbnz	r0, 800ca30 <_vfiprintf_r+0x12c>
 800c9f8:	06d1      	lsls	r1, r2, #27
 800c9fa:	bf44      	itt	mi
 800c9fc:	2320      	movmi	r3, #32
 800c9fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca02:	0713      	lsls	r3, r2, #28
 800ca04:	bf44      	itt	mi
 800ca06:	232b      	movmi	r3, #43	; 0x2b
 800ca08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca0c:	f89a 3000 	ldrb.w	r3, [sl]
 800ca10:	2b2a      	cmp	r3, #42	; 0x2a
 800ca12:	d015      	beq.n	800ca40 <_vfiprintf_r+0x13c>
 800ca14:	4654      	mov	r4, sl
 800ca16:	2000      	movs	r0, #0
 800ca18:	f04f 0c0a 	mov.w	ip, #10
 800ca1c:	9a07      	ldr	r2, [sp, #28]
 800ca1e:	4621      	mov	r1, r4
 800ca20:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca24:	3b30      	subs	r3, #48	; 0x30
 800ca26:	2b09      	cmp	r3, #9
 800ca28:	d94e      	bls.n	800cac8 <_vfiprintf_r+0x1c4>
 800ca2a:	b1b0      	cbz	r0, 800ca5a <_vfiprintf_r+0x156>
 800ca2c:	9207      	str	r2, [sp, #28]
 800ca2e:	e014      	b.n	800ca5a <_vfiprintf_r+0x156>
 800ca30:	eba0 0308 	sub.w	r3, r0, r8
 800ca34:	fa09 f303 	lsl.w	r3, r9, r3
 800ca38:	4313      	orrs	r3, r2
 800ca3a:	46a2      	mov	sl, r4
 800ca3c:	9304      	str	r3, [sp, #16]
 800ca3e:	e7d2      	b.n	800c9e6 <_vfiprintf_r+0xe2>
 800ca40:	9b03      	ldr	r3, [sp, #12]
 800ca42:	1d19      	adds	r1, r3, #4
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	9103      	str	r1, [sp, #12]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	bfbb      	ittet	lt
 800ca4c:	425b      	neglt	r3, r3
 800ca4e:	f042 0202 	orrlt.w	r2, r2, #2
 800ca52:	9307      	strge	r3, [sp, #28]
 800ca54:	9307      	strlt	r3, [sp, #28]
 800ca56:	bfb8      	it	lt
 800ca58:	9204      	strlt	r2, [sp, #16]
 800ca5a:	7823      	ldrb	r3, [r4, #0]
 800ca5c:	2b2e      	cmp	r3, #46	; 0x2e
 800ca5e:	d10c      	bne.n	800ca7a <_vfiprintf_r+0x176>
 800ca60:	7863      	ldrb	r3, [r4, #1]
 800ca62:	2b2a      	cmp	r3, #42	; 0x2a
 800ca64:	d135      	bne.n	800cad2 <_vfiprintf_r+0x1ce>
 800ca66:	9b03      	ldr	r3, [sp, #12]
 800ca68:	3402      	adds	r4, #2
 800ca6a:	1d1a      	adds	r2, r3, #4
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	9203      	str	r2, [sp, #12]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	bfb8      	it	lt
 800ca74:	f04f 33ff 	movlt.w	r3, #4294967295
 800ca78:	9305      	str	r3, [sp, #20]
 800ca7a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800cb54 <_vfiprintf_r+0x250>
 800ca7e:	2203      	movs	r2, #3
 800ca80:	4650      	mov	r0, sl
 800ca82:	7821      	ldrb	r1, [r4, #0]
 800ca84:	f7fe ff3a 	bl	800b8fc <memchr>
 800ca88:	b140      	cbz	r0, 800ca9c <_vfiprintf_r+0x198>
 800ca8a:	2340      	movs	r3, #64	; 0x40
 800ca8c:	eba0 000a 	sub.w	r0, r0, sl
 800ca90:	fa03 f000 	lsl.w	r0, r3, r0
 800ca94:	9b04      	ldr	r3, [sp, #16]
 800ca96:	3401      	adds	r4, #1
 800ca98:	4303      	orrs	r3, r0
 800ca9a:	9304      	str	r3, [sp, #16]
 800ca9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caa0:	2206      	movs	r2, #6
 800caa2:	482d      	ldr	r0, [pc, #180]	; (800cb58 <_vfiprintf_r+0x254>)
 800caa4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800caa8:	f7fe ff28 	bl	800b8fc <memchr>
 800caac:	2800      	cmp	r0, #0
 800caae:	d03f      	beq.n	800cb30 <_vfiprintf_r+0x22c>
 800cab0:	4b2a      	ldr	r3, [pc, #168]	; (800cb5c <_vfiprintf_r+0x258>)
 800cab2:	bb1b      	cbnz	r3, 800cafc <_vfiprintf_r+0x1f8>
 800cab4:	9b03      	ldr	r3, [sp, #12]
 800cab6:	3307      	adds	r3, #7
 800cab8:	f023 0307 	bic.w	r3, r3, #7
 800cabc:	3308      	adds	r3, #8
 800cabe:	9303      	str	r3, [sp, #12]
 800cac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cac2:	443b      	add	r3, r7
 800cac4:	9309      	str	r3, [sp, #36]	; 0x24
 800cac6:	e767      	b.n	800c998 <_vfiprintf_r+0x94>
 800cac8:	460c      	mov	r4, r1
 800caca:	2001      	movs	r0, #1
 800cacc:	fb0c 3202 	mla	r2, ip, r2, r3
 800cad0:	e7a5      	b.n	800ca1e <_vfiprintf_r+0x11a>
 800cad2:	2300      	movs	r3, #0
 800cad4:	f04f 0c0a 	mov.w	ip, #10
 800cad8:	4619      	mov	r1, r3
 800cada:	3401      	adds	r4, #1
 800cadc:	9305      	str	r3, [sp, #20]
 800cade:	4620      	mov	r0, r4
 800cae0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cae4:	3a30      	subs	r2, #48	; 0x30
 800cae6:	2a09      	cmp	r2, #9
 800cae8:	d903      	bls.n	800caf2 <_vfiprintf_r+0x1ee>
 800caea:	2b00      	cmp	r3, #0
 800caec:	d0c5      	beq.n	800ca7a <_vfiprintf_r+0x176>
 800caee:	9105      	str	r1, [sp, #20]
 800caf0:	e7c3      	b.n	800ca7a <_vfiprintf_r+0x176>
 800caf2:	4604      	mov	r4, r0
 800caf4:	2301      	movs	r3, #1
 800caf6:	fb0c 2101 	mla	r1, ip, r1, r2
 800cafa:	e7f0      	b.n	800cade <_vfiprintf_r+0x1da>
 800cafc:	ab03      	add	r3, sp, #12
 800cafe:	9300      	str	r3, [sp, #0]
 800cb00:	462a      	mov	r2, r5
 800cb02:	4630      	mov	r0, r6
 800cb04:	4b16      	ldr	r3, [pc, #88]	; (800cb60 <_vfiprintf_r+0x25c>)
 800cb06:	a904      	add	r1, sp, #16
 800cb08:	f7fc f842 	bl	8008b90 <_printf_float>
 800cb0c:	4607      	mov	r7, r0
 800cb0e:	1c78      	adds	r0, r7, #1
 800cb10:	d1d6      	bne.n	800cac0 <_vfiprintf_r+0x1bc>
 800cb12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb14:	07d9      	lsls	r1, r3, #31
 800cb16:	d405      	bmi.n	800cb24 <_vfiprintf_r+0x220>
 800cb18:	89ab      	ldrh	r3, [r5, #12]
 800cb1a:	059a      	lsls	r2, r3, #22
 800cb1c:	d402      	bmi.n	800cb24 <_vfiprintf_r+0x220>
 800cb1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb20:	f000 fa9d 	bl	800d05e <__retarget_lock_release_recursive>
 800cb24:	89ab      	ldrh	r3, [r5, #12]
 800cb26:	065b      	lsls	r3, r3, #25
 800cb28:	f53f af12 	bmi.w	800c950 <_vfiprintf_r+0x4c>
 800cb2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb2e:	e711      	b.n	800c954 <_vfiprintf_r+0x50>
 800cb30:	ab03      	add	r3, sp, #12
 800cb32:	9300      	str	r3, [sp, #0]
 800cb34:	462a      	mov	r2, r5
 800cb36:	4630      	mov	r0, r6
 800cb38:	4b09      	ldr	r3, [pc, #36]	; (800cb60 <_vfiprintf_r+0x25c>)
 800cb3a:	a904      	add	r1, sp, #16
 800cb3c:	f7fc fac4 	bl	80090c8 <_printf_i>
 800cb40:	e7e4      	b.n	800cb0c <_vfiprintf_r+0x208>
 800cb42:	bf00      	nop
 800cb44:	0800e9c4 	.word	0x0800e9c4
 800cb48:	0800e9e4 	.word	0x0800e9e4
 800cb4c:	0800e9a4 	.word	0x0800e9a4
 800cb50:	0800e954 	.word	0x0800e954
 800cb54:	0800e95a 	.word	0x0800e95a
 800cb58:	0800e95e 	.word	0x0800e95e
 800cb5c:	08008b91 	.word	0x08008b91
 800cb60:	0800c8e1 	.word	0x0800c8e1

0800cb64 <__swbuf_r>:
 800cb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb66:	460e      	mov	r6, r1
 800cb68:	4614      	mov	r4, r2
 800cb6a:	4605      	mov	r5, r0
 800cb6c:	b118      	cbz	r0, 800cb76 <__swbuf_r+0x12>
 800cb6e:	6983      	ldr	r3, [r0, #24]
 800cb70:	b90b      	cbnz	r3, 800cb76 <__swbuf_r+0x12>
 800cb72:	f000 f9d5 	bl	800cf20 <__sinit>
 800cb76:	4b21      	ldr	r3, [pc, #132]	; (800cbfc <__swbuf_r+0x98>)
 800cb78:	429c      	cmp	r4, r3
 800cb7a:	d12b      	bne.n	800cbd4 <__swbuf_r+0x70>
 800cb7c:	686c      	ldr	r4, [r5, #4]
 800cb7e:	69a3      	ldr	r3, [r4, #24]
 800cb80:	60a3      	str	r3, [r4, #8]
 800cb82:	89a3      	ldrh	r3, [r4, #12]
 800cb84:	071a      	lsls	r2, r3, #28
 800cb86:	d52f      	bpl.n	800cbe8 <__swbuf_r+0x84>
 800cb88:	6923      	ldr	r3, [r4, #16]
 800cb8a:	b36b      	cbz	r3, 800cbe8 <__swbuf_r+0x84>
 800cb8c:	6923      	ldr	r3, [r4, #16]
 800cb8e:	6820      	ldr	r0, [r4, #0]
 800cb90:	b2f6      	uxtb	r6, r6
 800cb92:	1ac0      	subs	r0, r0, r3
 800cb94:	6963      	ldr	r3, [r4, #20]
 800cb96:	4637      	mov	r7, r6
 800cb98:	4283      	cmp	r3, r0
 800cb9a:	dc04      	bgt.n	800cba6 <__swbuf_r+0x42>
 800cb9c:	4621      	mov	r1, r4
 800cb9e:	4628      	mov	r0, r5
 800cba0:	f000 f92a 	bl	800cdf8 <_fflush_r>
 800cba4:	bb30      	cbnz	r0, 800cbf4 <__swbuf_r+0x90>
 800cba6:	68a3      	ldr	r3, [r4, #8]
 800cba8:	3001      	adds	r0, #1
 800cbaa:	3b01      	subs	r3, #1
 800cbac:	60a3      	str	r3, [r4, #8]
 800cbae:	6823      	ldr	r3, [r4, #0]
 800cbb0:	1c5a      	adds	r2, r3, #1
 800cbb2:	6022      	str	r2, [r4, #0]
 800cbb4:	701e      	strb	r6, [r3, #0]
 800cbb6:	6963      	ldr	r3, [r4, #20]
 800cbb8:	4283      	cmp	r3, r0
 800cbba:	d004      	beq.n	800cbc6 <__swbuf_r+0x62>
 800cbbc:	89a3      	ldrh	r3, [r4, #12]
 800cbbe:	07db      	lsls	r3, r3, #31
 800cbc0:	d506      	bpl.n	800cbd0 <__swbuf_r+0x6c>
 800cbc2:	2e0a      	cmp	r6, #10
 800cbc4:	d104      	bne.n	800cbd0 <__swbuf_r+0x6c>
 800cbc6:	4621      	mov	r1, r4
 800cbc8:	4628      	mov	r0, r5
 800cbca:	f000 f915 	bl	800cdf8 <_fflush_r>
 800cbce:	b988      	cbnz	r0, 800cbf4 <__swbuf_r+0x90>
 800cbd0:	4638      	mov	r0, r7
 800cbd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbd4:	4b0a      	ldr	r3, [pc, #40]	; (800cc00 <__swbuf_r+0x9c>)
 800cbd6:	429c      	cmp	r4, r3
 800cbd8:	d101      	bne.n	800cbde <__swbuf_r+0x7a>
 800cbda:	68ac      	ldr	r4, [r5, #8]
 800cbdc:	e7cf      	b.n	800cb7e <__swbuf_r+0x1a>
 800cbde:	4b09      	ldr	r3, [pc, #36]	; (800cc04 <__swbuf_r+0xa0>)
 800cbe0:	429c      	cmp	r4, r3
 800cbe2:	bf08      	it	eq
 800cbe4:	68ec      	ldreq	r4, [r5, #12]
 800cbe6:	e7ca      	b.n	800cb7e <__swbuf_r+0x1a>
 800cbe8:	4621      	mov	r1, r4
 800cbea:	4628      	mov	r0, r5
 800cbec:	f000 f80c 	bl	800cc08 <__swsetup_r>
 800cbf0:	2800      	cmp	r0, #0
 800cbf2:	d0cb      	beq.n	800cb8c <__swbuf_r+0x28>
 800cbf4:	f04f 37ff 	mov.w	r7, #4294967295
 800cbf8:	e7ea      	b.n	800cbd0 <__swbuf_r+0x6c>
 800cbfa:	bf00      	nop
 800cbfc:	0800e9c4 	.word	0x0800e9c4
 800cc00:	0800e9e4 	.word	0x0800e9e4
 800cc04:	0800e9a4 	.word	0x0800e9a4

0800cc08 <__swsetup_r>:
 800cc08:	4b32      	ldr	r3, [pc, #200]	; (800ccd4 <__swsetup_r+0xcc>)
 800cc0a:	b570      	push	{r4, r5, r6, lr}
 800cc0c:	681d      	ldr	r5, [r3, #0]
 800cc0e:	4606      	mov	r6, r0
 800cc10:	460c      	mov	r4, r1
 800cc12:	b125      	cbz	r5, 800cc1e <__swsetup_r+0x16>
 800cc14:	69ab      	ldr	r3, [r5, #24]
 800cc16:	b913      	cbnz	r3, 800cc1e <__swsetup_r+0x16>
 800cc18:	4628      	mov	r0, r5
 800cc1a:	f000 f981 	bl	800cf20 <__sinit>
 800cc1e:	4b2e      	ldr	r3, [pc, #184]	; (800ccd8 <__swsetup_r+0xd0>)
 800cc20:	429c      	cmp	r4, r3
 800cc22:	d10f      	bne.n	800cc44 <__swsetup_r+0x3c>
 800cc24:	686c      	ldr	r4, [r5, #4]
 800cc26:	89a3      	ldrh	r3, [r4, #12]
 800cc28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc2c:	0719      	lsls	r1, r3, #28
 800cc2e:	d42c      	bmi.n	800cc8a <__swsetup_r+0x82>
 800cc30:	06dd      	lsls	r5, r3, #27
 800cc32:	d411      	bmi.n	800cc58 <__swsetup_r+0x50>
 800cc34:	2309      	movs	r3, #9
 800cc36:	6033      	str	r3, [r6, #0]
 800cc38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cc3c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc40:	81a3      	strh	r3, [r4, #12]
 800cc42:	e03e      	b.n	800ccc2 <__swsetup_r+0xba>
 800cc44:	4b25      	ldr	r3, [pc, #148]	; (800ccdc <__swsetup_r+0xd4>)
 800cc46:	429c      	cmp	r4, r3
 800cc48:	d101      	bne.n	800cc4e <__swsetup_r+0x46>
 800cc4a:	68ac      	ldr	r4, [r5, #8]
 800cc4c:	e7eb      	b.n	800cc26 <__swsetup_r+0x1e>
 800cc4e:	4b24      	ldr	r3, [pc, #144]	; (800cce0 <__swsetup_r+0xd8>)
 800cc50:	429c      	cmp	r4, r3
 800cc52:	bf08      	it	eq
 800cc54:	68ec      	ldreq	r4, [r5, #12]
 800cc56:	e7e6      	b.n	800cc26 <__swsetup_r+0x1e>
 800cc58:	0758      	lsls	r0, r3, #29
 800cc5a:	d512      	bpl.n	800cc82 <__swsetup_r+0x7a>
 800cc5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc5e:	b141      	cbz	r1, 800cc72 <__swsetup_r+0x6a>
 800cc60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc64:	4299      	cmp	r1, r3
 800cc66:	d002      	beq.n	800cc6e <__swsetup_r+0x66>
 800cc68:	4630      	mov	r0, r6
 800cc6a:	f7ff fb2f 	bl	800c2cc <_free_r>
 800cc6e:	2300      	movs	r3, #0
 800cc70:	6363      	str	r3, [r4, #52]	; 0x34
 800cc72:	89a3      	ldrh	r3, [r4, #12]
 800cc74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cc78:	81a3      	strh	r3, [r4, #12]
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	6063      	str	r3, [r4, #4]
 800cc7e:	6923      	ldr	r3, [r4, #16]
 800cc80:	6023      	str	r3, [r4, #0]
 800cc82:	89a3      	ldrh	r3, [r4, #12]
 800cc84:	f043 0308 	orr.w	r3, r3, #8
 800cc88:	81a3      	strh	r3, [r4, #12]
 800cc8a:	6923      	ldr	r3, [r4, #16]
 800cc8c:	b94b      	cbnz	r3, 800cca2 <__swsetup_r+0x9a>
 800cc8e:	89a3      	ldrh	r3, [r4, #12]
 800cc90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cc94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc98:	d003      	beq.n	800cca2 <__swsetup_r+0x9a>
 800cc9a:	4621      	mov	r1, r4
 800cc9c:	4630      	mov	r0, r6
 800cc9e:	f000 fa05 	bl	800d0ac <__smakebuf_r>
 800cca2:	89a0      	ldrh	r0, [r4, #12]
 800cca4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cca8:	f010 0301 	ands.w	r3, r0, #1
 800ccac:	d00a      	beq.n	800ccc4 <__swsetup_r+0xbc>
 800ccae:	2300      	movs	r3, #0
 800ccb0:	60a3      	str	r3, [r4, #8]
 800ccb2:	6963      	ldr	r3, [r4, #20]
 800ccb4:	425b      	negs	r3, r3
 800ccb6:	61a3      	str	r3, [r4, #24]
 800ccb8:	6923      	ldr	r3, [r4, #16]
 800ccba:	b943      	cbnz	r3, 800ccce <__swsetup_r+0xc6>
 800ccbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ccc0:	d1ba      	bne.n	800cc38 <__swsetup_r+0x30>
 800ccc2:	bd70      	pop	{r4, r5, r6, pc}
 800ccc4:	0781      	lsls	r1, r0, #30
 800ccc6:	bf58      	it	pl
 800ccc8:	6963      	ldrpl	r3, [r4, #20]
 800ccca:	60a3      	str	r3, [r4, #8]
 800cccc:	e7f4      	b.n	800ccb8 <__swsetup_r+0xb0>
 800ccce:	2000      	movs	r0, #0
 800ccd0:	e7f7      	b.n	800ccc2 <__swsetup_r+0xba>
 800ccd2:	bf00      	nop
 800ccd4:	20000018 	.word	0x20000018
 800ccd8:	0800e9c4 	.word	0x0800e9c4
 800ccdc:	0800e9e4 	.word	0x0800e9e4
 800cce0:	0800e9a4 	.word	0x0800e9a4

0800cce4 <abort>:
 800cce4:	2006      	movs	r0, #6
 800cce6:	b508      	push	{r3, lr}
 800cce8:	f000 fa50 	bl	800d18c <raise>
 800ccec:	2001      	movs	r0, #1
 800ccee:	f7f6 fc02 	bl	80034f6 <_exit>
	...

0800ccf4 <__sflush_r>:
 800ccf4:	898a      	ldrh	r2, [r1, #12]
 800ccf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccf8:	4605      	mov	r5, r0
 800ccfa:	0710      	lsls	r0, r2, #28
 800ccfc:	460c      	mov	r4, r1
 800ccfe:	d457      	bmi.n	800cdb0 <__sflush_r+0xbc>
 800cd00:	684b      	ldr	r3, [r1, #4]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	dc04      	bgt.n	800cd10 <__sflush_r+0x1c>
 800cd06:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	dc01      	bgt.n	800cd10 <__sflush_r+0x1c>
 800cd0c:	2000      	movs	r0, #0
 800cd0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd12:	2e00      	cmp	r6, #0
 800cd14:	d0fa      	beq.n	800cd0c <__sflush_r+0x18>
 800cd16:	2300      	movs	r3, #0
 800cd18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cd1c:	682f      	ldr	r7, [r5, #0]
 800cd1e:	602b      	str	r3, [r5, #0]
 800cd20:	d032      	beq.n	800cd88 <__sflush_r+0x94>
 800cd22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cd24:	89a3      	ldrh	r3, [r4, #12]
 800cd26:	075a      	lsls	r2, r3, #29
 800cd28:	d505      	bpl.n	800cd36 <__sflush_r+0x42>
 800cd2a:	6863      	ldr	r3, [r4, #4]
 800cd2c:	1ac0      	subs	r0, r0, r3
 800cd2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cd30:	b10b      	cbz	r3, 800cd36 <__sflush_r+0x42>
 800cd32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cd34:	1ac0      	subs	r0, r0, r3
 800cd36:	2300      	movs	r3, #0
 800cd38:	4602      	mov	r2, r0
 800cd3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd3c:	4628      	mov	r0, r5
 800cd3e:	6a21      	ldr	r1, [r4, #32]
 800cd40:	47b0      	blx	r6
 800cd42:	1c43      	adds	r3, r0, #1
 800cd44:	89a3      	ldrh	r3, [r4, #12]
 800cd46:	d106      	bne.n	800cd56 <__sflush_r+0x62>
 800cd48:	6829      	ldr	r1, [r5, #0]
 800cd4a:	291d      	cmp	r1, #29
 800cd4c:	d82c      	bhi.n	800cda8 <__sflush_r+0xb4>
 800cd4e:	4a29      	ldr	r2, [pc, #164]	; (800cdf4 <__sflush_r+0x100>)
 800cd50:	40ca      	lsrs	r2, r1
 800cd52:	07d6      	lsls	r6, r2, #31
 800cd54:	d528      	bpl.n	800cda8 <__sflush_r+0xb4>
 800cd56:	2200      	movs	r2, #0
 800cd58:	6062      	str	r2, [r4, #4]
 800cd5a:	6922      	ldr	r2, [r4, #16]
 800cd5c:	04d9      	lsls	r1, r3, #19
 800cd5e:	6022      	str	r2, [r4, #0]
 800cd60:	d504      	bpl.n	800cd6c <__sflush_r+0x78>
 800cd62:	1c42      	adds	r2, r0, #1
 800cd64:	d101      	bne.n	800cd6a <__sflush_r+0x76>
 800cd66:	682b      	ldr	r3, [r5, #0]
 800cd68:	b903      	cbnz	r3, 800cd6c <__sflush_r+0x78>
 800cd6a:	6560      	str	r0, [r4, #84]	; 0x54
 800cd6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd6e:	602f      	str	r7, [r5, #0]
 800cd70:	2900      	cmp	r1, #0
 800cd72:	d0cb      	beq.n	800cd0c <__sflush_r+0x18>
 800cd74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd78:	4299      	cmp	r1, r3
 800cd7a:	d002      	beq.n	800cd82 <__sflush_r+0x8e>
 800cd7c:	4628      	mov	r0, r5
 800cd7e:	f7ff faa5 	bl	800c2cc <_free_r>
 800cd82:	2000      	movs	r0, #0
 800cd84:	6360      	str	r0, [r4, #52]	; 0x34
 800cd86:	e7c2      	b.n	800cd0e <__sflush_r+0x1a>
 800cd88:	6a21      	ldr	r1, [r4, #32]
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	4628      	mov	r0, r5
 800cd8e:	47b0      	blx	r6
 800cd90:	1c41      	adds	r1, r0, #1
 800cd92:	d1c7      	bne.n	800cd24 <__sflush_r+0x30>
 800cd94:	682b      	ldr	r3, [r5, #0]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d0c4      	beq.n	800cd24 <__sflush_r+0x30>
 800cd9a:	2b1d      	cmp	r3, #29
 800cd9c:	d001      	beq.n	800cda2 <__sflush_r+0xae>
 800cd9e:	2b16      	cmp	r3, #22
 800cda0:	d101      	bne.n	800cda6 <__sflush_r+0xb2>
 800cda2:	602f      	str	r7, [r5, #0]
 800cda4:	e7b2      	b.n	800cd0c <__sflush_r+0x18>
 800cda6:	89a3      	ldrh	r3, [r4, #12]
 800cda8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdac:	81a3      	strh	r3, [r4, #12]
 800cdae:	e7ae      	b.n	800cd0e <__sflush_r+0x1a>
 800cdb0:	690f      	ldr	r7, [r1, #16]
 800cdb2:	2f00      	cmp	r7, #0
 800cdb4:	d0aa      	beq.n	800cd0c <__sflush_r+0x18>
 800cdb6:	0793      	lsls	r3, r2, #30
 800cdb8:	bf18      	it	ne
 800cdba:	2300      	movne	r3, #0
 800cdbc:	680e      	ldr	r6, [r1, #0]
 800cdbe:	bf08      	it	eq
 800cdc0:	694b      	ldreq	r3, [r1, #20]
 800cdc2:	1bf6      	subs	r6, r6, r7
 800cdc4:	600f      	str	r7, [r1, #0]
 800cdc6:	608b      	str	r3, [r1, #8]
 800cdc8:	2e00      	cmp	r6, #0
 800cdca:	dd9f      	ble.n	800cd0c <__sflush_r+0x18>
 800cdcc:	4633      	mov	r3, r6
 800cdce:	463a      	mov	r2, r7
 800cdd0:	4628      	mov	r0, r5
 800cdd2:	6a21      	ldr	r1, [r4, #32]
 800cdd4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800cdd8:	47e0      	blx	ip
 800cdda:	2800      	cmp	r0, #0
 800cddc:	dc06      	bgt.n	800cdec <__sflush_r+0xf8>
 800cdde:	89a3      	ldrh	r3, [r4, #12]
 800cde0:	f04f 30ff 	mov.w	r0, #4294967295
 800cde4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cde8:	81a3      	strh	r3, [r4, #12]
 800cdea:	e790      	b.n	800cd0e <__sflush_r+0x1a>
 800cdec:	4407      	add	r7, r0
 800cdee:	1a36      	subs	r6, r6, r0
 800cdf0:	e7ea      	b.n	800cdc8 <__sflush_r+0xd4>
 800cdf2:	bf00      	nop
 800cdf4:	20400001 	.word	0x20400001

0800cdf8 <_fflush_r>:
 800cdf8:	b538      	push	{r3, r4, r5, lr}
 800cdfa:	690b      	ldr	r3, [r1, #16]
 800cdfc:	4605      	mov	r5, r0
 800cdfe:	460c      	mov	r4, r1
 800ce00:	b913      	cbnz	r3, 800ce08 <_fflush_r+0x10>
 800ce02:	2500      	movs	r5, #0
 800ce04:	4628      	mov	r0, r5
 800ce06:	bd38      	pop	{r3, r4, r5, pc}
 800ce08:	b118      	cbz	r0, 800ce12 <_fflush_r+0x1a>
 800ce0a:	6983      	ldr	r3, [r0, #24]
 800ce0c:	b90b      	cbnz	r3, 800ce12 <_fflush_r+0x1a>
 800ce0e:	f000 f887 	bl	800cf20 <__sinit>
 800ce12:	4b14      	ldr	r3, [pc, #80]	; (800ce64 <_fflush_r+0x6c>)
 800ce14:	429c      	cmp	r4, r3
 800ce16:	d11b      	bne.n	800ce50 <_fflush_r+0x58>
 800ce18:	686c      	ldr	r4, [r5, #4]
 800ce1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d0ef      	beq.n	800ce02 <_fflush_r+0xa>
 800ce22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ce24:	07d0      	lsls	r0, r2, #31
 800ce26:	d404      	bmi.n	800ce32 <_fflush_r+0x3a>
 800ce28:	0599      	lsls	r1, r3, #22
 800ce2a:	d402      	bmi.n	800ce32 <_fflush_r+0x3a>
 800ce2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce2e:	f000 f915 	bl	800d05c <__retarget_lock_acquire_recursive>
 800ce32:	4628      	mov	r0, r5
 800ce34:	4621      	mov	r1, r4
 800ce36:	f7ff ff5d 	bl	800ccf4 <__sflush_r>
 800ce3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ce3c:	4605      	mov	r5, r0
 800ce3e:	07da      	lsls	r2, r3, #31
 800ce40:	d4e0      	bmi.n	800ce04 <_fflush_r+0xc>
 800ce42:	89a3      	ldrh	r3, [r4, #12]
 800ce44:	059b      	lsls	r3, r3, #22
 800ce46:	d4dd      	bmi.n	800ce04 <_fflush_r+0xc>
 800ce48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce4a:	f000 f908 	bl	800d05e <__retarget_lock_release_recursive>
 800ce4e:	e7d9      	b.n	800ce04 <_fflush_r+0xc>
 800ce50:	4b05      	ldr	r3, [pc, #20]	; (800ce68 <_fflush_r+0x70>)
 800ce52:	429c      	cmp	r4, r3
 800ce54:	d101      	bne.n	800ce5a <_fflush_r+0x62>
 800ce56:	68ac      	ldr	r4, [r5, #8]
 800ce58:	e7df      	b.n	800ce1a <_fflush_r+0x22>
 800ce5a:	4b04      	ldr	r3, [pc, #16]	; (800ce6c <_fflush_r+0x74>)
 800ce5c:	429c      	cmp	r4, r3
 800ce5e:	bf08      	it	eq
 800ce60:	68ec      	ldreq	r4, [r5, #12]
 800ce62:	e7da      	b.n	800ce1a <_fflush_r+0x22>
 800ce64:	0800e9c4 	.word	0x0800e9c4
 800ce68:	0800e9e4 	.word	0x0800e9e4
 800ce6c:	0800e9a4 	.word	0x0800e9a4

0800ce70 <std>:
 800ce70:	2300      	movs	r3, #0
 800ce72:	b510      	push	{r4, lr}
 800ce74:	4604      	mov	r4, r0
 800ce76:	e9c0 3300 	strd	r3, r3, [r0]
 800ce7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce7e:	6083      	str	r3, [r0, #8]
 800ce80:	8181      	strh	r1, [r0, #12]
 800ce82:	6643      	str	r3, [r0, #100]	; 0x64
 800ce84:	81c2      	strh	r2, [r0, #14]
 800ce86:	6183      	str	r3, [r0, #24]
 800ce88:	4619      	mov	r1, r3
 800ce8a:	2208      	movs	r2, #8
 800ce8c:	305c      	adds	r0, #92	; 0x5c
 800ce8e:	f7fb fdd9 	bl	8008a44 <memset>
 800ce92:	4b05      	ldr	r3, [pc, #20]	; (800cea8 <std+0x38>)
 800ce94:	6224      	str	r4, [r4, #32]
 800ce96:	6263      	str	r3, [r4, #36]	; 0x24
 800ce98:	4b04      	ldr	r3, [pc, #16]	; (800ceac <std+0x3c>)
 800ce9a:	62a3      	str	r3, [r4, #40]	; 0x28
 800ce9c:	4b04      	ldr	r3, [pc, #16]	; (800ceb0 <std+0x40>)
 800ce9e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cea0:	4b04      	ldr	r3, [pc, #16]	; (800ceb4 <std+0x44>)
 800cea2:	6323      	str	r3, [r4, #48]	; 0x30
 800cea4:	bd10      	pop	{r4, pc}
 800cea6:	bf00      	nop
 800cea8:	0800d1c5 	.word	0x0800d1c5
 800ceac:	0800d1e7 	.word	0x0800d1e7
 800ceb0:	0800d21f 	.word	0x0800d21f
 800ceb4:	0800d243 	.word	0x0800d243

0800ceb8 <_cleanup_r>:
 800ceb8:	4901      	ldr	r1, [pc, #4]	; (800cec0 <_cleanup_r+0x8>)
 800ceba:	f000 b8af 	b.w	800d01c <_fwalk_reent>
 800cebe:	bf00      	nop
 800cec0:	0800cdf9 	.word	0x0800cdf9

0800cec4 <__sfmoreglue>:
 800cec4:	2268      	movs	r2, #104	; 0x68
 800cec6:	b570      	push	{r4, r5, r6, lr}
 800cec8:	1e4d      	subs	r5, r1, #1
 800ceca:	4355      	muls	r5, r2
 800cecc:	460e      	mov	r6, r1
 800cece:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ced2:	f7ff fa63 	bl	800c39c <_malloc_r>
 800ced6:	4604      	mov	r4, r0
 800ced8:	b140      	cbz	r0, 800ceec <__sfmoreglue+0x28>
 800ceda:	2100      	movs	r1, #0
 800cedc:	e9c0 1600 	strd	r1, r6, [r0]
 800cee0:	300c      	adds	r0, #12
 800cee2:	60a0      	str	r0, [r4, #8]
 800cee4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cee8:	f7fb fdac 	bl	8008a44 <memset>
 800ceec:	4620      	mov	r0, r4
 800ceee:	bd70      	pop	{r4, r5, r6, pc}

0800cef0 <__sfp_lock_acquire>:
 800cef0:	4801      	ldr	r0, [pc, #4]	; (800cef8 <__sfp_lock_acquire+0x8>)
 800cef2:	f000 b8b3 	b.w	800d05c <__retarget_lock_acquire_recursive>
 800cef6:	bf00      	nop
 800cef8:	20000551 	.word	0x20000551

0800cefc <__sfp_lock_release>:
 800cefc:	4801      	ldr	r0, [pc, #4]	; (800cf04 <__sfp_lock_release+0x8>)
 800cefe:	f000 b8ae 	b.w	800d05e <__retarget_lock_release_recursive>
 800cf02:	bf00      	nop
 800cf04:	20000551 	.word	0x20000551

0800cf08 <__sinit_lock_acquire>:
 800cf08:	4801      	ldr	r0, [pc, #4]	; (800cf10 <__sinit_lock_acquire+0x8>)
 800cf0a:	f000 b8a7 	b.w	800d05c <__retarget_lock_acquire_recursive>
 800cf0e:	bf00      	nop
 800cf10:	20000552 	.word	0x20000552

0800cf14 <__sinit_lock_release>:
 800cf14:	4801      	ldr	r0, [pc, #4]	; (800cf1c <__sinit_lock_release+0x8>)
 800cf16:	f000 b8a2 	b.w	800d05e <__retarget_lock_release_recursive>
 800cf1a:	bf00      	nop
 800cf1c:	20000552 	.word	0x20000552

0800cf20 <__sinit>:
 800cf20:	b510      	push	{r4, lr}
 800cf22:	4604      	mov	r4, r0
 800cf24:	f7ff fff0 	bl	800cf08 <__sinit_lock_acquire>
 800cf28:	69a3      	ldr	r3, [r4, #24]
 800cf2a:	b11b      	cbz	r3, 800cf34 <__sinit+0x14>
 800cf2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf30:	f7ff bff0 	b.w	800cf14 <__sinit_lock_release>
 800cf34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cf38:	6523      	str	r3, [r4, #80]	; 0x50
 800cf3a:	4b13      	ldr	r3, [pc, #76]	; (800cf88 <__sinit+0x68>)
 800cf3c:	4a13      	ldr	r2, [pc, #76]	; (800cf8c <__sinit+0x6c>)
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	62a2      	str	r2, [r4, #40]	; 0x28
 800cf42:	42a3      	cmp	r3, r4
 800cf44:	bf08      	it	eq
 800cf46:	2301      	moveq	r3, #1
 800cf48:	4620      	mov	r0, r4
 800cf4a:	bf08      	it	eq
 800cf4c:	61a3      	streq	r3, [r4, #24]
 800cf4e:	f000 f81f 	bl	800cf90 <__sfp>
 800cf52:	6060      	str	r0, [r4, #4]
 800cf54:	4620      	mov	r0, r4
 800cf56:	f000 f81b 	bl	800cf90 <__sfp>
 800cf5a:	60a0      	str	r0, [r4, #8]
 800cf5c:	4620      	mov	r0, r4
 800cf5e:	f000 f817 	bl	800cf90 <__sfp>
 800cf62:	2200      	movs	r2, #0
 800cf64:	2104      	movs	r1, #4
 800cf66:	60e0      	str	r0, [r4, #12]
 800cf68:	6860      	ldr	r0, [r4, #4]
 800cf6a:	f7ff ff81 	bl	800ce70 <std>
 800cf6e:	2201      	movs	r2, #1
 800cf70:	2109      	movs	r1, #9
 800cf72:	68a0      	ldr	r0, [r4, #8]
 800cf74:	f7ff ff7c 	bl	800ce70 <std>
 800cf78:	2202      	movs	r2, #2
 800cf7a:	2112      	movs	r1, #18
 800cf7c:	68e0      	ldr	r0, [r4, #12]
 800cf7e:	f7ff ff77 	bl	800ce70 <std>
 800cf82:	2301      	movs	r3, #1
 800cf84:	61a3      	str	r3, [r4, #24]
 800cf86:	e7d1      	b.n	800cf2c <__sinit+0xc>
 800cf88:	0800e55c 	.word	0x0800e55c
 800cf8c:	0800ceb9 	.word	0x0800ceb9

0800cf90 <__sfp>:
 800cf90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf92:	4607      	mov	r7, r0
 800cf94:	f7ff ffac 	bl	800cef0 <__sfp_lock_acquire>
 800cf98:	4b1e      	ldr	r3, [pc, #120]	; (800d014 <__sfp+0x84>)
 800cf9a:	681e      	ldr	r6, [r3, #0]
 800cf9c:	69b3      	ldr	r3, [r6, #24]
 800cf9e:	b913      	cbnz	r3, 800cfa6 <__sfp+0x16>
 800cfa0:	4630      	mov	r0, r6
 800cfa2:	f7ff ffbd 	bl	800cf20 <__sinit>
 800cfa6:	3648      	adds	r6, #72	; 0x48
 800cfa8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cfac:	3b01      	subs	r3, #1
 800cfae:	d503      	bpl.n	800cfb8 <__sfp+0x28>
 800cfb0:	6833      	ldr	r3, [r6, #0]
 800cfb2:	b30b      	cbz	r3, 800cff8 <__sfp+0x68>
 800cfb4:	6836      	ldr	r6, [r6, #0]
 800cfb6:	e7f7      	b.n	800cfa8 <__sfp+0x18>
 800cfb8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cfbc:	b9d5      	cbnz	r5, 800cff4 <__sfp+0x64>
 800cfbe:	4b16      	ldr	r3, [pc, #88]	; (800d018 <__sfp+0x88>)
 800cfc0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cfc4:	60e3      	str	r3, [r4, #12]
 800cfc6:	6665      	str	r5, [r4, #100]	; 0x64
 800cfc8:	f000 f847 	bl	800d05a <__retarget_lock_init_recursive>
 800cfcc:	f7ff ff96 	bl	800cefc <__sfp_lock_release>
 800cfd0:	2208      	movs	r2, #8
 800cfd2:	4629      	mov	r1, r5
 800cfd4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cfd8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cfdc:	6025      	str	r5, [r4, #0]
 800cfde:	61a5      	str	r5, [r4, #24]
 800cfe0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cfe4:	f7fb fd2e 	bl	8008a44 <memset>
 800cfe8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cfec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cff0:	4620      	mov	r0, r4
 800cff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cff4:	3468      	adds	r4, #104	; 0x68
 800cff6:	e7d9      	b.n	800cfac <__sfp+0x1c>
 800cff8:	2104      	movs	r1, #4
 800cffa:	4638      	mov	r0, r7
 800cffc:	f7ff ff62 	bl	800cec4 <__sfmoreglue>
 800d000:	4604      	mov	r4, r0
 800d002:	6030      	str	r0, [r6, #0]
 800d004:	2800      	cmp	r0, #0
 800d006:	d1d5      	bne.n	800cfb4 <__sfp+0x24>
 800d008:	f7ff ff78 	bl	800cefc <__sfp_lock_release>
 800d00c:	230c      	movs	r3, #12
 800d00e:	603b      	str	r3, [r7, #0]
 800d010:	e7ee      	b.n	800cff0 <__sfp+0x60>
 800d012:	bf00      	nop
 800d014:	0800e55c 	.word	0x0800e55c
 800d018:	ffff0001 	.word	0xffff0001

0800d01c <_fwalk_reent>:
 800d01c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d020:	4606      	mov	r6, r0
 800d022:	4688      	mov	r8, r1
 800d024:	2700      	movs	r7, #0
 800d026:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d02a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d02e:	f1b9 0901 	subs.w	r9, r9, #1
 800d032:	d505      	bpl.n	800d040 <_fwalk_reent+0x24>
 800d034:	6824      	ldr	r4, [r4, #0]
 800d036:	2c00      	cmp	r4, #0
 800d038:	d1f7      	bne.n	800d02a <_fwalk_reent+0xe>
 800d03a:	4638      	mov	r0, r7
 800d03c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d040:	89ab      	ldrh	r3, [r5, #12]
 800d042:	2b01      	cmp	r3, #1
 800d044:	d907      	bls.n	800d056 <_fwalk_reent+0x3a>
 800d046:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d04a:	3301      	adds	r3, #1
 800d04c:	d003      	beq.n	800d056 <_fwalk_reent+0x3a>
 800d04e:	4629      	mov	r1, r5
 800d050:	4630      	mov	r0, r6
 800d052:	47c0      	blx	r8
 800d054:	4307      	orrs	r7, r0
 800d056:	3568      	adds	r5, #104	; 0x68
 800d058:	e7e9      	b.n	800d02e <_fwalk_reent+0x12>

0800d05a <__retarget_lock_init_recursive>:
 800d05a:	4770      	bx	lr

0800d05c <__retarget_lock_acquire_recursive>:
 800d05c:	4770      	bx	lr

0800d05e <__retarget_lock_release_recursive>:
 800d05e:	4770      	bx	lr

0800d060 <__swhatbuf_r>:
 800d060:	b570      	push	{r4, r5, r6, lr}
 800d062:	460e      	mov	r6, r1
 800d064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d068:	4614      	mov	r4, r2
 800d06a:	2900      	cmp	r1, #0
 800d06c:	461d      	mov	r5, r3
 800d06e:	b096      	sub	sp, #88	; 0x58
 800d070:	da08      	bge.n	800d084 <__swhatbuf_r+0x24>
 800d072:	2200      	movs	r2, #0
 800d074:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d078:	602a      	str	r2, [r5, #0]
 800d07a:	061a      	lsls	r2, r3, #24
 800d07c:	d410      	bmi.n	800d0a0 <__swhatbuf_r+0x40>
 800d07e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d082:	e00e      	b.n	800d0a2 <__swhatbuf_r+0x42>
 800d084:	466a      	mov	r2, sp
 800d086:	f000 f903 	bl	800d290 <_fstat_r>
 800d08a:	2800      	cmp	r0, #0
 800d08c:	dbf1      	blt.n	800d072 <__swhatbuf_r+0x12>
 800d08e:	9a01      	ldr	r2, [sp, #4]
 800d090:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d094:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d098:	425a      	negs	r2, r3
 800d09a:	415a      	adcs	r2, r3
 800d09c:	602a      	str	r2, [r5, #0]
 800d09e:	e7ee      	b.n	800d07e <__swhatbuf_r+0x1e>
 800d0a0:	2340      	movs	r3, #64	; 0x40
 800d0a2:	2000      	movs	r0, #0
 800d0a4:	6023      	str	r3, [r4, #0]
 800d0a6:	b016      	add	sp, #88	; 0x58
 800d0a8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d0ac <__smakebuf_r>:
 800d0ac:	898b      	ldrh	r3, [r1, #12]
 800d0ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d0b0:	079d      	lsls	r5, r3, #30
 800d0b2:	4606      	mov	r6, r0
 800d0b4:	460c      	mov	r4, r1
 800d0b6:	d507      	bpl.n	800d0c8 <__smakebuf_r+0x1c>
 800d0b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d0bc:	6023      	str	r3, [r4, #0]
 800d0be:	6123      	str	r3, [r4, #16]
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	6163      	str	r3, [r4, #20]
 800d0c4:	b002      	add	sp, #8
 800d0c6:	bd70      	pop	{r4, r5, r6, pc}
 800d0c8:	466a      	mov	r2, sp
 800d0ca:	ab01      	add	r3, sp, #4
 800d0cc:	f7ff ffc8 	bl	800d060 <__swhatbuf_r>
 800d0d0:	9900      	ldr	r1, [sp, #0]
 800d0d2:	4605      	mov	r5, r0
 800d0d4:	4630      	mov	r0, r6
 800d0d6:	f7ff f961 	bl	800c39c <_malloc_r>
 800d0da:	b948      	cbnz	r0, 800d0f0 <__smakebuf_r+0x44>
 800d0dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0e0:	059a      	lsls	r2, r3, #22
 800d0e2:	d4ef      	bmi.n	800d0c4 <__smakebuf_r+0x18>
 800d0e4:	f023 0303 	bic.w	r3, r3, #3
 800d0e8:	f043 0302 	orr.w	r3, r3, #2
 800d0ec:	81a3      	strh	r3, [r4, #12]
 800d0ee:	e7e3      	b.n	800d0b8 <__smakebuf_r+0xc>
 800d0f0:	4b0d      	ldr	r3, [pc, #52]	; (800d128 <__smakebuf_r+0x7c>)
 800d0f2:	62b3      	str	r3, [r6, #40]	; 0x28
 800d0f4:	89a3      	ldrh	r3, [r4, #12]
 800d0f6:	6020      	str	r0, [r4, #0]
 800d0f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0fc:	81a3      	strh	r3, [r4, #12]
 800d0fe:	9b00      	ldr	r3, [sp, #0]
 800d100:	6120      	str	r0, [r4, #16]
 800d102:	6163      	str	r3, [r4, #20]
 800d104:	9b01      	ldr	r3, [sp, #4]
 800d106:	b15b      	cbz	r3, 800d120 <__smakebuf_r+0x74>
 800d108:	4630      	mov	r0, r6
 800d10a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d10e:	f000 f8d1 	bl	800d2b4 <_isatty_r>
 800d112:	b128      	cbz	r0, 800d120 <__smakebuf_r+0x74>
 800d114:	89a3      	ldrh	r3, [r4, #12]
 800d116:	f023 0303 	bic.w	r3, r3, #3
 800d11a:	f043 0301 	orr.w	r3, r3, #1
 800d11e:	81a3      	strh	r3, [r4, #12]
 800d120:	89a0      	ldrh	r0, [r4, #12]
 800d122:	4305      	orrs	r5, r0
 800d124:	81a5      	strh	r5, [r4, #12]
 800d126:	e7cd      	b.n	800d0c4 <__smakebuf_r+0x18>
 800d128:	0800ceb9 	.word	0x0800ceb9

0800d12c <_malloc_usable_size_r>:
 800d12c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d130:	1f18      	subs	r0, r3, #4
 800d132:	2b00      	cmp	r3, #0
 800d134:	bfbc      	itt	lt
 800d136:	580b      	ldrlt	r3, [r1, r0]
 800d138:	18c0      	addlt	r0, r0, r3
 800d13a:	4770      	bx	lr

0800d13c <_raise_r>:
 800d13c:	291f      	cmp	r1, #31
 800d13e:	b538      	push	{r3, r4, r5, lr}
 800d140:	4604      	mov	r4, r0
 800d142:	460d      	mov	r5, r1
 800d144:	d904      	bls.n	800d150 <_raise_r+0x14>
 800d146:	2316      	movs	r3, #22
 800d148:	6003      	str	r3, [r0, #0]
 800d14a:	f04f 30ff 	mov.w	r0, #4294967295
 800d14e:	bd38      	pop	{r3, r4, r5, pc}
 800d150:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d152:	b112      	cbz	r2, 800d15a <_raise_r+0x1e>
 800d154:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d158:	b94b      	cbnz	r3, 800d16e <_raise_r+0x32>
 800d15a:	4620      	mov	r0, r4
 800d15c:	f000 f830 	bl	800d1c0 <_getpid_r>
 800d160:	462a      	mov	r2, r5
 800d162:	4601      	mov	r1, r0
 800d164:	4620      	mov	r0, r4
 800d166:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d16a:	f000 b817 	b.w	800d19c <_kill_r>
 800d16e:	2b01      	cmp	r3, #1
 800d170:	d00a      	beq.n	800d188 <_raise_r+0x4c>
 800d172:	1c59      	adds	r1, r3, #1
 800d174:	d103      	bne.n	800d17e <_raise_r+0x42>
 800d176:	2316      	movs	r3, #22
 800d178:	6003      	str	r3, [r0, #0]
 800d17a:	2001      	movs	r0, #1
 800d17c:	e7e7      	b.n	800d14e <_raise_r+0x12>
 800d17e:	2400      	movs	r4, #0
 800d180:	4628      	mov	r0, r5
 800d182:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d186:	4798      	blx	r3
 800d188:	2000      	movs	r0, #0
 800d18a:	e7e0      	b.n	800d14e <_raise_r+0x12>

0800d18c <raise>:
 800d18c:	4b02      	ldr	r3, [pc, #8]	; (800d198 <raise+0xc>)
 800d18e:	4601      	mov	r1, r0
 800d190:	6818      	ldr	r0, [r3, #0]
 800d192:	f7ff bfd3 	b.w	800d13c <_raise_r>
 800d196:	bf00      	nop
 800d198:	20000018 	.word	0x20000018

0800d19c <_kill_r>:
 800d19c:	b538      	push	{r3, r4, r5, lr}
 800d19e:	2300      	movs	r3, #0
 800d1a0:	4d06      	ldr	r5, [pc, #24]	; (800d1bc <_kill_r+0x20>)
 800d1a2:	4604      	mov	r4, r0
 800d1a4:	4608      	mov	r0, r1
 800d1a6:	4611      	mov	r1, r2
 800d1a8:	602b      	str	r3, [r5, #0]
 800d1aa:	f7f6 f994 	bl	80034d6 <_kill>
 800d1ae:	1c43      	adds	r3, r0, #1
 800d1b0:	d102      	bne.n	800d1b8 <_kill_r+0x1c>
 800d1b2:	682b      	ldr	r3, [r5, #0]
 800d1b4:	b103      	cbz	r3, 800d1b8 <_kill_r+0x1c>
 800d1b6:	6023      	str	r3, [r4, #0]
 800d1b8:	bd38      	pop	{r3, r4, r5, pc}
 800d1ba:	bf00      	nop
 800d1bc:	2000054c 	.word	0x2000054c

0800d1c0 <_getpid_r>:
 800d1c0:	f7f6 b982 	b.w	80034c8 <_getpid>

0800d1c4 <__sread>:
 800d1c4:	b510      	push	{r4, lr}
 800d1c6:	460c      	mov	r4, r1
 800d1c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1cc:	f000 f894 	bl	800d2f8 <_read_r>
 800d1d0:	2800      	cmp	r0, #0
 800d1d2:	bfab      	itete	ge
 800d1d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d1d6:	89a3      	ldrhlt	r3, [r4, #12]
 800d1d8:	181b      	addge	r3, r3, r0
 800d1da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d1de:	bfac      	ite	ge
 800d1e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800d1e2:	81a3      	strhlt	r3, [r4, #12]
 800d1e4:	bd10      	pop	{r4, pc}

0800d1e6 <__swrite>:
 800d1e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1ea:	461f      	mov	r7, r3
 800d1ec:	898b      	ldrh	r3, [r1, #12]
 800d1ee:	4605      	mov	r5, r0
 800d1f0:	05db      	lsls	r3, r3, #23
 800d1f2:	460c      	mov	r4, r1
 800d1f4:	4616      	mov	r6, r2
 800d1f6:	d505      	bpl.n	800d204 <__swrite+0x1e>
 800d1f8:	2302      	movs	r3, #2
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d200:	f000 f868 	bl	800d2d4 <_lseek_r>
 800d204:	89a3      	ldrh	r3, [r4, #12]
 800d206:	4632      	mov	r2, r6
 800d208:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d20c:	81a3      	strh	r3, [r4, #12]
 800d20e:	4628      	mov	r0, r5
 800d210:	463b      	mov	r3, r7
 800d212:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d21a:	f000 b817 	b.w	800d24c <_write_r>

0800d21e <__sseek>:
 800d21e:	b510      	push	{r4, lr}
 800d220:	460c      	mov	r4, r1
 800d222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d226:	f000 f855 	bl	800d2d4 <_lseek_r>
 800d22a:	1c43      	adds	r3, r0, #1
 800d22c:	89a3      	ldrh	r3, [r4, #12]
 800d22e:	bf15      	itete	ne
 800d230:	6560      	strne	r0, [r4, #84]	; 0x54
 800d232:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d236:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d23a:	81a3      	strheq	r3, [r4, #12]
 800d23c:	bf18      	it	ne
 800d23e:	81a3      	strhne	r3, [r4, #12]
 800d240:	bd10      	pop	{r4, pc}

0800d242 <__sclose>:
 800d242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d246:	f000 b813 	b.w	800d270 <_close_r>
	...

0800d24c <_write_r>:
 800d24c:	b538      	push	{r3, r4, r5, lr}
 800d24e:	4604      	mov	r4, r0
 800d250:	4608      	mov	r0, r1
 800d252:	4611      	mov	r1, r2
 800d254:	2200      	movs	r2, #0
 800d256:	4d05      	ldr	r5, [pc, #20]	; (800d26c <_write_r+0x20>)
 800d258:	602a      	str	r2, [r5, #0]
 800d25a:	461a      	mov	r2, r3
 800d25c:	f7f6 f972 	bl	8003544 <_write>
 800d260:	1c43      	adds	r3, r0, #1
 800d262:	d102      	bne.n	800d26a <_write_r+0x1e>
 800d264:	682b      	ldr	r3, [r5, #0]
 800d266:	b103      	cbz	r3, 800d26a <_write_r+0x1e>
 800d268:	6023      	str	r3, [r4, #0]
 800d26a:	bd38      	pop	{r3, r4, r5, pc}
 800d26c:	2000054c 	.word	0x2000054c

0800d270 <_close_r>:
 800d270:	b538      	push	{r3, r4, r5, lr}
 800d272:	2300      	movs	r3, #0
 800d274:	4d05      	ldr	r5, [pc, #20]	; (800d28c <_close_r+0x1c>)
 800d276:	4604      	mov	r4, r0
 800d278:	4608      	mov	r0, r1
 800d27a:	602b      	str	r3, [r5, #0]
 800d27c:	f7f6 f97e 	bl	800357c <_close>
 800d280:	1c43      	adds	r3, r0, #1
 800d282:	d102      	bne.n	800d28a <_close_r+0x1a>
 800d284:	682b      	ldr	r3, [r5, #0]
 800d286:	b103      	cbz	r3, 800d28a <_close_r+0x1a>
 800d288:	6023      	str	r3, [r4, #0]
 800d28a:	bd38      	pop	{r3, r4, r5, pc}
 800d28c:	2000054c 	.word	0x2000054c

0800d290 <_fstat_r>:
 800d290:	b538      	push	{r3, r4, r5, lr}
 800d292:	2300      	movs	r3, #0
 800d294:	4d06      	ldr	r5, [pc, #24]	; (800d2b0 <_fstat_r+0x20>)
 800d296:	4604      	mov	r4, r0
 800d298:	4608      	mov	r0, r1
 800d29a:	4611      	mov	r1, r2
 800d29c:	602b      	str	r3, [r5, #0]
 800d29e:	f7f6 f978 	bl	8003592 <_fstat>
 800d2a2:	1c43      	adds	r3, r0, #1
 800d2a4:	d102      	bne.n	800d2ac <_fstat_r+0x1c>
 800d2a6:	682b      	ldr	r3, [r5, #0]
 800d2a8:	b103      	cbz	r3, 800d2ac <_fstat_r+0x1c>
 800d2aa:	6023      	str	r3, [r4, #0]
 800d2ac:	bd38      	pop	{r3, r4, r5, pc}
 800d2ae:	bf00      	nop
 800d2b0:	2000054c 	.word	0x2000054c

0800d2b4 <_isatty_r>:
 800d2b4:	b538      	push	{r3, r4, r5, lr}
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	4d05      	ldr	r5, [pc, #20]	; (800d2d0 <_isatty_r+0x1c>)
 800d2ba:	4604      	mov	r4, r0
 800d2bc:	4608      	mov	r0, r1
 800d2be:	602b      	str	r3, [r5, #0]
 800d2c0:	f7f6 f976 	bl	80035b0 <_isatty>
 800d2c4:	1c43      	adds	r3, r0, #1
 800d2c6:	d102      	bne.n	800d2ce <_isatty_r+0x1a>
 800d2c8:	682b      	ldr	r3, [r5, #0]
 800d2ca:	b103      	cbz	r3, 800d2ce <_isatty_r+0x1a>
 800d2cc:	6023      	str	r3, [r4, #0]
 800d2ce:	bd38      	pop	{r3, r4, r5, pc}
 800d2d0:	2000054c 	.word	0x2000054c

0800d2d4 <_lseek_r>:
 800d2d4:	b538      	push	{r3, r4, r5, lr}
 800d2d6:	4604      	mov	r4, r0
 800d2d8:	4608      	mov	r0, r1
 800d2da:	4611      	mov	r1, r2
 800d2dc:	2200      	movs	r2, #0
 800d2de:	4d05      	ldr	r5, [pc, #20]	; (800d2f4 <_lseek_r+0x20>)
 800d2e0:	602a      	str	r2, [r5, #0]
 800d2e2:	461a      	mov	r2, r3
 800d2e4:	f7f6 f96e 	bl	80035c4 <_lseek>
 800d2e8:	1c43      	adds	r3, r0, #1
 800d2ea:	d102      	bne.n	800d2f2 <_lseek_r+0x1e>
 800d2ec:	682b      	ldr	r3, [r5, #0]
 800d2ee:	b103      	cbz	r3, 800d2f2 <_lseek_r+0x1e>
 800d2f0:	6023      	str	r3, [r4, #0]
 800d2f2:	bd38      	pop	{r3, r4, r5, pc}
 800d2f4:	2000054c 	.word	0x2000054c

0800d2f8 <_read_r>:
 800d2f8:	b538      	push	{r3, r4, r5, lr}
 800d2fa:	4604      	mov	r4, r0
 800d2fc:	4608      	mov	r0, r1
 800d2fe:	4611      	mov	r1, r2
 800d300:	2200      	movs	r2, #0
 800d302:	4d05      	ldr	r5, [pc, #20]	; (800d318 <_read_r+0x20>)
 800d304:	602a      	str	r2, [r5, #0]
 800d306:	461a      	mov	r2, r3
 800d308:	f7f6 f8ff 	bl	800350a <_read>
 800d30c:	1c43      	adds	r3, r0, #1
 800d30e:	d102      	bne.n	800d316 <_read_r+0x1e>
 800d310:	682b      	ldr	r3, [r5, #0]
 800d312:	b103      	cbz	r3, 800d316 <_read_r+0x1e>
 800d314:	6023      	str	r3, [r4, #0]
 800d316:	bd38      	pop	{r3, r4, r5, pc}
 800d318:	2000054c 	.word	0x2000054c
 800d31c:	00000000 	.word	0x00000000

0800d320 <atan>:
 800d320:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d324:	4bb6      	ldr	r3, [pc, #728]	; (800d600 <atan+0x2e0>)
 800d326:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d32a:	429e      	cmp	r6, r3
 800d32c:	4604      	mov	r4, r0
 800d32e:	460d      	mov	r5, r1
 800d330:	468b      	mov	fp, r1
 800d332:	dd17      	ble.n	800d364 <atan+0x44>
 800d334:	4bb3      	ldr	r3, [pc, #716]	; (800d604 <atan+0x2e4>)
 800d336:	429e      	cmp	r6, r3
 800d338:	dc01      	bgt.n	800d33e <atan+0x1e>
 800d33a:	d109      	bne.n	800d350 <atan+0x30>
 800d33c:	b140      	cbz	r0, 800d350 <atan+0x30>
 800d33e:	4622      	mov	r2, r4
 800d340:	462b      	mov	r3, r5
 800d342:	4620      	mov	r0, r4
 800d344:	4629      	mov	r1, r5
 800d346:	f7f2 ff11 	bl	800016c <__adddf3>
 800d34a:	4604      	mov	r4, r0
 800d34c:	460d      	mov	r5, r1
 800d34e:	e005      	b.n	800d35c <atan+0x3c>
 800d350:	f1bb 0f00 	cmp.w	fp, #0
 800d354:	4cac      	ldr	r4, [pc, #688]	; (800d608 <atan+0x2e8>)
 800d356:	f300 8121 	bgt.w	800d59c <atan+0x27c>
 800d35a:	4dac      	ldr	r5, [pc, #688]	; (800d60c <atan+0x2ec>)
 800d35c:	4620      	mov	r0, r4
 800d35e:	4629      	mov	r1, r5
 800d360:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d364:	4baa      	ldr	r3, [pc, #680]	; (800d610 <atan+0x2f0>)
 800d366:	429e      	cmp	r6, r3
 800d368:	dc11      	bgt.n	800d38e <atan+0x6e>
 800d36a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800d36e:	429e      	cmp	r6, r3
 800d370:	dc0a      	bgt.n	800d388 <atan+0x68>
 800d372:	a38b      	add	r3, pc, #556	; (adr r3, 800d5a0 <atan+0x280>)
 800d374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d378:	f7f2 fef8 	bl	800016c <__adddf3>
 800d37c:	2200      	movs	r2, #0
 800d37e:	4ba5      	ldr	r3, [pc, #660]	; (800d614 <atan+0x2f4>)
 800d380:	f7f3 fb3a 	bl	80009f8 <__aeabi_dcmpgt>
 800d384:	2800      	cmp	r0, #0
 800d386:	d1e9      	bne.n	800d35c <atan+0x3c>
 800d388:	f04f 3aff 	mov.w	sl, #4294967295
 800d38c:	e027      	b.n	800d3de <atan+0xbe>
 800d38e:	f000 f951 	bl	800d634 <fabs>
 800d392:	4ba1      	ldr	r3, [pc, #644]	; (800d618 <atan+0x2f8>)
 800d394:	4604      	mov	r4, r0
 800d396:	429e      	cmp	r6, r3
 800d398:	460d      	mov	r5, r1
 800d39a:	f300 80b8 	bgt.w	800d50e <atan+0x1ee>
 800d39e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800d3a2:	429e      	cmp	r6, r3
 800d3a4:	f300 809c 	bgt.w	800d4e0 <atan+0x1c0>
 800d3a8:	4602      	mov	r2, r0
 800d3aa:	460b      	mov	r3, r1
 800d3ac:	f7f2 fede 	bl	800016c <__adddf3>
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	4b98      	ldr	r3, [pc, #608]	; (800d614 <atan+0x2f4>)
 800d3b4:	f7f2 fed8 	bl	8000168 <__aeabi_dsub>
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	4606      	mov	r6, r0
 800d3bc:	460f      	mov	r7, r1
 800d3be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d3c2:	4620      	mov	r0, r4
 800d3c4:	4629      	mov	r1, r5
 800d3c6:	f7f2 fed1 	bl	800016c <__adddf3>
 800d3ca:	4602      	mov	r2, r0
 800d3cc:	460b      	mov	r3, r1
 800d3ce:	4630      	mov	r0, r6
 800d3d0:	4639      	mov	r1, r7
 800d3d2:	f7f3 f9ab 	bl	800072c <__aeabi_ddiv>
 800d3d6:	f04f 0a00 	mov.w	sl, #0
 800d3da:	4604      	mov	r4, r0
 800d3dc:	460d      	mov	r5, r1
 800d3de:	4622      	mov	r2, r4
 800d3e0:	462b      	mov	r3, r5
 800d3e2:	4620      	mov	r0, r4
 800d3e4:	4629      	mov	r1, r5
 800d3e6:	f7f3 f877 	bl	80004d8 <__aeabi_dmul>
 800d3ea:	4602      	mov	r2, r0
 800d3ec:	460b      	mov	r3, r1
 800d3ee:	4680      	mov	r8, r0
 800d3f0:	4689      	mov	r9, r1
 800d3f2:	f7f3 f871 	bl	80004d8 <__aeabi_dmul>
 800d3f6:	a36c      	add	r3, pc, #432	; (adr r3, 800d5a8 <atan+0x288>)
 800d3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3fc:	4606      	mov	r6, r0
 800d3fe:	460f      	mov	r7, r1
 800d400:	f7f3 f86a 	bl	80004d8 <__aeabi_dmul>
 800d404:	a36a      	add	r3, pc, #424	; (adr r3, 800d5b0 <atan+0x290>)
 800d406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d40a:	f7f2 feaf 	bl	800016c <__adddf3>
 800d40e:	4632      	mov	r2, r6
 800d410:	463b      	mov	r3, r7
 800d412:	f7f3 f861 	bl	80004d8 <__aeabi_dmul>
 800d416:	a368      	add	r3, pc, #416	; (adr r3, 800d5b8 <atan+0x298>)
 800d418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d41c:	f7f2 fea6 	bl	800016c <__adddf3>
 800d420:	4632      	mov	r2, r6
 800d422:	463b      	mov	r3, r7
 800d424:	f7f3 f858 	bl	80004d8 <__aeabi_dmul>
 800d428:	a365      	add	r3, pc, #404	; (adr r3, 800d5c0 <atan+0x2a0>)
 800d42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d42e:	f7f2 fe9d 	bl	800016c <__adddf3>
 800d432:	4632      	mov	r2, r6
 800d434:	463b      	mov	r3, r7
 800d436:	f7f3 f84f 	bl	80004d8 <__aeabi_dmul>
 800d43a:	a363      	add	r3, pc, #396	; (adr r3, 800d5c8 <atan+0x2a8>)
 800d43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d440:	f7f2 fe94 	bl	800016c <__adddf3>
 800d444:	4632      	mov	r2, r6
 800d446:	463b      	mov	r3, r7
 800d448:	f7f3 f846 	bl	80004d8 <__aeabi_dmul>
 800d44c:	a360      	add	r3, pc, #384	; (adr r3, 800d5d0 <atan+0x2b0>)
 800d44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d452:	f7f2 fe8b 	bl	800016c <__adddf3>
 800d456:	4642      	mov	r2, r8
 800d458:	464b      	mov	r3, r9
 800d45a:	f7f3 f83d 	bl	80004d8 <__aeabi_dmul>
 800d45e:	a35e      	add	r3, pc, #376	; (adr r3, 800d5d8 <atan+0x2b8>)
 800d460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d464:	4680      	mov	r8, r0
 800d466:	4689      	mov	r9, r1
 800d468:	4630      	mov	r0, r6
 800d46a:	4639      	mov	r1, r7
 800d46c:	f7f3 f834 	bl	80004d8 <__aeabi_dmul>
 800d470:	a35b      	add	r3, pc, #364	; (adr r3, 800d5e0 <atan+0x2c0>)
 800d472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d476:	f7f2 fe77 	bl	8000168 <__aeabi_dsub>
 800d47a:	4632      	mov	r2, r6
 800d47c:	463b      	mov	r3, r7
 800d47e:	f7f3 f82b 	bl	80004d8 <__aeabi_dmul>
 800d482:	a359      	add	r3, pc, #356	; (adr r3, 800d5e8 <atan+0x2c8>)
 800d484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d488:	f7f2 fe6e 	bl	8000168 <__aeabi_dsub>
 800d48c:	4632      	mov	r2, r6
 800d48e:	463b      	mov	r3, r7
 800d490:	f7f3 f822 	bl	80004d8 <__aeabi_dmul>
 800d494:	a356      	add	r3, pc, #344	; (adr r3, 800d5f0 <atan+0x2d0>)
 800d496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d49a:	f7f2 fe65 	bl	8000168 <__aeabi_dsub>
 800d49e:	4632      	mov	r2, r6
 800d4a0:	463b      	mov	r3, r7
 800d4a2:	f7f3 f819 	bl	80004d8 <__aeabi_dmul>
 800d4a6:	a354      	add	r3, pc, #336	; (adr r3, 800d5f8 <atan+0x2d8>)
 800d4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ac:	f7f2 fe5c 	bl	8000168 <__aeabi_dsub>
 800d4b0:	4632      	mov	r2, r6
 800d4b2:	463b      	mov	r3, r7
 800d4b4:	f7f3 f810 	bl	80004d8 <__aeabi_dmul>
 800d4b8:	4602      	mov	r2, r0
 800d4ba:	460b      	mov	r3, r1
 800d4bc:	4640      	mov	r0, r8
 800d4be:	4649      	mov	r1, r9
 800d4c0:	f7f2 fe54 	bl	800016c <__adddf3>
 800d4c4:	4622      	mov	r2, r4
 800d4c6:	462b      	mov	r3, r5
 800d4c8:	f7f3 f806 	bl	80004d8 <__aeabi_dmul>
 800d4cc:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d4d0:	4602      	mov	r2, r0
 800d4d2:	460b      	mov	r3, r1
 800d4d4:	d144      	bne.n	800d560 <atan+0x240>
 800d4d6:	4620      	mov	r0, r4
 800d4d8:	4629      	mov	r1, r5
 800d4da:	f7f2 fe45 	bl	8000168 <__aeabi_dsub>
 800d4de:	e734      	b.n	800d34a <atan+0x2a>
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	4b4c      	ldr	r3, [pc, #304]	; (800d614 <atan+0x2f4>)
 800d4e4:	f7f2 fe40 	bl	8000168 <__aeabi_dsub>
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	4606      	mov	r6, r0
 800d4ec:	460f      	mov	r7, r1
 800d4ee:	4620      	mov	r0, r4
 800d4f0:	4629      	mov	r1, r5
 800d4f2:	4b48      	ldr	r3, [pc, #288]	; (800d614 <atan+0x2f4>)
 800d4f4:	f7f2 fe3a 	bl	800016c <__adddf3>
 800d4f8:	4602      	mov	r2, r0
 800d4fa:	460b      	mov	r3, r1
 800d4fc:	4630      	mov	r0, r6
 800d4fe:	4639      	mov	r1, r7
 800d500:	f7f3 f914 	bl	800072c <__aeabi_ddiv>
 800d504:	f04f 0a01 	mov.w	sl, #1
 800d508:	4604      	mov	r4, r0
 800d50a:	460d      	mov	r5, r1
 800d50c:	e767      	b.n	800d3de <atan+0xbe>
 800d50e:	4b43      	ldr	r3, [pc, #268]	; (800d61c <atan+0x2fc>)
 800d510:	429e      	cmp	r6, r3
 800d512:	da1a      	bge.n	800d54a <atan+0x22a>
 800d514:	2200      	movs	r2, #0
 800d516:	4b42      	ldr	r3, [pc, #264]	; (800d620 <atan+0x300>)
 800d518:	f7f2 fe26 	bl	8000168 <__aeabi_dsub>
 800d51c:	2200      	movs	r2, #0
 800d51e:	4606      	mov	r6, r0
 800d520:	460f      	mov	r7, r1
 800d522:	4620      	mov	r0, r4
 800d524:	4629      	mov	r1, r5
 800d526:	4b3e      	ldr	r3, [pc, #248]	; (800d620 <atan+0x300>)
 800d528:	f7f2 ffd6 	bl	80004d8 <__aeabi_dmul>
 800d52c:	2200      	movs	r2, #0
 800d52e:	4b39      	ldr	r3, [pc, #228]	; (800d614 <atan+0x2f4>)
 800d530:	f7f2 fe1c 	bl	800016c <__adddf3>
 800d534:	4602      	mov	r2, r0
 800d536:	460b      	mov	r3, r1
 800d538:	4630      	mov	r0, r6
 800d53a:	4639      	mov	r1, r7
 800d53c:	f7f3 f8f6 	bl	800072c <__aeabi_ddiv>
 800d540:	f04f 0a02 	mov.w	sl, #2
 800d544:	4604      	mov	r4, r0
 800d546:	460d      	mov	r5, r1
 800d548:	e749      	b.n	800d3de <atan+0xbe>
 800d54a:	4602      	mov	r2, r0
 800d54c:	460b      	mov	r3, r1
 800d54e:	2000      	movs	r0, #0
 800d550:	4934      	ldr	r1, [pc, #208]	; (800d624 <atan+0x304>)
 800d552:	f7f3 f8eb 	bl	800072c <__aeabi_ddiv>
 800d556:	f04f 0a03 	mov.w	sl, #3
 800d55a:	4604      	mov	r4, r0
 800d55c:	460d      	mov	r5, r1
 800d55e:	e73e      	b.n	800d3de <atan+0xbe>
 800d560:	4b31      	ldr	r3, [pc, #196]	; (800d628 <atan+0x308>)
 800d562:	4e32      	ldr	r6, [pc, #200]	; (800d62c <atan+0x30c>)
 800d564:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d568:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800d56c:	e9da 2300 	ldrd	r2, r3, [sl]
 800d570:	f7f2 fdfa 	bl	8000168 <__aeabi_dsub>
 800d574:	4622      	mov	r2, r4
 800d576:	462b      	mov	r3, r5
 800d578:	f7f2 fdf6 	bl	8000168 <__aeabi_dsub>
 800d57c:	4602      	mov	r2, r0
 800d57e:	460b      	mov	r3, r1
 800d580:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d584:	f7f2 fdf0 	bl	8000168 <__aeabi_dsub>
 800d588:	f1bb 0f00 	cmp.w	fp, #0
 800d58c:	4604      	mov	r4, r0
 800d58e:	460d      	mov	r5, r1
 800d590:	f6bf aee4 	bge.w	800d35c <atan+0x3c>
 800d594:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d598:	461d      	mov	r5, r3
 800d59a:	e6df      	b.n	800d35c <atan+0x3c>
 800d59c:	4d24      	ldr	r5, [pc, #144]	; (800d630 <atan+0x310>)
 800d59e:	e6dd      	b.n	800d35c <atan+0x3c>
 800d5a0:	8800759c 	.word	0x8800759c
 800d5a4:	7e37e43c 	.word	0x7e37e43c
 800d5a8:	e322da11 	.word	0xe322da11
 800d5ac:	3f90ad3a 	.word	0x3f90ad3a
 800d5b0:	24760deb 	.word	0x24760deb
 800d5b4:	3fa97b4b 	.word	0x3fa97b4b
 800d5b8:	a0d03d51 	.word	0xa0d03d51
 800d5bc:	3fb10d66 	.word	0x3fb10d66
 800d5c0:	c54c206e 	.word	0xc54c206e
 800d5c4:	3fb745cd 	.word	0x3fb745cd
 800d5c8:	920083ff 	.word	0x920083ff
 800d5cc:	3fc24924 	.word	0x3fc24924
 800d5d0:	5555550d 	.word	0x5555550d
 800d5d4:	3fd55555 	.word	0x3fd55555
 800d5d8:	2c6a6c2f 	.word	0x2c6a6c2f
 800d5dc:	bfa2b444 	.word	0xbfa2b444
 800d5e0:	52defd9a 	.word	0x52defd9a
 800d5e4:	3fadde2d 	.word	0x3fadde2d
 800d5e8:	af749a6d 	.word	0xaf749a6d
 800d5ec:	3fb3b0f2 	.word	0x3fb3b0f2
 800d5f0:	fe231671 	.word	0xfe231671
 800d5f4:	3fbc71c6 	.word	0x3fbc71c6
 800d5f8:	9998ebc4 	.word	0x9998ebc4
 800d5fc:	3fc99999 	.word	0x3fc99999
 800d600:	440fffff 	.word	0x440fffff
 800d604:	7ff00000 	.word	0x7ff00000
 800d608:	54442d18 	.word	0x54442d18
 800d60c:	bff921fb 	.word	0xbff921fb
 800d610:	3fdbffff 	.word	0x3fdbffff
 800d614:	3ff00000 	.word	0x3ff00000
 800d618:	3ff2ffff 	.word	0x3ff2ffff
 800d61c:	40038000 	.word	0x40038000
 800d620:	3ff80000 	.word	0x3ff80000
 800d624:	bff00000 	.word	0xbff00000
 800d628:	0800ea28 	.word	0x0800ea28
 800d62c:	0800ea08 	.word	0x0800ea08
 800d630:	3ff921fb 	.word	0x3ff921fb

0800d634 <fabs>:
 800d634:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d638:	4770      	bx	lr
	...

0800d63c <round>:
 800d63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d63e:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d642:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 800d646:	2c13      	cmp	r4, #19
 800d648:	4602      	mov	r2, r0
 800d64a:	460b      	mov	r3, r1
 800d64c:	4606      	mov	r6, r0
 800d64e:	460d      	mov	r5, r1
 800d650:	dc19      	bgt.n	800d686 <round+0x4a>
 800d652:	2c00      	cmp	r4, #0
 800d654:	da09      	bge.n	800d66a <round+0x2e>
 800d656:	3401      	adds	r4, #1
 800d658:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800d65c:	d103      	bne.n	800d666 <round+0x2a>
 800d65e:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d662:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d666:	2200      	movs	r2, #0
 800d668:	e02a      	b.n	800d6c0 <round+0x84>
 800d66a:	4917      	ldr	r1, [pc, #92]	; (800d6c8 <round+0x8c>)
 800d66c:	4121      	asrs	r1, r4
 800d66e:	ea03 0001 	and.w	r0, r3, r1
 800d672:	4302      	orrs	r2, r0
 800d674:	d010      	beq.n	800d698 <round+0x5c>
 800d676:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d67a:	fa42 f404 	asr.w	r4, r2, r4
 800d67e:	4423      	add	r3, r4
 800d680:	ea23 0301 	bic.w	r3, r3, r1
 800d684:	e7ef      	b.n	800d666 <round+0x2a>
 800d686:	2c33      	cmp	r4, #51	; 0x33
 800d688:	dd09      	ble.n	800d69e <round+0x62>
 800d68a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800d68e:	d103      	bne.n	800d698 <round+0x5c>
 800d690:	f7f2 fd6c 	bl	800016c <__adddf3>
 800d694:	4606      	mov	r6, r0
 800d696:	460d      	mov	r5, r1
 800d698:	4630      	mov	r0, r6
 800d69a:	4629      	mov	r1, r5
 800d69c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d69e:	f04f 31ff 	mov.w	r1, #4294967295
 800d6a2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800d6a6:	40f9      	lsrs	r1, r7
 800d6a8:	4208      	tst	r0, r1
 800d6aa:	d0f5      	beq.n	800d698 <round+0x5c>
 800d6ac:	2001      	movs	r0, #1
 800d6ae:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800d6b2:	fa00 f404 	lsl.w	r4, r0, r4
 800d6b6:	1912      	adds	r2, r2, r4
 800d6b8:	bf28      	it	cs
 800d6ba:	181b      	addcs	r3, r3, r0
 800d6bc:	ea22 0201 	bic.w	r2, r2, r1
 800d6c0:	4619      	mov	r1, r3
 800d6c2:	4610      	mov	r0, r2
 800d6c4:	e7e6      	b.n	800d694 <round+0x58>
 800d6c6:	bf00      	nop
 800d6c8:	000fffff 	.word	0x000fffff

0800d6cc <pow>:
 800d6cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6d0:	4614      	mov	r4, r2
 800d6d2:	461d      	mov	r5, r3
 800d6d4:	4680      	mov	r8, r0
 800d6d6:	4689      	mov	r9, r1
 800d6d8:	f000 f886 	bl	800d7e8 <__ieee754_pow>
 800d6dc:	4622      	mov	r2, r4
 800d6de:	4606      	mov	r6, r0
 800d6e0:	460f      	mov	r7, r1
 800d6e2:	462b      	mov	r3, r5
 800d6e4:	4620      	mov	r0, r4
 800d6e6:	4629      	mov	r1, r5
 800d6e8:	f7f3 f990 	bl	8000a0c <__aeabi_dcmpun>
 800d6ec:	bbc8      	cbnz	r0, 800d762 <pow+0x96>
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	4640      	mov	r0, r8
 800d6f4:	4649      	mov	r1, r9
 800d6f6:	f7f3 f957 	bl	80009a8 <__aeabi_dcmpeq>
 800d6fa:	b1b8      	cbz	r0, 800d72c <pow+0x60>
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	2300      	movs	r3, #0
 800d700:	4620      	mov	r0, r4
 800d702:	4629      	mov	r1, r5
 800d704:	f7f3 f950 	bl	80009a8 <__aeabi_dcmpeq>
 800d708:	2800      	cmp	r0, #0
 800d70a:	d141      	bne.n	800d790 <pow+0xc4>
 800d70c:	4620      	mov	r0, r4
 800d70e:	4629      	mov	r1, r5
 800d710:	f000 fe5c 	bl	800e3cc <finite>
 800d714:	b328      	cbz	r0, 800d762 <pow+0x96>
 800d716:	2200      	movs	r2, #0
 800d718:	2300      	movs	r3, #0
 800d71a:	4620      	mov	r0, r4
 800d71c:	4629      	mov	r1, r5
 800d71e:	f7f3 f94d 	bl	80009bc <__aeabi_dcmplt>
 800d722:	b1f0      	cbz	r0, 800d762 <pow+0x96>
 800d724:	f7fb f964 	bl	80089f0 <__errno>
 800d728:	2322      	movs	r3, #34	; 0x22
 800d72a:	e019      	b.n	800d760 <pow+0x94>
 800d72c:	4630      	mov	r0, r6
 800d72e:	4639      	mov	r1, r7
 800d730:	f000 fe4c 	bl	800e3cc <finite>
 800d734:	b9c8      	cbnz	r0, 800d76a <pow+0x9e>
 800d736:	4640      	mov	r0, r8
 800d738:	4649      	mov	r1, r9
 800d73a:	f000 fe47 	bl	800e3cc <finite>
 800d73e:	b1a0      	cbz	r0, 800d76a <pow+0x9e>
 800d740:	4620      	mov	r0, r4
 800d742:	4629      	mov	r1, r5
 800d744:	f000 fe42 	bl	800e3cc <finite>
 800d748:	b178      	cbz	r0, 800d76a <pow+0x9e>
 800d74a:	4632      	mov	r2, r6
 800d74c:	463b      	mov	r3, r7
 800d74e:	4630      	mov	r0, r6
 800d750:	4639      	mov	r1, r7
 800d752:	f7f3 f95b 	bl	8000a0c <__aeabi_dcmpun>
 800d756:	2800      	cmp	r0, #0
 800d758:	d0e4      	beq.n	800d724 <pow+0x58>
 800d75a:	f7fb f949 	bl	80089f0 <__errno>
 800d75e:	2321      	movs	r3, #33	; 0x21
 800d760:	6003      	str	r3, [r0, #0]
 800d762:	4630      	mov	r0, r6
 800d764:	4639      	mov	r1, r7
 800d766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d76a:	2200      	movs	r2, #0
 800d76c:	2300      	movs	r3, #0
 800d76e:	4630      	mov	r0, r6
 800d770:	4639      	mov	r1, r7
 800d772:	f7f3 f919 	bl	80009a8 <__aeabi_dcmpeq>
 800d776:	2800      	cmp	r0, #0
 800d778:	d0f3      	beq.n	800d762 <pow+0x96>
 800d77a:	4640      	mov	r0, r8
 800d77c:	4649      	mov	r1, r9
 800d77e:	f000 fe25 	bl	800e3cc <finite>
 800d782:	2800      	cmp	r0, #0
 800d784:	d0ed      	beq.n	800d762 <pow+0x96>
 800d786:	4620      	mov	r0, r4
 800d788:	4629      	mov	r1, r5
 800d78a:	f000 fe1f 	bl	800e3cc <finite>
 800d78e:	e7c8      	b.n	800d722 <pow+0x56>
 800d790:	2600      	movs	r6, #0
 800d792:	4f01      	ldr	r7, [pc, #4]	; (800d798 <pow+0xcc>)
 800d794:	e7e5      	b.n	800d762 <pow+0x96>
 800d796:	bf00      	nop
 800d798:	3ff00000 	.word	0x3ff00000

0800d79c <sqrt>:
 800d79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d79e:	4606      	mov	r6, r0
 800d7a0:	460f      	mov	r7, r1
 800d7a2:	f000 fd37 	bl	800e214 <__ieee754_sqrt>
 800d7a6:	4632      	mov	r2, r6
 800d7a8:	4604      	mov	r4, r0
 800d7aa:	460d      	mov	r5, r1
 800d7ac:	463b      	mov	r3, r7
 800d7ae:	4630      	mov	r0, r6
 800d7b0:	4639      	mov	r1, r7
 800d7b2:	f7f3 f92b 	bl	8000a0c <__aeabi_dcmpun>
 800d7b6:	b990      	cbnz	r0, 800d7de <sqrt+0x42>
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	4630      	mov	r0, r6
 800d7be:	4639      	mov	r1, r7
 800d7c0:	f7f3 f8fc 	bl	80009bc <__aeabi_dcmplt>
 800d7c4:	b158      	cbz	r0, 800d7de <sqrt+0x42>
 800d7c6:	f7fb f913 	bl	80089f0 <__errno>
 800d7ca:	2321      	movs	r3, #33	; 0x21
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	6003      	str	r3, [r0, #0]
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	4610      	mov	r0, r2
 800d7d4:	4619      	mov	r1, r3
 800d7d6:	f7f2 ffa9 	bl	800072c <__aeabi_ddiv>
 800d7da:	4604      	mov	r4, r0
 800d7dc:	460d      	mov	r5, r1
 800d7de:	4620      	mov	r0, r4
 800d7e0:	4629      	mov	r1, r5
 800d7e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7e4:	0000      	movs	r0, r0
	...

0800d7e8 <__ieee754_pow>:
 800d7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7ec:	b093      	sub	sp, #76	; 0x4c
 800d7ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d7f2:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800d7f6:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800d7fa:	4689      	mov	r9, r1
 800d7fc:	ea56 0102 	orrs.w	r1, r6, r2
 800d800:	4680      	mov	r8, r0
 800d802:	d111      	bne.n	800d828 <__ieee754_pow+0x40>
 800d804:	1803      	adds	r3, r0, r0
 800d806:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800d80a:	4152      	adcs	r2, r2
 800d80c:	4299      	cmp	r1, r3
 800d80e:	4b82      	ldr	r3, [pc, #520]	; (800da18 <__ieee754_pow+0x230>)
 800d810:	4193      	sbcs	r3, r2
 800d812:	f080 84b9 	bcs.w	800e188 <__ieee754_pow+0x9a0>
 800d816:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d81a:	4640      	mov	r0, r8
 800d81c:	4649      	mov	r1, r9
 800d81e:	f7f2 fca5 	bl	800016c <__adddf3>
 800d822:	4683      	mov	fp, r0
 800d824:	468c      	mov	ip, r1
 800d826:	e06f      	b.n	800d908 <__ieee754_pow+0x120>
 800d828:	4b7c      	ldr	r3, [pc, #496]	; (800da1c <__ieee754_pow+0x234>)
 800d82a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800d82e:	429c      	cmp	r4, r3
 800d830:	464d      	mov	r5, r9
 800d832:	4682      	mov	sl, r0
 800d834:	dc06      	bgt.n	800d844 <__ieee754_pow+0x5c>
 800d836:	d101      	bne.n	800d83c <__ieee754_pow+0x54>
 800d838:	2800      	cmp	r0, #0
 800d83a:	d1ec      	bne.n	800d816 <__ieee754_pow+0x2e>
 800d83c:	429e      	cmp	r6, r3
 800d83e:	dc01      	bgt.n	800d844 <__ieee754_pow+0x5c>
 800d840:	d10f      	bne.n	800d862 <__ieee754_pow+0x7a>
 800d842:	b172      	cbz	r2, 800d862 <__ieee754_pow+0x7a>
 800d844:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800d848:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800d84c:	ea55 050a 	orrs.w	r5, r5, sl
 800d850:	d1e1      	bne.n	800d816 <__ieee754_pow+0x2e>
 800d852:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d856:	18db      	adds	r3, r3, r3
 800d858:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800d85c:	4152      	adcs	r2, r2
 800d85e:	429d      	cmp	r5, r3
 800d860:	e7d5      	b.n	800d80e <__ieee754_pow+0x26>
 800d862:	2d00      	cmp	r5, #0
 800d864:	da39      	bge.n	800d8da <__ieee754_pow+0xf2>
 800d866:	4b6e      	ldr	r3, [pc, #440]	; (800da20 <__ieee754_pow+0x238>)
 800d868:	429e      	cmp	r6, r3
 800d86a:	dc52      	bgt.n	800d912 <__ieee754_pow+0x12a>
 800d86c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800d870:	429e      	cmp	r6, r3
 800d872:	f340 849c 	ble.w	800e1ae <__ieee754_pow+0x9c6>
 800d876:	1533      	asrs	r3, r6, #20
 800d878:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d87c:	2b14      	cmp	r3, #20
 800d87e:	dd0f      	ble.n	800d8a0 <__ieee754_pow+0xb8>
 800d880:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d884:	fa22 f103 	lsr.w	r1, r2, r3
 800d888:	fa01 f303 	lsl.w	r3, r1, r3
 800d88c:	4293      	cmp	r3, r2
 800d88e:	f040 848e 	bne.w	800e1ae <__ieee754_pow+0x9c6>
 800d892:	f001 0101 	and.w	r1, r1, #1
 800d896:	f1c1 0302 	rsb	r3, r1, #2
 800d89a:	9300      	str	r3, [sp, #0]
 800d89c:	b182      	cbz	r2, 800d8c0 <__ieee754_pow+0xd8>
 800d89e:	e05d      	b.n	800d95c <__ieee754_pow+0x174>
 800d8a0:	2a00      	cmp	r2, #0
 800d8a2:	d159      	bne.n	800d958 <__ieee754_pow+0x170>
 800d8a4:	f1c3 0314 	rsb	r3, r3, #20
 800d8a8:	fa46 f103 	asr.w	r1, r6, r3
 800d8ac:	fa01 f303 	lsl.w	r3, r1, r3
 800d8b0:	42b3      	cmp	r3, r6
 800d8b2:	f040 8479 	bne.w	800e1a8 <__ieee754_pow+0x9c0>
 800d8b6:	f001 0101 	and.w	r1, r1, #1
 800d8ba:	f1c1 0302 	rsb	r3, r1, #2
 800d8be:	9300      	str	r3, [sp, #0]
 800d8c0:	4b58      	ldr	r3, [pc, #352]	; (800da24 <__ieee754_pow+0x23c>)
 800d8c2:	429e      	cmp	r6, r3
 800d8c4:	d132      	bne.n	800d92c <__ieee754_pow+0x144>
 800d8c6:	2f00      	cmp	r7, #0
 800d8c8:	f280 846a 	bge.w	800e1a0 <__ieee754_pow+0x9b8>
 800d8cc:	4642      	mov	r2, r8
 800d8ce:	464b      	mov	r3, r9
 800d8d0:	2000      	movs	r0, #0
 800d8d2:	4954      	ldr	r1, [pc, #336]	; (800da24 <__ieee754_pow+0x23c>)
 800d8d4:	f7f2 ff2a 	bl	800072c <__aeabi_ddiv>
 800d8d8:	e7a3      	b.n	800d822 <__ieee754_pow+0x3a>
 800d8da:	2300      	movs	r3, #0
 800d8dc:	9300      	str	r3, [sp, #0]
 800d8de:	2a00      	cmp	r2, #0
 800d8e0:	d13c      	bne.n	800d95c <__ieee754_pow+0x174>
 800d8e2:	4b4e      	ldr	r3, [pc, #312]	; (800da1c <__ieee754_pow+0x234>)
 800d8e4:	429e      	cmp	r6, r3
 800d8e6:	d1eb      	bne.n	800d8c0 <__ieee754_pow+0xd8>
 800d8e8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d8ec:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d8f0:	ea53 030a 	orrs.w	r3, r3, sl
 800d8f4:	f000 8448 	beq.w	800e188 <__ieee754_pow+0x9a0>
 800d8f8:	4b4b      	ldr	r3, [pc, #300]	; (800da28 <__ieee754_pow+0x240>)
 800d8fa:	429c      	cmp	r4, r3
 800d8fc:	dd0b      	ble.n	800d916 <__ieee754_pow+0x12e>
 800d8fe:	2f00      	cmp	r7, #0
 800d900:	f2c0 8448 	blt.w	800e194 <__ieee754_pow+0x9ac>
 800d904:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800d908:	4658      	mov	r0, fp
 800d90a:	4661      	mov	r1, ip
 800d90c:	b013      	add	sp, #76	; 0x4c
 800d90e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d912:	2302      	movs	r3, #2
 800d914:	e7e2      	b.n	800d8dc <__ieee754_pow+0xf4>
 800d916:	2f00      	cmp	r7, #0
 800d918:	f04f 0b00 	mov.w	fp, #0
 800d91c:	f04f 0c00 	mov.w	ip, #0
 800d920:	daf2      	bge.n	800d908 <__ieee754_pow+0x120>
 800d922:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800d926:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800d92a:	e7ed      	b.n	800d908 <__ieee754_pow+0x120>
 800d92c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800d930:	d106      	bne.n	800d940 <__ieee754_pow+0x158>
 800d932:	4642      	mov	r2, r8
 800d934:	464b      	mov	r3, r9
 800d936:	4640      	mov	r0, r8
 800d938:	4649      	mov	r1, r9
 800d93a:	f7f2 fdcd 	bl	80004d8 <__aeabi_dmul>
 800d93e:	e770      	b.n	800d822 <__ieee754_pow+0x3a>
 800d940:	4b3a      	ldr	r3, [pc, #232]	; (800da2c <__ieee754_pow+0x244>)
 800d942:	429f      	cmp	r7, r3
 800d944:	d10a      	bne.n	800d95c <__ieee754_pow+0x174>
 800d946:	2d00      	cmp	r5, #0
 800d948:	db08      	blt.n	800d95c <__ieee754_pow+0x174>
 800d94a:	4640      	mov	r0, r8
 800d94c:	4649      	mov	r1, r9
 800d94e:	b013      	add	sp, #76	; 0x4c
 800d950:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d954:	f000 bc5e 	b.w	800e214 <__ieee754_sqrt>
 800d958:	2300      	movs	r3, #0
 800d95a:	9300      	str	r3, [sp, #0]
 800d95c:	4640      	mov	r0, r8
 800d95e:	4649      	mov	r1, r9
 800d960:	f7ff fe68 	bl	800d634 <fabs>
 800d964:	4683      	mov	fp, r0
 800d966:	468c      	mov	ip, r1
 800d968:	f1ba 0f00 	cmp.w	sl, #0
 800d96c:	d128      	bne.n	800d9c0 <__ieee754_pow+0x1d8>
 800d96e:	b124      	cbz	r4, 800d97a <__ieee754_pow+0x192>
 800d970:	4b2c      	ldr	r3, [pc, #176]	; (800da24 <__ieee754_pow+0x23c>)
 800d972:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800d976:	429a      	cmp	r2, r3
 800d978:	d122      	bne.n	800d9c0 <__ieee754_pow+0x1d8>
 800d97a:	2f00      	cmp	r7, #0
 800d97c:	da07      	bge.n	800d98e <__ieee754_pow+0x1a6>
 800d97e:	465a      	mov	r2, fp
 800d980:	4663      	mov	r3, ip
 800d982:	2000      	movs	r0, #0
 800d984:	4927      	ldr	r1, [pc, #156]	; (800da24 <__ieee754_pow+0x23c>)
 800d986:	f7f2 fed1 	bl	800072c <__aeabi_ddiv>
 800d98a:	4683      	mov	fp, r0
 800d98c:	468c      	mov	ip, r1
 800d98e:	2d00      	cmp	r5, #0
 800d990:	daba      	bge.n	800d908 <__ieee754_pow+0x120>
 800d992:	9b00      	ldr	r3, [sp, #0]
 800d994:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d998:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d99c:	4323      	orrs	r3, r4
 800d99e:	d108      	bne.n	800d9b2 <__ieee754_pow+0x1ca>
 800d9a0:	465a      	mov	r2, fp
 800d9a2:	4663      	mov	r3, ip
 800d9a4:	4658      	mov	r0, fp
 800d9a6:	4661      	mov	r1, ip
 800d9a8:	f7f2 fbde 	bl	8000168 <__aeabi_dsub>
 800d9ac:	4602      	mov	r2, r0
 800d9ae:	460b      	mov	r3, r1
 800d9b0:	e790      	b.n	800d8d4 <__ieee754_pow+0xec>
 800d9b2:	9b00      	ldr	r3, [sp, #0]
 800d9b4:	2b01      	cmp	r3, #1
 800d9b6:	d1a7      	bne.n	800d908 <__ieee754_pow+0x120>
 800d9b8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800d9bc:	469c      	mov	ip, r3
 800d9be:	e7a3      	b.n	800d908 <__ieee754_pow+0x120>
 800d9c0:	0feb      	lsrs	r3, r5, #31
 800d9c2:	3b01      	subs	r3, #1
 800d9c4:	930c      	str	r3, [sp, #48]	; 0x30
 800d9c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d9c8:	9b00      	ldr	r3, [sp, #0]
 800d9ca:	4313      	orrs	r3, r2
 800d9cc:	d104      	bne.n	800d9d8 <__ieee754_pow+0x1f0>
 800d9ce:	4642      	mov	r2, r8
 800d9d0:	464b      	mov	r3, r9
 800d9d2:	4640      	mov	r0, r8
 800d9d4:	4649      	mov	r1, r9
 800d9d6:	e7e7      	b.n	800d9a8 <__ieee754_pow+0x1c0>
 800d9d8:	4b15      	ldr	r3, [pc, #84]	; (800da30 <__ieee754_pow+0x248>)
 800d9da:	429e      	cmp	r6, r3
 800d9dc:	f340 80f6 	ble.w	800dbcc <__ieee754_pow+0x3e4>
 800d9e0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d9e4:	429e      	cmp	r6, r3
 800d9e6:	4b10      	ldr	r3, [pc, #64]	; (800da28 <__ieee754_pow+0x240>)
 800d9e8:	dd09      	ble.n	800d9fe <__ieee754_pow+0x216>
 800d9ea:	429c      	cmp	r4, r3
 800d9ec:	dc0c      	bgt.n	800da08 <__ieee754_pow+0x220>
 800d9ee:	2f00      	cmp	r7, #0
 800d9f0:	da0c      	bge.n	800da0c <__ieee754_pow+0x224>
 800d9f2:	2000      	movs	r0, #0
 800d9f4:	b013      	add	sp, #76	; 0x4c
 800d9f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9fa:	f000 bce2 	b.w	800e3c2 <__math_oflow>
 800d9fe:	429c      	cmp	r4, r3
 800da00:	dbf5      	blt.n	800d9ee <__ieee754_pow+0x206>
 800da02:	4b08      	ldr	r3, [pc, #32]	; (800da24 <__ieee754_pow+0x23c>)
 800da04:	429c      	cmp	r4, r3
 800da06:	dd15      	ble.n	800da34 <__ieee754_pow+0x24c>
 800da08:	2f00      	cmp	r7, #0
 800da0a:	dcf2      	bgt.n	800d9f2 <__ieee754_pow+0x20a>
 800da0c:	2000      	movs	r0, #0
 800da0e:	b013      	add	sp, #76	; 0x4c
 800da10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da14:	f000 bcd0 	b.w	800e3b8 <__math_uflow>
 800da18:	fff00000 	.word	0xfff00000
 800da1c:	7ff00000 	.word	0x7ff00000
 800da20:	433fffff 	.word	0x433fffff
 800da24:	3ff00000 	.word	0x3ff00000
 800da28:	3fefffff 	.word	0x3fefffff
 800da2c:	3fe00000 	.word	0x3fe00000
 800da30:	41e00000 	.word	0x41e00000
 800da34:	4661      	mov	r1, ip
 800da36:	2200      	movs	r2, #0
 800da38:	4658      	mov	r0, fp
 800da3a:	4b5f      	ldr	r3, [pc, #380]	; (800dbb8 <__ieee754_pow+0x3d0>)
 800da3c:	f7f2 fb94 	bl	8000168 <__aeabi_dsub>
 800da40:	a355      	add	r3, pc, #340	; (adr r3, 800db98 <__ieee754_pow+0x3b0>)
 800da42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da46:	4604      	mov	r4, r0
 800da48:	460d      	mov	r5, r1
 800da4a:	f7f2 fd45 	bl	80004d8 <__aeabi_dmul>
 800da4e:	a354      	add	r3, pc, #336	; (adr r3, 800dba0 <__ieee754_pow+0x3b8>)
 800da50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da54:	4606      	mov	r6, r0
 800da56:	460f      	mov	r7, r1
 800da58:	4620      	mov	r0, r4
 800da5a:	4629      	mov	r1, r5
 800da5c:	f7f2 fd3c 	bl	80004d8 <__aeabi_dmul>
 800da60:	2200      	movs	r2, #0
 800da62:	4682      	mov	sl, r0
 800da64:	468b      	mov	fp, r1
 800da66:	4620      	mov	r0, r4
 800da68:	4629      	mov	r1, r5
 800da6a:	4b54      	ldr	r3, [pc, #336]	; (800dbbc <__ieee754_pow+0x3d4>)
 800da6c:	f7f2 fd34 	bl	80004d8 <__aeabi_dmul>
 800da70:	4602      	mov	r2, r0
 800da72:	460b      	mov	r3, r1
 800da74:	a14c      	add	r1, pc, #304	; (adr r1, 800dba8 <__ieee754_pow+0x3c0>)
 800da76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da7a:	f7f2 fb75 	bl	8000168 <__aeabi_dsub>
 800da7e:	4622      	mov	r2, r4
 800da80:	462b      	mov	r3, r5
 800da82:	f7f2 fd29 	bl	80004d8 <__aeabi_dmul>
 800da86:	4602      	mov	r2, r0
 800da88:	460b      	mov	r3, r1
 800da8a:	2000      	movs	r0, #0
 800da8c:	494c      	ldr	r1, [pc, #304]	; (800dbc0 <__ieee754_pow+0x3d8>)
 800da8e:	f7f2 fb6b 	bl	8000168 <__aeabi_dsub>
 800da92:	4622      	mov	r2, r4
 800da94:	462b      	mov	r3, r5
 800da96:	4680      	mov	r8, r0
 800da98:	4689      	mov	r9, r1
 800da9a:	4620      	mov	r0, r4
 800da9c:	4629      	mov	r1, r5
 800da9e:	f7f2 fd1b 	bl	80004d8 <__aeabi_dmul>
 800daa2:	4602      	mov	r2, r0
 800daa4:	460b      	mov	r3, r1
 800daa6:	4640      	mov	r0, r8
 800daa8:	4649      	mov	r1, r9
 800daaa:	f7f2 fd15 	bl	80004d8 <__aeabi_dmul>
 800daae:	a340      	add	r3, pc, #256	; (adr r3, 800dbb0 <__ieee754_pow+0x3c8>)
 800dab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dab4:	f7f2 fd10 	bl	80004d8 <__aeabi_dmul>
 800dab8:	4602      	mov	r2, r0
 800daba:	460b      	mov	r3, r1
 800dabc:	4650      	mov	r0, sl
 800dabe:	4659      	mov	r1, fp
 800dac0:	f7f2 fb52 	bl	8000168 <__aeabi_dsub>
 800dac4:	f04f 0a00 	mov.w	sl, #0
 800dac8:	4602      	mov	r2, r0
 800daca:	460b      	mov	r3, r1
 800dacc:	4604      	mov	r4, r0
 800dace:	460d      	mov	r5, r1
 800dad0:	4630      	mov	r0, r6
 800dad2:	4639      	mov	r1, r7
 800dad4:	f7f2 fb4a 	bl	800016c <__adddf3>
 800dad8:	4632      	mov	r2, r6
 800dada:	463b      	mov	r3, r7
 800dadc:	4650      	mov	r0, sl
 800dade:	468b      	mov	fp, r1
 800dae0:	f7f2 fb42 	bl	8000168 <__aeabi_dsub>
 800dae4:	4602      	mov	r2, r0
 800dae6:	460b      	mov	r3, r1
 800dae8:	4620      	mov	r0, r4
 800daea:	4629      	mov	r1, r5
 800daec:	f7f2 fb3c 	bl	8000168 <__aeabi_dsub>
 800daf0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800daf4:	9b00      	ldr	r3, [sp, #0]
 800daf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800daf8:	3b01      	subs	r3, #1
 800dafa:	4313      	orrs	r3, r2
 800dafc:	f04f 0600 	mov.w	r6, #0
 800db00:	f04f 0200 	mov.w	r2, #0
 800db04:	bf0c      	ite	eq
 800db06:	4b2f      	ldreq	r3, [pc, #188]	; (800dbc4 <__ieee754_pow+0x3dc>)
 800db08:	4b2b      	ldrne	r3, [pc, #172]	; (800dbb8 <__ieee754_pow+0x3d0>)
 800db0a:	4604      	mov	r4, r0
 800db0c:	460d      	mov	r5, r1
 800db0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db12:	e9cd 2300 	strd	r2, r3, [sp]
 800db16:	4632      	mov	r2, r6
 800db18:	463b      	mov	r3, r7
 800db1a:	f7f2 fb25 	bl	8000168 <__aeabi_dsub>
 800db1e:	4652      	mov	r2, sl
 800db20:	465b      	mov	r3, fp
 800db22:	f7f2 fcd9 	bl	80004d8 <__aeabi_dmul>
 800db26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800db2a:	4680      	mov	r8, r0
 800db2c:	4689      	mov	r9, r1
 800db2e:	4620      	mov	r0, r4
 800db30:	4629      	mov	r1, r5
 800db32:	f7f2 fcd1 	bl	80004d8 <__aeabi_dmul>
 800db36:	4602      	mov	r2, r0
 800db38:	460b      	mov	r3, r1
 800db3a:	4640      	mov	r0, r8
 800db3c:	4649      	mov	r1, r9
 800db3e:	f7f2 fb15 	bl	800016c <__adddf3>
 800db42:	4632      	mov	r2, r6
 800db44:	463b      	mov	r3, r7
 800db46:	4680      	mov	r8, r0
 800db48:	4689      	mov	r9, r1
 800db4a:	4650      	mov	r0, sl
 800db4c:	4659      	mov	r1, fp
 800db4e:	f7f2 fcc3 	bl	80004d8 <__aeabi_dmul>
 800db52:	4604      	mov	r4, r0
 800db54:	460d      	mov	r5, r1
 800db56:	460b      	mov	r3, r1
 800db58:	4602      	mov	r2, r0
 800db5a:	4649      	mov	r1, r9
 800db5c:	4640      	mov	r0, r8
 800db5e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800db62:	f7f2 fb03 	bl	800016c <__adddf3>
 800db66:	4b18      	ldr	r3, [pc, #96]	; (800dbc8 <__ieee754_pow+0x3e0>)
 800db68:	4682      	mov	sl, r0
 800db6a:	4299      	cmp	r1, r3
 800db6c:	460f      	mov	r7, r1
 800db6e:	460e      	mov	r6, r1
 800db70:	f340 82e5 	ble.w	800e13e <__ieee754_pow+0x956>
 800db74:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800db78:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800db7c:	4303      	orrs	r3, r0
 800db7e:	f000 81df 	beq.w	800df40 <__ieee754_pow+0x758>
 800db82:	e9dd 0100 	ldrd	r0, r1, [sp]
 800db86:	2200      	movs	r2, #0
 800db88:	2300      	movs	r3, #0
 800db8a:	f7f2 ff17 	bl	80009bc <__aeabi_dcmplt>
 800db8e:	3800      	subs	r0, #0
 800db90:	bf18      	it	ne
 800db92:	2001      	movne	r0, #1
 800db94:	e72e      	b.n	800d9f4 <__ieee754_pow+0x20c>
 800db96:	bf00      	nop
 800db98:	60000000 	.word	0x60000000
 800db9c:	3ff71547 	.word	0x3ff71547
 800dba0:	f85ddf44 	.word	0xf85ddf44
 800dba4:	3e54ae0b 	.word	0x3e54ae0b
 800dba8:	55555555 	.word	0x55555555
 800dbac:	3fd55555 	.word	0x3fd55555
 800dbb0:	652b82fe 	.word	0x652b82fe
 800dbb4:	3ff71547 	.word	0x3ff71547
 800dbb8:	3ff00000 	.word	0x3ff00000
 800dbbc:	3fd00000 	.word	0x3fd00000
 800dbc0:	3fe00000 	.word	0x3fe00000
 800dbc4:	bff00000 	.word	0xbff00000
 800dbc8:	408fffff 	.word	0x408fffff
 800dbcc:	4bd2      	ldr	r3, [pc, #840]	; (800df18 <__ieee754_pow+0x730>)
 800dbce:	2200      	movs	r2, #0
 800dbd0:	402b      	ands	r3, r5
 800dbd2:	b943      	cbnz	r3, 800dbe6 <__ieee754_pow+0x3fe>
 800dbd4:	4658      	mov	r0, fp
 800dbd6:	4661      	mov	r1, ip
 800dbd8:	4bd0      	ldr	r3, [pc, #832]	; (800df1c <__ieee754_pow+0x734>)
 800dbda:	f7f2 fc7d 	bl	80004d8 <__aeabi_dmul>
 800dbde:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800dbe2:	4683      	mov	fp, r0
 800dbe4:	460c      	mov	r4, r1
 800dbe6:	1523      	asrs	r3, r4, #20
 800dbe8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800dbec:	4413      	add	r3, r2
 800dbee:	930b      	str	r3, [sp, #44]	; 0x2c
 800dbf0:	4bcb      	ldr	r3, [pc, #812]	; (800df20 <__ieee754_pow+0x738>)
 800dbf2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800dbf6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800dbfa:	429c      	cmp	r4, r3
 800dbfc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800dc00:	dd08      	ble.n	800dc14 <__ieee754_pow+0x42c>
 800dc02:	4bc8      	ldr	r3, [pc, #800]	; (800df24 <__ieee754_pow+0x73c>)
 800dc04:	429c      	cmp	r4, r3
 800dc06:	f340 8199 	ble.w	800df3c <__ieee754_pow+0x754>
 800dc0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc0c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800dc10:	3301      	adds	r3, #1
 800dc12:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc14:	2600      	movs	r6, #0
 800dc16:	00f3      	lsls	r3, r6, #3
 800dc18:	930d      	str	r3, [sp, #52]	; 0x34
 800dc1a:	4bc3      	ldr	r3, [pc, #780]	; (800df28 <__ieee754_pow+0x740>)
 800dc1c:	4658      	mov	r0, fp
 800dc1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dc22:	e9d3 3400 	ldrd	r3, r4, [r3]
 800dc26:	4629      	mov	r1, r5
 800dc28:	461a      	mov	r2, r3
 800dc2a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800dc2e:	4623      	mov	r3, r4
 800dc30:	f7f2 fa9a 	bl	8000168 <__aeabi_dsub>
 800dc34:	46da      	mov	sl, fp
 800dc36:	462b      	mov	r3, r5
 800dc38:	4652      	mov	r2, sl
 800dc3a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800dc3e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dc42:	f7f2 fa93 	bl	800016c <__adddf3>
 800dc46:	4602      	mov	r2, r0
 800dc48:	460b      	mov	r3, r1
 800dc4a:	2000      	movs	r0, #0
 800dc4c:	49b7      	ldr	r1, [pc, #732]	; (800df2c <__ieee754_pow+0x744>)
 800dc4e:	f7f2 fd6d 	bl	800072c <__aeabi_ddiv>
 800dc52:	4602      	mov	r2, r0
 800dc54:	460b      	mov	r3, r1
 800dc56:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800dc5a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800dc5e:	f7f2 fc3b 	bl	80004d8 <__aeabi_dmul>
 800dc62:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800dc66:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800dc6a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800dc6e:	2300      	movs	r3, #0
 800dc70:	2200      	movs	r2, #0
 800dc72:	46ab      	mov	fp, r5
 800dc74:	106d      	asrs	r5, r5, #1
 800dc76:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800dc7a:	9304      	str	r3, [sp, #16]
 800dc7c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800dc80:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800dc84:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800dc88:	4640      	mov	r0, r8
 800dc8a:	4649      	mov	r1, r9
 800dc8c:	4614      	mov	r4, r2
 800dc8e:	461d      	mov	r5, r3
 800dc90:	f7f2 fc22 	bl	80004d8 <__aeabi_dmul>
 800dc94:	4602      	mov	r2, r0
 800dc96:	460b      	mov	r3, r1
 800dc98:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800dc9c:	f7f2 fa64 	bl	8000168 <__aeabi_dsub>
 800dca0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800dca4:	4606      	mov	r6, r0
 800dca6:	460f      	mov	r7, r1
 800dca8:	4620      	mov	r0, r4
 800dcaa:	4629      	mov	r1, r5
 800dcac:	f7f2 fa5c 	bl	8000168 <__aeabi_dsub>
 800dcb0:	4602      	mov	r2, r0
 800dcb2:	460b      	mov	r3, r1
 800dcb4:	4650      	mov	r0, sl
 800dcb6:	4659      	mov	r1, fp
 800dcb8:	f7f2 fa56 	bl	8000168 <__aeabi_dsub>
 800dcbc:	4642      	mov	r2, r8
 800dcbe:	464b      	mov	r3, r9
 800dcc0:	f7f2 fc0a 	bl	80004d8 <__aeabi_dmul>
 800dcc4:	4602      	mov	r2, r0
 800dcc6:	460b      	mov	r3, r1
 800dcc8:	4630      	mov	r0, r6
 800dcca:	4639      	mov	r1, r7
 800dccc:	f7f2 fa4c 	bl	8000168 <__aeabi_dsub>
 800dcd0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800dcd4:	f7f2 fc00 	bl	80004d8 <__aeabi_dmul>
 800dcd8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dcdc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dce0:	4610      	mov	r0, r2
 800dce2:	4619      	mov	r1, r3
 800dce4:	f7f2 fbf8 	bl	80004d8 <__aeabi_dmul>
 800dce8:	a379      	add	r3, pc, #484	; (adr r3, 800ded0 <__ieee754_pow+0x6e8>)
 800dcea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcee:	4604      	mov	r4, r0
 800dcf0:	460d      	mov	r5, r1
 800dcf2:	f7f2 fbf1 	bl	80004d8 <__aeabi_dmul>
 800dcf6:	a378      	add	r3, pc, #480	; (adr r3, 800ded8 <__ieee754_pow+0x6f0>)
 800dcf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcfc:	f7f2 fa36 	bl	800016c <__adddf3>
 800dd00:	4622      	mov	r2, r4
 800dd02:	462b      	mov	r3, r5
 800dd04:	f7f2 fbe8 	bl	80004d8 <__aeabi_dmul>
 800dd08:	a375      	add	r3, pc, #468	; (adr r3, 800dee0 <__ieee754_pow+0x6f8>)
 800dd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd0e:	f7f2 fa2d 	bl	800016c <__adddf3>
 800dd12:	4622      	mov	r2, r4
 800dd14:	462b      	mov	r3, r5
 800dd16:	f7f2 fbdf 	bl	80004d8 <__aeabi_dmul>
 800dd1a:	a373      	add	r3, pc, #460	; (adr r3, 800dee8 <__ieee754_pow+0x700>)
 800dd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd20:	f7f2 fa24 	bl	800016c <__adddf3>
 800dd24:	4622      	mov	r2, r4
 800dd26:	462b      	mov	r3, r5
 800dd28:	f7f2 fbd6 	bl	80004d8 <__aeabi_dmul>
 800dd2c:	a370      	add	r3, pc, #448	; (adr r3, 800def0 <__ieee754_pow+0x708>)
 800dd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd32:	f7f2 fa1b 	bl	800016c <__adddf3>
 800dd36:	4622      	mov	r2, r4
 800dd38:	462b      	mov	r3, r5
 800dd3a:	f7f2 fbcd 	bl	80004d8 <__aeabi_dmul>
 800dd3e:	a36e      	add	r3, pc, #440	; (adr r3, 800def8 <__ieee754_pow+0x710>)
 800dd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd44:	f7f2 fa12 	bl	800016c <__adddf3>
 800dd48:	4622      	mov	r2, r4
 800dd4a:	4606      	mov	r6, r0
 800dd4c:	460f      	mov	r7, r1
 800dd4e:	462b      	mov	r3, r5
 800dd50:	4620      	mov	r0, r4
 800dd52:	4629      	mov	r1, r5
 800dd54:	f7f2 fbc0 	bl	80004d8 <__aeabi_dmul>
 800dd58:	4602      	mov	r2, r0
 800dd5a:	460b      	mov	r3, r1
 800dd5c:	4630      	mov	r0, r6
 800dd5e:	4639      	mov	r1, r7
 800dd60:	f7f2 fbba 	bl	80004d8 <__aeabi_dmul>
 800dd64:	4604      	mov	r4, r0
 800dd66:	460d      	mov	r5, r1
 800dd68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dd6c:	4642      	mov	r2, r8
 800dd6e:	464b      	mov	r3, r9
 800dd70:	f7f2 f9fc 	bl	800016c <__adddf3>
 800dd74:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800dd78:	f7f2 fbae 	bl	80004d8 <__aeabi_dmul>
 800dd7c:	4622      	mov	r2, r4
 800dd7e:	462b      	mov	r3, r5
 800dd80:	f7f2 f9f4 	bl	800016c <__adddf3>
 800dd84:	4642      	mov	r2, r8
 800dd86:	4606      	mov	r6, r0
 800dd88:	460f      	mov	r7, r1
 800dd8a:	464b      	mov	r3, r9
 800dd8c:	4640      	mov	r0, r8
 800dd8e:	4649      	mov	r1, r9
 800dd90:	f7f2 fba2 	bl	80004d8 <__aeabi_dmul>
 800dd94:	2200      	movs	r2, #0
 800dd96:	4b66      	ldr	r3, [pc, #408]	; (800df30 <__ieee754_pow+0x748>)
 800dd98:	4682      	mov	sl, r0
 800dd9a:	468b      	mov	fp, r1
 800dd9c:	f7f2 f9e6 	bl	800016c <__adddf3>
 800dda0:	4632      	mov	r2, r6
 800dda2:	463b      	mov	r3, r7
 800dda4:	f7f2 f9e2 	bl	800016c <__adddf3>
 800dda8:	2400      	movs	r4, #0
 800ddaa:	460d      	mov	r5, r1
 800ddac:	4622      	mov	r2, r4
 800ddae:	460b      	mov	r3, r1
 800ddb0:	4640      	mov	r0, r8
 800ddb2:	4649      	mov	r1, r9
 800ddb4:	f7f2 fb90 	bl	80004d8 <__aeabi_dmul>
 800ddb8:	2200      	movs	r2, #0
 800ddba:	4680      	mov	r8, r0
 800ddbc:	4689      	mov	r9, r1
 800ddbe:	4620      	mov	r0, r4
 800ddc0:	4629      	mov	r1, r5
 800ddc2:	4b5b      	ldr	r3, [pc, #364]	; (800df30 <__ieee754_pow+0x748>)
 800ddc4:	f7f2 f9d0 	bl	8000168 <__aeabi_dsub>
 800ddc8:	4652      	mov	r2, sl
 800ddca:	465b      	mov	r3, fp
 800ddcc:	f7f2 f9cc 	bl	8000168 <__aeabi_dsub>
 800ddd0:	4602      	mov	r2, r0
 800ddd2:	460b      	mov	r3, r1
 800ddd4:	4630      	mov	r0, r6
 800ddd6:	4639      	mov	r1, r7
 800ddd8:	f7f2 f9c6 	bl	8000168 <__aeabi_dsub>
 800dddc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dde0:	f7f2 fb7a 	bl	80004d8 <__aeabi_dmul>
 800dde4:	4622      	mov	r2, r4
 800dde6:	4606      	mov	r6, r0
 800dde8:	460f      	mov	r7, r1
 800ddea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ddee:	462b      	mov	r3, r5
 800ddf0:	f7f2 fb72 	bl	80004d8 <__aeabi_dmul>
 800ddf4:	4602      	mov	r2, r0
 800ddf6:	460b      	mov	r3, r1
 800ddf8:	4630      	mov	r0, r6
 800ddfa:	4639      	mov	r1, r7
 800ddfc:	f7f2 f9b6 	bl	800016c <__adddf3>
 800de00:	2400      	movs	r4, #0
 800de02:	4606      	mov	r6, r0
 800de04:	460f      	mov	r7, r1
 800de06:	4602      	mov	r2, r0
 800de08:	460b      	mov	r3, r1
 800de0a:	4640      	mov	r0, r8
 800de0c:	4649      	mov	r1, r9
 800de0e:	f7f2 f9ad 	bl	800016c <__adddf3>
 800de12:	a33b      	add	r3, pc, #236	; (adr r3, 800df00 <__ieee754_pow+0x718>)
 800de14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de18:	4620      	mov	r0, r4
 800de1a:	460d      	mov	r5, r1
 800de1c:	f7f2 fb5c 	bl	80004d8 <__aeabi_dmul>
 800de20:	4642      	mov	r2, r8
 800de22:	464b      	mov	r3, r9
 800de24:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800de28:	4620      	mov	r0, r4
 800de2a:	4629      	mov	r1, r5
 800de2c:	f7f2 f99c 	bl	8000168 <__aeabi_dsub>
 800de30:	4602      	mov	r2, r0
 800de32:	460b      	mov	r3, r1
 800de34:	4630      	mov	r0, r6
 800de36:	4639      	mov	r1, r7
 800de38:	f7f2 f996 	bl	8000168 <__aeabi_dsub>
 800de3c:	a332      	add	r3, pc, #200	; (adr r3, 800df08 <__ieee754_pow+0x720>)
 800de3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de42:	f7f2 fb49 	bl	80004d8 <__aeabi_dmul>
 800de46:	a332      	add	r3, pc, #200	; (adr r3, 800df10 <__ieee754_pow+0x728>)
 800de48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de4c:	4606      	mov	r6, r0
 800de4e:	460f      	mov	r7, r1
 800de50:	4620      	mov	r0, r4
 800de52:	4629      	mov	r1, r5
 800de54:	f7f2 fb40 	bl	80004d8 <__aeabi_dmul>
 800de58:	4602      	mov	r2, r0
 800de5a:	460b      	mov	r3, r1
 800de5c:	4630      	mov	r0, r6
 800de5e:	4639      	mov	r1, r7
 800de60:	f7f2 f984 	bl	800016c <__adddf3>
 800de64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800de66:	4b33      	ldr	r3, [pc, #204]	; (800df34 <__ieee754_pow+0x74c>)
 800de68:	f04f 0a00 	mov.w	sl, #0
 800de6c:	4413      	add	r3, r2
 800de6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de72:	f7f2 f97b 	bl	800016c <__adddf3>
 800de76:	4680      	mov	r8, r0
 800de78:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800de7a:	4689      	mov	r9, r1
 800de7c:	f7f2 fac2 	bl	8000404 <__aeabi_i2d>
 800de80:	4604      	mov	r4, r0
 800de82:	460d      	mov	r5, r1
 800de84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800de86:	4b2c      	ldr	r3, [pc, #176]	; (800df38 <__ieee754_pow+0x750>)
 800de88:	4413      	add	r3, r2
 800de8a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800de8e:	4642      	mov	r2, r8
 800de90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800de94:	464b      	mov	r3, r9
 800de96:	f7f2 f969 	bl	800016c <__adddf3>
 800de9a:	4632      	mov	r2, r6
 800de9c:	463b      	mov	r3, r7
 800de9e:	f7f2 f965 	bl	800016c <__adddf3>
 800dea2:	4622      	mov	r2, r4
 800dea4:	462b      	mov	r3, r5
 800dea6:	f7f2 f961 	bl	800016c <__adddf3>
 800deaa:	4622      	mov	r2, r4
 800deac:	462b      	mov	r3, r5
 800deae:	4650      	mov	r0, sl
 800deb0:	468b      	mov	fp, r1
 800deb2:	f7f2 f959 	bl	8000168 <__aeabi_dsub>
 800deb6:	4632      	mov	r2, r6
 800deb8:	463b      	mov	r3, r7
 800deba:	f7f2 f955 	bl	8000168 <__aeabi_dsub>
 800debe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dec2:	f7f2 f951 	bl	8000168 <__aeabi_dsub>
 800dec6:	4602      	mov	r2, r0
 800dec8:	460b      	mov	r3, r1
 800deca:	4640      	mov	r0, r8
 800decc:	4649      	mov	r1, r9
 800dece:	e60d      	b.n	800daec <__ieee754_pow+0x304>
 800ded0:	4a454eef 	.word	0x4a454eef
 800ded4:	3fca7e28 	.word	0x3fca7e28
 800ded8:	93c9db65 	.word	0x93c9db65
 800dedc:	3fcd864a 	.word	0x3fcd864a
 800dee0:	a91d4101 	.word	0xa91d4101
 800dee4:	3fd17460 	.word	0x3fd17460
 800dee8:	518f264d 	.word	0x518f264d
 800deec:	3fd55555 	.word	0x3fd55555
 800def0:	db6fabff 	.word	0xdb6fabff
 800def4:	3fdb6db6 	.word	0x3fdb6db6
 800def8:	33333303 	.word	0x33333303
 800defc:	3fe33333 	.word	0x3fe33333
 800df00:	e0000000 	.word	0xe0000000
 800df04:	3feec709 	.word	0x3feec709
 800df08:	dc3a03fd 	.word	0xdc3a03fd
 800df0c:	3feec709 	.word	0x3feec709
 800df10:	145b01f5 	.word	0x145b01f5
 800df14:	be3e2fe0 	.word	0xbe3e2fe0
 800df18:	7ff00000 	.word	0x7ff00000
 800df1c:	43400000 	.word	0x43400000
 800df20:	0003988e 	.word	0x0003988e
 800df24:	000bb679 	.word	0x000bb679
 800df28:	0800ea48 	.word	0x0800ea48
 800df2c:	3ff00000 	.word	0x3ff00000
 800df30:	40080000 	.word	0x40080000
 800df34:	0800ea68 	.word	0x0800ea68
 800df38:	0800ea58 	.word	0x0800ea58
 800df3c:	2601      	movs	r6, #1
 800df3e:	e66a      	b.n	800dc16 <__ieee754_pow+0x42e>
 800df40:	a39d      	add	r3, pc, #628	; (adr r3, 800e1b8 <__ieee754_pow+0x9d0>)
 800df42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df46:	4640      	mov	r0, r8
 800df48:	4649      	mov	r1, r9
 800df4a:	f7f2 f90f 	bl	800016c <__adddf3>
 800df4e:	4622      	mov	r2, r4
 800df50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800df54:	462b      	mov	r3, r5
 800df56:	4650      	mov	r0, sl
 800df58:	4639      	mov	r1, r7
 800df5a:	f7f2 f905 	bl	8000168 <__aeabi_dsub>
 800df5e:	4602      	mov	r2, r0
 800df60:	460b      	mov	r3, r1
 800df62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800df66:	f7f2 fd47 	bl	80009f8 <__aeabi_dcmpgt>
 800df6a:	2800      	cmp	r0, #0
 800df6c:	f47f ae09 	bne.w	800db82 <__ieee754_pow+0x39a>
 800df70:	4aa3      	ldr	r2, [pc, #652]	; (800e200 <__ieee754_pow+0xa18>)
 800df72:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800df76:	4293      	cmp	r3, r2
 800df78:	f340 8101 	ble.w	800e17e <__ieee754_pow+0x996>
 800df7c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800df80:	2000      	movs	r0, #0
 800df82:	151b      	asrs	r3, r3, #20
 800df84:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800df88:	fa4a f303 	asr.w	r3, sl, r3
 800df8c:	4433      	add	r3, r6
 800df8e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800df92:	4f9c      	ldr	r7, [pc, #624]	; (800e204 <__ieee754_pow+0xa1c>)
 800df94:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800df98:	4117      	asrs	r7, r2
 800df9a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800df9e:	ea23 0107 	bic.w	r1, r3, r7
 800dfa2:	f1c2 0214 	rsb	r2, r2, #20
 800dfa6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800dfaa:	460b      	mov	r3, r1
 800dfac:	fa4a fa02 	asr.w	sl, sl, r2
 800dfb0:	2e00      	cmp	r6, #0
 800dfb2:	4602      	mov	r2, r0
 800dfb4:	4629      	mov	r1, r5
 800dfb6:	4620      	mov	r0, r4
 800dfb8:	bfb8      	it	lt
 800dfba:	f1ca 0a00 	rsblt	sl, sl, #0
 800dfbe:	f7f2 f8d3 	bl	8000168 <__aeabi_dsub>
 800dfc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dfc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dfca:	2400      	movs	r4, #0
 800dfcc:	4642      	mov	r2, r8
 800dfce:	464b      	mov	r3, r9
 800dfd0:	f7f2 f8cc 	bl	800016c <__adddf3>
 800dfd4:	a37a      	add	r3, pc, #488	; (adr r3, 800e1c0 <__ieee754_pow+0x9d8>)
 800dfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfda:	4620      	mov	r0, r4
 800dfdc:	460d      	mov	r5, r1
 800dfde:	f7f2 fa7b 	bl	80004d8 <__aeabi_dmul>
 800dfe2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dfe6:	4606      	mov	r6, r0
 800dfe8:	460f      	mov	r7, r1
 800dfea:	4620      	mov	r0, r4
 800dfec:	4629      	mov	r1, r5
 800dfee:	f7f2 f8bb 	bl	8000168 <__aeabi_dsub>
 800dff2:	4602      	mov	r2, r0
 800dff4:	460b      	mov	r3, r1
 800dff6:	4640      	mov	r0, r8
 800dff8:	4649      	mov	r1, r9
 800dffa:	f7f2 f8b5 	bl	8000168 <__aeabi_dsub>
 800dffe:	a372      	add	r3, pc, #456	; (adr r3, 800e1c8 <__ieee754_pow+0x9e0>)
 800e000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e004:	f7f2 fa68 	bl	80004d8 <__aeabi_dmul>
 800e008:	a371      	add	r3, pc, #452	; (adr r3, 800e1d0 <__ieee754_pow+0x9e8>)
 800e00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e00e:	4680      	mov	r8, r0
 800e010:	4689      	mov	r9, r1
 800e012:	4620      	mov	r0, r4
 800e014:	4629      	mov	r1, r5
 800e016:	f7f2 fa5f 	bl	80004d8 <__aeabi_dmul>
 800e01a:	4602      	mov	r2, r0
 800e01c:	460b      	mov	r3, r1
 800e01e:	4640      	mov	r0, r8
 800e020:	4649      	mov	r1, r9
 800e022:	f7f2 f8a3 	bl	800016c <__adddf3>
 800e026:	4604      	mov	r4, r0
 800e028:	460d      	mov	r5, r1
 800e02a:	4602      	mov	r2, r0
 800e02c:	460b      	mov	r3, r1
 800e02e:	4630      	mov	r0, r6
 800e030:	4639      	mov	r1, r7
 800e032:	f7f2 f89b 	bl	800016c <__adddf3>
 800e036:	4632      	mov	r2, r6
 800e038:	463b      	mov	r3, r7
 800e03a:	4680      	mov	r8, r0
 800e03c:	4689      	mov	r9, r1
 800e03e:	f7f2 f893 	bl	8000168 <__aeabi_dsub>
 800e042:	4602      	mov	r2, r0
 800e044:	460b      	mov	r3, r1
 800e046:	4620      	mov	r0, r4
 800e048:	4629      	mov	r1, r5
 800e04a:	f7f2 f88d 	bl	8000168 <__aeabi_dsub>
 800e04e:	4642      	mov	r2, r8
 800e050:	4606      	mov	r6, r0
 800e052:	460f      	mov	r7, r1
 800e054:	464b      	mov	r3, r9
 800e056:	4640      	mov	r0, r8
 800e058:	4649      	mov	r1, r9
 800e05a:	f7f2 fa3d 	bl	80004d8 <__aeabi_dmul>
 800e05e:	a35e      	add	r3, pc, #376	; (adr r3, 800e1d8 <__ieee754_pow+0x9f0>)
 800e060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e064:	4604      	mov	r4, r0
 800e066:	460d      	mov	r5, r1
 800e068:	f7f2 fa36 	bl	80004d8 <__aeabi_dmul>
 800e06c:	a35c      	add	r3, pc, #368	; (adr r3, 800e1e0 <__ieee754_pow+0x9f8>)
 800e06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e072:	f7f2 f879 	bl	8000168 <__aeabi_dsub>
 800e076:	4622      	mov	r2, r4
 800e078:	462b      	mov	r3, r5
 800e07a:	f7f2 fa2d 	bl	80004d8 <__aeabi_dmul>
 800e07e:	a35a      	add	r3, pc, #360	; (adr r3, 800e1e8 <__ieee754_pow+0xa00>)
 800e080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e084:	f7f2 f872 	bl	800016c <__adddf3>
 800e088:	4622      	mov	r2, r4
 800e08a:	462b      	mov	r3, r5
 800e08c:	f7f2 fa24 	bl	80004d8 <__aeabi_dmul>
 800e090:	a357      	add	r3, pc, #348	; (adr r3, 800e1f0 <__ieee754_pow+0xa08>)
 800e092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e096:	f7f2 f867 	bl	8000168 <__aeabi_dsub>
 800e09a:	4622      	mov	r2, r4
 800e09c:	462b      	mov	r3, r5
 800e09e:	f7f2 fa1b 	bl	80004d8 <__aeabi_dmul>
 800e0a2:	a355      	add	r3, pc, #340	; (adr r3, 800e1f8 <__ieee754_pow+0xa10>)
 800e0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0a8:	f7f2 f860 	bl	800016c <__adddf3>
 800e0ac:	4622      	mov	r2, r4
 800e0ae:	462b      	mov	r3, r5
 800e0b0:	f7f2 fa12 	bl	80004d8 <__aeabi_dmul>
 800e0b4:	4602      	mov	r2, r0
 800e0b6:	460b      	mov	r3, r1
 800e0b8:	4640      	mov	r0, r8
 800e0ba:	4649      	mov	r1, r9
 800e0bc:	f7f2 f854 	bl	8000168 <__aeabi_dsub>
 800e0c0:	4604      	mov	r4, r0
 800e0c2:	460d      	mov	r5, r1
 800e0c4:	4602      	mov	r2, r0
 800e0c6:	460b      	mov	r3, r1
 800e0c8:	4640      	mov	r0, r8
 800e0ca:	4649      	mov	r1, r9
 800e0cc:	f7f2 fa04 	bl	80004d8 <__aeabi_dmul>
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e0d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e0da:	4620      	mov	r0, r4
 800e0dc:	4629      	mov	r1, r5
 800e0de:	f7f2 f843 	bl	8000168 <__aeabi_dsub>
 800e0e2:	4602      	mov	r2, r0
 800e0e4:	460b      	mov	r3, r1
 800e0e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0ea:	f7f2 fb1f 	bl	800072c <__aeabi_ddiv>
 800e0ee:	4632      	mov	r2, r6
 800e0f0:	4604      	mov	r4, r0
 800e0f2:	460d      	mov	r5, r1
 800e0f4:	463b      	mov	r3, r7
 800e0f6:	4640      	mov	r0, r8
 800e0f8:	4649      	mov	r1, r9
 800e0fa:	f7f2 f9ed 	bl	80004d8 <__aeabi_dmul>
 800e0fe:	4632      	mov	r2, r6
 800e100:	463b      	mov	r3, r7
 800e102:	f7f2 f833 	bl	800016c <__adddf3>
 800e106:	4602      	mov	r2, r0
 800e108:	460b      	mov	r3, r1
 800e10a:	4620      	mov	r0, r4
 800e10c:	4629      	mov	r1, r5
 800e10e:	f7f2 f82b 	bl	8000168 <__aeabi_dsub>
 800e112:	4642      	mov	r2, r8
 800e114:	464b      	mov	r3, r9
 800e116:	f7f2 f827 	bl	8000168 <__aeabi_dsub>
 800e11a:	4602      	mov	r2, r0
 800e11c:	460b      	mov	r3, r1
 800e11e:	2000      	movs	r0, #0
 800e120:	4939      	ldr	r1, [pc, #228]	; (800e208 <__ieee754_pow+0xa20>)
 800e122:	f7f2 f821 	bl	8000168 <__aeabi_dsub>
 800e126:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800e12a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800e12e:	da29      	bge.n	800e184 <__ieee754_pow+0x99c>
 800e130:	4652      	mov	r2, sl
 800e132:	f000 f951 	bl	800e3d8 <scalbn>
 800e136:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e13a:	f7ff bbfe 	b.w	800d93a <__ieee754_pow+0x152>
 800e13e:	4b33      	ldr	r3, [pc, #204]	; (800e20c <__ieee754_pow+0xa24>)
 800e140:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800e144:	429f      	cmp	r7, r3
 800e146:	f77f af13 	ble.w	800df70 <__ieee754_pow+0x788>
 800e14a:	4b31      	ldr	r3, [pc, #196]	; (800e210 <__ieee754_pow+0xa28>)
 800e14c:	440b      	add	r3, r1
 800e14e:	4303      	orrs	r3, r0
 800e150:	d009      	beq.n	800e166 <__ieee754_pow+0x97e>
 800e152:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e156:	2200      	movs	r2, #0
 800e158:	2300      	movs	r3, #0
 800e15a:	f7f2 fc2f 	bl	80009bc <__aeabi_dcmplt>
 800e15e:	3800      	subs	r0, #0
 800e160:	bf18      	it	ne
 800e162:	2001      	movne	r0, #1
 800e164:	e453      	b.n	800da0e <__ieee754_pow+0x226>
 800e166:	4622      	mov	r2, r4
 800e168:	462b      	mov	r3, r5
 800e16a:	f7f1 fffd 	bl	8000168 <__aeabi_dsub>
 800e16e:	4642      	mov	r2, r8
 800e170:	464b      	mov	r3, r9
 800e172:	f7f2 fc37 	bl	80009e4 <__aeabi_dcmpge>
 800e176:	2800      	cmp	r0, #0
 800e178:	f43f aefa 	beq.w	800df70 <__ieee754_pow+0x788>
 800e17c:	e7e9      	b.n	800e152 <__ieee754_pow+0x96a>
 800e17e:	f04f 0a00 	mov.w	sl, #0
 800e182:	e720      	b.n	800dfc6 <__ieee754_pow+0x7de>
 800e184:	4621      	mov	r1, r4
 800e186:	e7d6      	b.n	800e136 <__ieee754_pow+0x94e>
 800e188:	f04f 0b00 	mov.w	fp, #0
 800e18c:	f8df c078 	ldr.w	ip, [pc, #120]	; 800e208 <__ieee754_pow+0xa20>
 800e190:	f7ff bbba 	b.w	800d908 <__ieee754_pow+0x120>
 800e194:	f04f 0b00 	mov.w	fp, #0
 800e198:	f04f 0c00 	mov.w	ip, #0
 800e19c:	f7ff bbb4 	b.w	800d908 <__ieee754_pow+0x120>
 800e1a0:	4640      	mov	r0, r8
 800e1a2:	4649      	mov	r1, r9
 800e1a4:	f7ff bb3d 	b.w	800d822 <__ieee754_pow+0x3a>
 800e1a8:	9200      	str	r2, [sp, #0]
 800e1aa:	f7ff bb89 	b.w	800d8c0 <__ieee754_pow+0xd8>
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	f7ff bb73 	b.w	800d89a <__ieee754_pow+0xb2>
 800e1b4:	f3af 8000 	nop.w
 800e1b8:	652b82fe 	.word	0x652b82fe
 800e1bc:	3c971547 	.word	0x3c971547
 800e1c0:	00000000 	.word	0x00000000
 800e1c4:	3fe62e43 	.word	0x3fe62e43
 800e1c8:	fefa39ef 	.word	0xfefa39ef
 800e1cc:	3fe62e42 	.word	0x3fe62e42
 800e1d0:	0ca86c39 	.word	0x0ca86c39
 800e1d4:	be205c61 	.word	0xbe205c61
 800e1d8:	72bea4d0 	.word	0x72bea4d0
 800e1dc:	3e663769 	.word	0x3e663769
 800e1e0:	c5d26bf1 	.word	0xc5d26bf1
 800e1e4:	3ebbbd41 	.word	0x3ebbbd41
 800e1e8:	af25de2c 	.word	0xaf25de2c
 800e1ec:	3f11566a 	.word	0x3f11566a
 800e1f0:	16bebd93 	.word	0x16bebd93
 800e1f4:	3f66c16c 	.word	0x3f66c16c
 800e1f8:	5555553e 	.word	0x5555553e
 800e1fc:	3fc55555 	.word	0x3fc55555
 800e200:	3fe00000 	.word	0x3fe00000
 800e204:	000fffff 	.word	0x000fffff
 800e208:	3ff00000 	.word	0x3ff00000
 800e20c:	4090cbff 	.word	0x4090cbff
 800e210:	3f6f3400 	.word	0x3f6f3400

0800e214 <__ieee754_sqrt>:
 800e214:	f8df c158 	ldr.w	ip, [pc, #344]	; 800e370 <__ieee754_sqrt+0x15c>
 800e218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e21c:	ea3c 0c01 	bics.w	ip, ip, r1
 800e220:	4606      	mov	r6, r0
 800e222:	460d      	mov	r5, r1
 800e224:	460c      	mov	r4, r1
 800e226:	460a      	mov	r2, r1
 800e228:	4607      	mov	r7, r0
 800e22a:	4603      	mov	r3, r0
 800e22c:	d10f      	bne.n	800e24e <__ieee754_sqrt+0x3a>
 800e22e:	4602      	mov	r2, r0
 800e230:	460b      	mov	r3, r1
 800e232:	f7f2 f951 	bl	80004d8 <__aeabi_dmul>
 800e236:	4602      	mov	r2, r0
 800e238:	460b      	mov	r3, r1
 800e23a:	4630      	mov	r0, r6
 800e23c:	4629      	mov	r1, r5
 800e23e:	f7f1 ff95 	bl	800016c <__adddf3>
 800e242:	4606      	mov	r6, r0
 800e244:	460d      	mov	r5, r1
 800e246:	4630      	mov	r0, r6
 800e248:	4629      	mov	r1, r5
 800e24a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e24e:	2900      	cmp	r1, #0
 800e250:	dc0e      	bgt.n	800e270 <__ieee754_sqrt+0x5c>
 800e252:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800e256:	ea5c 0707 	orrs.w	r7, ip, r7
 800e25a:	d0f4      	beq.n	800e246 <__ieee754_sqrt+0x32>
 800e25c:	b141      	cbz	r1, 800e270 <__ieee754_sqrt+0x5c>
 800e25e:	4602      	mov	r2, r0
 800e260:	460b      	mov	r3, r1
 800e262:	f7f1 ff81 	bl	8000168 <__aeabi_dsub>
 800e266:	4602      	mov	r2, r0
 800e268:	460b      	mov	r3, r1
 800e26a:	f7f2 fa5f 	bl	800072c <__aeabi_ddiv>
 800e26e:	e7e8      	b.n	800e242 <__ieee754_sqrt+0x2e>
 800e270:	1521      	asrs	r1, r4, #20
 800e272:	d075      	beq.n	800e360 <__ieee754_sqrt+0x14c>
 800e274:	07cc      	lsls	r4, r1, #31
 800e276:	f04f 0400 	mov.w	r4, #0
 800e27a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800e27e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800e282:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800e286:	bf5e      	ittt	pl
 800e288:	0fd9      	lsrpl	r1, r3, #31
 800e28a:	005b      	lslpl	r3, r3, #1
 800e28c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800e290:	0fd9      	lsrs	r1, r3, #31
 800e292:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800e296:	2516      	movs	r5, #22
 800e298:	4620      	mov	r0, r4
 800e29a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e29e:	107f      	asrs	r7, r7, #1
 800e2a0:	005b      	lsls	r3, r3, #1
 800e2a2:	1846      	adds	r6, r0, r1
 800e2a4:	4296      	cmp	r6, r2
 800e2a6:	bfde      	ittt	le
 800e2a8:	1b92      	suble	r2, r2, r6
 800e2aa:	1870      	addle	r0, r6, r1
 800e2ac:	1864      	addle	r4, r4, r1
 800e2ae:	0052      	lsls	r2, r2, #1
 800e2b0:	3d01      	subs	r5, #1
 800e2b2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800e2b6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e2ba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e2be:	d1f0      	bne.n	800e2a2 <__ieee754_sqrt+0x8e>
 800e2c0:	4629      	mov	r1, r5
 800e2c2:	f04f 0e20 	mov.w	lr, #32
 800e2c6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e2ca:	4282      	cmp	r2, r0
 800e2cc:	eb06 0c05 	add.w	ip, r6, r5
 800e2d0:	dc02      	bgt.n	800e2d8 <__ieee754_sqrt+0xc4>
 800e2d2:	d113      	bne.n	800e2fc <__ieee754_sqrt+0xe8>
 800e2d4:	459c      	cmp	ip, r3
 800e2d6:	d811      	bhi.n	800e2fc <__ieee754_sqrt+0xe8>
 800e2d8:	f1bc 0f00 	cmp.w	ip, #0
 800e2dc:	eb0c 0506 	add.w	r5, ip, r6
 800e2e0:	da43      	bge.n	800e36a <__ieee754_sqrt+0x156>
 800e2e2:	2d00      	cmp	r5, #0
 800e2e4:	db41      	blt.n	800e36a <__ieee754_sqrt+0x156>
 800e2e6:	f100 0801 	add.w	r8, r0, #1
 800e2ea:	1a12      	subs	r2, r2, r0
 800e2ec:	4640      	mov	r0, r8
 800e2ee:	459c      	cmp	ip, r3
 800e2f0:	bf88      	it	hi
 800e2f2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800e2f6:	eba3 030c 	sub.w	r3, r3, ip
 800e2fa:	4431      	add	r1, r6
 800e2fc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800e300:	f1be 0e01 	subs.w	lr, lr, #1
 800e304:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800e308:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e30c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e310:	d1db      	bne.n	800e2ca <__ieee754_sqrt+0xb6>
 800e312:	4313      	orrs	r3, r2
 800e314:	d006      	beq.n	800e324 <__ieee754_sqrt+0x110>
 800e316:	1c48      	adds	r0, r1, #1
 800e318:	bf0b      	itete	eq
 800e31a:	4671      	moveq	r1, lr
 800e31c:	3101      	addne	r1, #1
 800e31e:	3401      	addeq	r4, #1
 800e320:	f021 0101 	bicne.w	r1, r1, #1
 800e324:	1063      	asrs	r3, r4, #1
 800e326:	0849      	lsrs	r1, r1, #1
 800e328:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e32c:	07e2      	lsls	r2, r4, #31
 800e32e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e332:	bf48      	it	mi
 800e334:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800e338:	460e      	mov	r6, r1
 800e33a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800e33e:	e782      	b.n	800e246 <__ieee754_sqrt+0x32>
 800e340:	0ada      	lsrs	r2, r3, #11
 800e342:	3815      	subs	r0, #21
 800e344:	055b      	lsls	r3, r3, #21
 800e346:	2a00      	cmp	r2, #0
 800e348:	d0fa      	beq.n	800e340 <__ieee754_sqrt+0x12c>
 800e34a:	02d5      	lsls	r5, r2, #11
 800e34c:	d50a      	bpl.n	800e364 <__ieee754_sqrt+0x150>
 800e34e:	f1c1 0420 	rsb	r4, r1, #32
 800e352:	fa23 f404 	lsr.w	r4, r3, r4
 800e356:	1e4d      	subs	r5, r1, #1
 800e358:	408b      	lsls	r3, r1
 800e35a:	4322      	orrs	r2, r4
 800e35c:	1b41      	subs	r1, r0, r5
 800e35e:	e789      	b.n	800e274 <__ieee754_sqrt+0x60>
 800e360:	4608      	mov	r0, r1
 800e362:	e7f0      	b.n	800e346 <__ieee754_sqrt+0x132>
 800e364:	0052      	lsls	r2, r2, #1
 800e366:	3101      	adds	r1, #1
 800e368:	e7ef      	b.n	800e34a <__ieee754_sqrt+0x136>
 800e36a:	4680      	mov	r8, r0
 800e36c:	e7bd      	b.n	800e2ea <__ieee754_sqrt+0xd6>
 800e36e:	bf00      	nop
 800e370:	7ff00000 	.word	0x7ff00000

0800e374 <with_errno>:
 800e374:	b570      	push	{r4, r5, r6, lr}
 800e376:	4604      	mov	r4, r0
 800e378:	460d      	mov	r5, r1
 800e37a:	4616      	mov	r6, r2
 800e37c:	f7fa fb38 	bl	80089f0 <__errno>
 800e380:	4629      	mov	r1, r5
 800e382:	6006      	str	r6, [r0, #0]
 800e384:	4620      	mov	r0, r4
 800e386:	bd70      	pop	{r4, r5, r6, pc}

0800e388 <xflow>:
 800e388:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e38a:	4615      	mov	r5, r2
 800e38c:	461c      	mov	r4, r3
 800e38e:	b180      	cbz	r0, 800e3b2 <xflow+0x2a>
 800e390:	4610      	mov	r0, r2
 800e392:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e396:	e9cd 0100 	strd	r0, r1, [sp]
 800e39a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e39e:	4628      	mov	r0, r5
 800e3a0:	4621      	mov	r1, r4
 800e3a2:	f7f2 f899 	bl	80004d8 <__aeabi_dmul>
 800e3a6:	2222      	movs	r2, #34	; 0x22
 800e3a8:	b003      	add	sp, #12
 800e3aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e3ae:	f7ff bfe1 	b.w	800e374 <with_errno>
 800e3b2:	4610      	mov	r0, r2
 800e3b4:	4619      	mov	r1, r3
 800e3b6:	e7ee      	b.n	800e396 <xflow+0xe>

0800e3b8 <__math_uflow>:
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e3be:	f7ff bfe3 	b.w	800e388 <xflow>

0800e3c2 <__math_oflow>:
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800e3c8:	f7ff bfde 	b.w	800e388 <xflow>

0800e3cc <finite>:
 800e3cc:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800e3d0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e3d4:	0fc0      	lsrs	r0, r0, #31
 800e3d6:	4770      	bx	lr

0800e3d8 <scalbn>:
 800e3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3da:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800e3de:	4604      	mov	r4, r0
 800e3e0:	460d      	mov	r5, r1
 800e3e2:	4617      	mov	r7, r2
 800e3e4:	460b      	mov	r3, r1
 800e3e6:	b996      	cbnz	r6, 800e40e <scalbn+0x36>
 800e3e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e3ec:	4303      	orrs	r3, r0
 800e3ee:	d039      	beq.n	800e464 <scalbn+0x8c>
 800e3f0:	4b33      	ldr	r3, [pc, #204]	; (800e4c0 <scalbn+0xe8>)
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	f7f2 f870 	bl	80004d8 <__aeabi_dmul>
 800e3f8:	4b32      	ldr	r3, [pc, #200]	; (800e4c4 <scalbn+0xec>)
 800e3fa:	4604      	mov	r4, r0
 800e3fc:	429f      	cmp	r7, r3
 800e3fe:	460d      	mov	r5, r1
 800e400:	da0f      	bge.n	800e422 <scalbn+0x4a>
 800e402:	a32b      	add	r3, pc, #172	; (adr r3, 800e4b0 <scalbn+0xd8>)
 800e404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e408:	f7f2 f866 	bl	80004d8 <__aeabi_dmul>
 800e40c:	e006      	b.n	800e41c <scalbn+0x44>
 800e40e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e412:	4296      	cmp	r6, r2
 800e414:	d10a      	bne.n	800e42c <scalbn+0x54>
 800e416:	4602      	mov	r2, r0
 800e418:	f7f1 fea8 	bl	800016c <__adddf3>
 800e41c:	4604      	mov	r4, r0
 800e41e:	460d      	mov	r5, r1
 800e420:	e020      	b.n	800e464 <scalbn+0x8c>
 800e422:	460b      	mov	r3, r1
 800e424:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e428:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800e42c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800e430:	19b9      	adds	r1, r7, r6
 800e432:	4291      	cmp	r1, r2
 800e434:	dd0e      	ble.n	800e454 <scalbn+0x7c>
 800e436:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800e43a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800e43e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800e442:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800e446:	4820      	ldr	r0, [pc, #128]	; (800e4c8 <scalbn+0xf0>)
 800e448:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800e44c:	a31a      	add	r3, pc, #104	; (adr r3, 800e4b8 <scalbn+0xe0>)
 800e44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e452:	e7d9      	b.n	800e408 <scalbn+0x30>
 800e454:	2900      	cmp	r1, #0
 800e456:	dd08      	ble.n	800e46a <scalbn+0x92>
 800e458:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e45c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e460:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800e464:	4620      	mov	r0, r4
 800e466:	4629      	mov	r1, r5
 800e468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e46a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800e46e:	da12      	bge.n	800e496 <scalbn+0xbe>
 800e470:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e474:	429f      	cmp	r7, r3
 800e476:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800e47a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800e47e:	dcdc      	bgt.n	800e43a <scalbn+0x62>
 800e480:	a30b      	add	r3, pc, #44	; (adr r3, 800e4b0 <scalbn+0xd8>)
 800e482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e486:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800e48a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800e48e:	480f      	ldr	r0, [pc, #60]	; (800e4cc <scalbn+0xf4>)
 800e490:	f041 011f 	orr.w	r1, r1, #31
 800e494:	e7b8      	b.n	800e408 <scalbn+0x30>
 800e496:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e49a:	3136      	adds	r1, #54	; 0x36
 800e49c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e4a0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800e4a4:	4620      	mov	r0, r4
 800e4a6:	4629      	mov	r1, r5
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	4b09      	ldr	r3, [pc, #36]	; (800e4d0 <scalbn+0xf8>)
 800e4ac:	e7ac      	b.n	800e408 <scalbn+0x30>
 800e4ae:	bf00      	nop
 800e4b0:	c2f8f359 	.word	0xc2f8f359
 800e4b4:	01a56e1f 	.word	0x01a56e1f
 800e4b8:	8800759c 	.word	0x8800759c
 800e4bc:	7e37e43c 	.word	0x7e37e43c
 800e4c0:	43500000 	.word	0x43500000
 800e4c4:	ffff3cb0 	.word	0xffff3cb0
 800e4c8:	8800759c 	.word	0x8800759c
 800e4cc:	c2f8f359 	.word	0xc2f8f359
 800e4d0:	3c900000 	.word	0x3c900000

0800e4d4 <_init>:
 800e4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4d6:	bf00      	nop
 800e4d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4da:	bc08      	pop	{r3}
 800e4dc:	469e      	mov	lr, r3
 800e4de:	4770      	bx	lr

0800e4e0 <_fini>:
 800e4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4e2:	bf00      	nop
 800e4e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4e6:	bc08      	pop	{r3}
 800e4e8:	469e      	mov	lr, r3
 800e4ea:	4770      	bx	lr
